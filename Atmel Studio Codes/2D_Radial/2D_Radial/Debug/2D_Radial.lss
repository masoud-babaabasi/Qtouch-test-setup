
2D_Radial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00804000  00002a7e  00002b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000159  00804118  00804118  00002c2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00002ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000716d  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b29  00000000  00000000  0000a11d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ea1  00000000  00000000  0000dc46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  0000fae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034f5  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001455  00000000  00000000  000135f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00014a46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_3>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_27>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_31>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	df e7       	ldi	r29, 0x7F	; 127
      f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_copy_data>:
      f4:	11 e4       	ldi	r17, 0x41	; 65
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e4       	ldi	r27, 0x40	; 64
      fa:	ee e7       	ldi	r30, 0x7E	; 126
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 31       	cpi	r26, 0x18	; 24
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e4       	ldi	r18, 0x42	; 66
     110:	a8 e1       	ldi	r26, 0x18	; 24
     112:	b1 e4       	ldi	r27, 0x41	; 65
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 37       	cpi	r26, 0x71	; 113
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 96 01 	call	0x32c	; 0x32c <main>
     122:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     12a:	0e 94 4a 06 	call	0xc94	; 0xc94 <system_init>

	touch_init();
     12e:	0e 94 01 05 	call	0xa02	; 0xa02 <touch_init>
     132:	08 95       	ret

00000134 <__vector_31>:
#include <driver_init.h>
#include <compiler.h>

ISR(USART1_RXC_vect)

{
     134:	1f 92       	push	r1
     136:	0f 92       	push	r0
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	0f 92       	push	r0
     13c:	11 24       	eor	r1, r1
     13e:	0b b6       	in	r0, 0x3b	; 59
     140:	0f 92       	push	r0
     142:	2f 93       	push	r18
     144:	3f 93       	push	r19
     146:	4f 93       	push	r20
     148:	5f 93       	push	r21
     14a:	6f 93       	push	r22
     14c:	7f 93       	push	r23
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
     152:	af 93       	push	r26
     154:	bf 93       	push	r27
     156:	ef 93       	push	r30
     158:	ff 93       	push	r31

	krono_rx_complete_callback();
     15a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <krono_rx_complete_callback>
}
     15e:	ff 91       	pop	r31
     160:	ef 91       	pop	r30
     162:	bf 91       	pop	r27
     164:	af 91       	pop	r26
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	7f 91       	pop	r23
     16c:	6f 91       	pop	r22
     16e:	5f 91       	pop	r21
     170:	4f 91       	pop	r20
     172:	3f 91       	pop	r19
     174:	2f 91       	pop	r18
     176:	0f 90       	pop	r0
     178:	0b be       	out	0x3b, r0	; 59
     17a:	0f 90       	pop	r0
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	0f 90       	pop	r0
     180:	1f 90       	pop	r1
     182:	18 95       	reti

00000184 <__vector_33>:

ISR(USART1_TXC_vect)
{
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	0b b6       	in	r0, 0x3b	; 59
     190:	0f 92       	push	r0
     192:	2f 93       	push	r18
     194:	3f 93       	push	r19
     196:	4f 93       	push	r20
     198:	5f 93       	push	r21
     19a:	6f 93       	push	r22
     19c:	7f 93       	push	r23
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	af 93       	push	r26
     1a4:	bf 93       	push	r27
     1a6:	ef 93       	push	r30
     1a8:	ff 93       	push	r31

	krono_tx_complete_callback();
     1aa:	0e 94 c2 04 	call	0x984	; 0x984 <krono_tx_complete_callback>
}
     1ae:	ff 91       	pop	r31
     1b0:	ef 91       	pop	r30
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	0f 90       	pop	r0
     1c8:	0b be       	out	0x3b, r0	; 59
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <__vector_3>:

ISR(RTC_CNT_vect)
{
     1d4:	1f 92       	push	r1
     1d6:	0f 92       	push	r0
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	0f 92       	push	r0
     1dc:	11 24       	eor	r1, r1
     1de:	0b b6       	in	r0, 0x3b	; 59
     1e0:	0f 92       	push	r0
     1e2:	2f 93       	push	r18
     1e4:	3f 93       	push	r19
     1e6:	4f 93       	push	r20
     1e8:	5f 93       	push	r21
     1ea:	6f 93       	push	r22
     1ec:	7f 93       	push	r23
     1ee:	8f 93       	push	r24
     1f0:	9f 93       	push	r25
     1f2:	af 93       	push	r26
     1f4:	bf 93       	push	r27
     1f6:	ef 93       	push	r30
     1f8:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
     1fa:	0e 94 b0 05 	call	0xb60	; 0xb60 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
     204:	ff 91       	pop	r31
     206:	ef 91       	pop	r30
     208:	bf 91       	pop	r27
     20a:	af 91       	pop	r26
     20c:	9f 91       	pop	r25
     20e:	8f 91       	pop	r24
     210:	7f 91       	pop	r23
     212:	6f 91       	pop	r22
     214:	5f 91       	pop	r21
     216:	4f 91       	pop	r20
     218:	3f 91       	pop	r19
     21a:	2f 91       	pop	r18
     21c:	0f 90       	pop	r0
     21e:	0b be       	out	0x3b, r0	; 59
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <touch_status_display>:
Output : none
Notes  : none
============================================================================*/
void touch_status_display(void)
{
	key_status = get_sensor_state(0) & KEY_TOUCHED_MASK;
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_sensor_state>
     232:	80 78       	andi	r24, 0x80	; 128
     234:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <__data_end>
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(1) & KEY_TOUCHED_MASK;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_sensor_state>
     240:	80 78       	andi	r24, 0x80	; 128
     242:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <__data_end>
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(2) & KEY_TOUCHED_MASK;
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_sensor_state>
     24e:	80 78       	andi	r24, 0x80	; 128
     250:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <__data_end>
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(3) & KEY_TOUCHED_MASK;
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_sensor_state>
     25c:	80 78       	andi	r24, 0x80	; 128
     25e:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <__data_end>
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(4) & KEY_TOUCHED_MASK;
     262:	84 e0       	ldi	r24, 0x04	; 4
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_sensor_state>
     26a:	80 78       	andi	r24, 0x80	; 128
     26c:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <__data_end>
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(5) & KEY_TOUCHED_MASK;
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 c2 05 	call	0xb84	; 0xb84 <get_sensor_state>
     278:	80 78       	andi	r24, 0x80	; 128
     27a:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <__data_end>
     27e:	08 95       	ret

00000280 <touch_example>:
	 *
	 * Note: This is a sample file to provide reference on using touch status in a user application. This file is not
	 * linked to a project build.
	 */

	touch_process();
     280:	0e 94 6d 05 	call	0xada	; 0xada <touch_process>
	if (measurement_done_touch == 1) {
     284:	80 91 44 41 	lds	r24, 0x4144	; 0x804144 <measurement_done_touch>
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	21 f4       	brne	.+8      	; 0x294 <touch_example+0x14>
		measurement_done_touch = 0;
     28c:	10 92 44 41 	sts	0x4144, r1	; 0x804144 <measurement_done_touch>
		touch_status_display();
     290:	0e 94 15 01 	call	0x22a	; 0x22a <touch_status_display>
     294:	08 95       	ret

00000296 <shiftOut>:
		for( uint8_t i=0 ; i < uart_size ; i++ ) USART_0_write((uint8_t)str[i]);
	}*/
	}
}

void shiftOut(uint32_t data){
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	PORTE.OUTCLR = ( 1 << 2 ) | ( 1 << 3 );
     2a2:	2c e0       	ldi	r18, 0x0C	; 12
     2a4:	20 93 86 04 	sts	0x0486, r18	; 0x800486 <__TEXT_REGION_LENGTH__+0x7e0486>
	PORTF.OUTCLR = ( 1 << 0 ) ;
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7e04a6>
	data &= (0x00ffffff);
     2ae:	6b 01       	movw	r12, r22
     2b0:	7c 01       	movw	r14, r24
     2b2:	ff 24       	eor	r15, r15
     2b4:	87 e1       	ldi	r24, 0x17	; 23
     2b6:	90 e0       	ldi	r25, 0x00	; 0
	for(int8_t i=23 ; i >= 0 ; i--){
		if( data & ( (uint32_t)1 << i) ) PORTE.OUTSET = ( 1 << 2);
		else PORTE.OUTCLR = ( 1 << 2);
     2b8:	a0 e8       	ldi	r26, 0x80	; 128
     2ba:	b4 e0       	ldi	r27, 0x04	; 4
     2bc:	34 e0       	ldi	r19, 0x04	; 4
		PORTF.OUTSET = (1 << 0 );
     2be:	e0 ea       	ldi	r30, 0xA0	; 160
     2c0:	f4 e0       	ldi	r31, 0x04	; 4
void shiftOut(uint32_t data){
	PORTE.OUTCLR = ( 1 << 2 ) | ( 1 << 3 );
	PORTF.OUTCLR = ( 1 << 0 ) ;
	data &= (0x00ffffff);
	for(int8_t i=23 ; i >= 0 ; i--){
		if( data & ( (uint32_t)1 << i) ) PORTE.OUTSET = ( 1 << 2);
     2c2:	b7 01       	movw	r22, r14
     2c4:	a6 01       	movw	r20, r12
     2c6:	08 2e       	mov	r0, r24
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <shiftOut+0x3c>
     2ca:	76 95       	lsr	r23
     2cc:	67 95       	ror	r22
     2ce:	57 95       	ror	r21
     2d0:	47 95       	ror	r20
     2d2:	0a 94       	dec	r0
     2d4:	d2 f7       	brpl	.-12     	; 0x2ca <shiftOut+0x34>
     2d6:	40 ff       	sbrs	r20, 0
     2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <shiftOut+0x4c>
     2da:	15 96       	adiw	r26, 0x05	; 5
     2dc:	3c 93       	st	X, r19
     2de:	15 97       	sbiw	r26, 0x05	; 5
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <shiftOut+0x52>
		else PORTE.OUTCLR = ( 1 << 2);
     2e2:	16 96       	adiw	r26, 0x06	; 6
     2e4:	3c 93       	st	X, r19
     2e6:	16 97       	sbiw	r26, 0x06	; 6
		PORTF.OUTSET = (1 << 0 );
     2e8:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ea:	cb e2       	ldi	r28, 0x2B	; 43
     2ec:	d1 e0       	ldi	r29, 0x01	; 1
     2ee:	21 97       	sbiw	r28, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <shiftOut+0x58>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <shiftOut+0x5e>
     2f4:	00 00       	nop
		_delay_us(50);
		PORTF.OUTCLR = (1 << 0 );
     2f6:	26 83       	std	Z+6, r18	; 0x06
     2f8:	cb e2       	ldi	r28, 0x2B	; 43
     2fa:	d1 e0       	ldi	r29, 0x01	; 1
     2fc:	21 97       	sbiw	r28, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <shiftOut+0x66>
     300:	00 c0       	rjmp	.+0      	; 0x302 <shiftOut+0x6c>
     302:	00 00       	nop
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	e8 f6       	brcc	.-70     	; 0x2c2 <shiftOut+0x2c>
		_delay_us(50);
	}
	PORTE.OUTSET = (1 << 3 );
     308:	e0 e8       	ldi	r30, 0x80	; 128
     30a:	f4 e0       	ldi	r31, 0x04	; 4
     30c:	88 e0       	ldi	r24, 0x08	; 8
     30e:	85 83       	std	Z+5, r24	; 0x05
     310:	ab e2       	ldi	r26, 0x2B	; 43
     312:	b1 e0       	ldi	r27, 0x01	; 1
     314:	11 97       	sbiw	r26, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <shiftOut+0x7e>
     318:	00 c0       	rjmp	.+0      	; 0x31a <shiftOut+0x84>
     31a:	00 00       	nop
	_delay_us(50);
	PORTE.OUTCLR = (1 << 3 );
     31c:	86 83       	std	Z+6, r24	; 0x06
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	08 95       	ret

0000032c <main>:

void shiftOut(uint32_t data);
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     32c:	0e 94 95 00 	call	0x12a	; 0x12a <atmel_start_init>
	char str[50];
	uint8_t uart_size;
	PORTE.DIR = ( 1 << 2 ) | ( 1 << 3 );
     330:	8c e0       	ldi	r24, 0x0C	; 12
     332:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <__TEXT_REGION_LENGTH__+0x7e0480>
	PORTF.DIR = ( 1 << 0 ) ;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7e04a0>
     33c:	c0 e0       	ldi	r28, 0x00	; 0
     33e:	d0 e0       	ldi	r29, 0x00	; 0

	//uart_size = sprintf(str,"Start testing\n");
	//for( uint8_t i=0 ; i < uart_size ; i++ ) USART_0_write((uint8_t)str[i]);

	for(uint8_t i = 0 ; i < 24 ; i++){
		shiftOut(1LU << i);
     340:	c1 2c       	mov	r12, r1
     342:	d1 2c       	mov	r13, r1
     344:	76 01       	movw	r14, r12
     346:	c3 94       	inc	r12
     348:	c7 01       	movw	r24, r14
     34a:	b6 01       	movw	r22, r12
     34c:	0c 2e       	mov	r0, r28
     34e:	04 c0       	rjmp	.+8      	; 0x358 <main+0x2c>
     350:	66 0f       	add	r22, r22
     352:	77 1f       	adc	r23, r23
     354:	88 1f       	adc	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	0a 94       	dec	r0
     35a:	d2 f7       	brpl	.-12     	; 0x350 <main+0x24>
     35c:	0e 94 4b 01 	call	0x296	; 0x296 <shiftOut>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	8f e7       	ldi	r24, 0x7F	; 127
     362:	99 ea       	ldi	r25, 0xA9	; 169
     364:	23 e0       	ldi	r18, 0x03	; 3
     366:	81 50       	subi	r24, 0x01	; 1
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	20 40       	sbci	r18, 0x00	; 0
     36c:	e1 f7       	brne	.-8      	; 0x366 <main+0x3a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x44>
     370:	00 00       	nop
     372:	21 96       	adiw	r28, 0x01	; 1
	PORTF.DIR = ( 1 << 0 ) ;

	//uart_size = sprintf(str,"Start testing\n");
	//for( uint8_t i=0 ; i < uart_size ; i++ ) USART_0_write((uint8_t)str[i]);

	for(uint8_t i = 0 ; i < 24 ; i++){
     374:	c8 31       	cpi	r28, 0x18	; 24
     376:	d1 05       	cpc	r29, r1
     378:	39 f7       	brne	.-50     	; 0x348 <main+0x1c>
		shiftOut(1LU << i);
		_delay_ms(50);
	}
	/* Replace with your application code */
	while (1) {
	touch_example();
     37a:	0e 94 40 01 	call	0x280	; 0x280 <touch_example>
     37e:	fd cf       	rjmp	.-6      	; 0x37a <main+0x4e>

00000380 <Krono_UpdateBuffer>:
void SetIRQPin(void)
{
}

void ClearIRQPin(void)
{
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	80 91 1b 41 	lds	r24, 0x411B	; 0x80411b <initialized.5070>
     38c:	81 11       	cpse	r24, r1
     38e:	18 c0       	rjmp	.+48     	; 0x3c0 <Krono_UpdateBuffer+0x40>
     390:	e8 e0       	ldi	r30, 0x08	; 8
     392:	f0 e4       	ldi	r31, 0x40	; 64
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	00 90 9d 40 	lds	r0, 0x409D	; 0x80409d <ptc_seq_node_cfg1+0x4f>
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <Krono_UpdateBuffer+0x22>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	0a 94       	dec	r0
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <Krono_UpdateBuffer+0x1e>
     3a6:	82 83       	std	Z+2, r24	; 0x02
     3a8:	ac e2       	ldi	r26, 0x2C	; 44
     3aa:	b0 e4       	ldi	r27, 0x40	; 64
     3ac:	19 96       	adiw	r26, 0x09	; 9
     3ae:	8c 91       	ld	r24, X
     3b0:	19 97       	sbiw	r26, 0x09	; 9
     3b2:	83 83       	std	Z+3, r24	; 0x03
     3b4:	8c 91       	ld	r24, X
     3b6:	84 83       	std	Z+4, r24	; 0x04
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 1b 41 	sts	0x411B, r24	; 0x80411b <initialized.5070>
     3be:	6f c0       	rjmp	.+222    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3c0:	80 91 40 41 	lds	r24, 0x4140	; 0x804140 <writeback_req>
     3c4:	88 23       	and	r24, r24
     3c6:	09 f4       	brne	.+2      	; 0x3ca <Krono_UpdateBuffer+0x4a>
     3c8:	6a c0       	rjmp	.+212    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3ca:	20 91 0a 40 	lds	r18, 0x400A	; 0x80400a <cfgRam+0x2>
     3ce:	42 2f       	mov	r20, r18
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	00 90 9d 40 	lds	r0, 0x409D	; 0x80409d <ptc_seq_node_cfg1+0x4f>
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <Krono_UpdateBuffer+0x60>
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	0a 94       	dec	r0
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <Krono_UpdateBuffer+0x5c>
     3e4:	99 27       	eor	r25, r25
     3e6:	48 17       	cp	r20, r24
     3e8:	59 07       	cpc	r21, r25
     3ea:	09 f4       	brne	.+2      	; 0x3ee <Krono_UpdateBuffer+0x6e>
     3ec:	de c0       	rjmp	.+444    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     3ee:	47 e0       	ldi	r20, 0x07	; 7
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	cb 01       	movw	r24, r22
     3fa:	04 2e       	mov	r0, r20
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	0a 94       	dec	r0
     404:	e2 f7       	brpl	.-8      	; 0x3fe <Krono_UpdateBuffer+0x7e>
     406:	82 23       	and	r24, r18
     408:	19 f0       	breq	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	27 e0       	ldi	r18, 0x07	; 7
     40c:	23 1b       	sub	r18, r19
     40e:	05 c0       	rjmp	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     410:	3f 5f       	subi	r19, 0xFF	; 255
     412:	41 50       	subi	r20, 0x01	; 1
     414:	51 09       	sbc	r21, r1
     416:	38 30       	cpi	r19, 0x08	; 8
     418:	79 f7       	brne	.-34     	; 0x3f8 <Krono_UpdateBuffer+0x78>
     41a:	27 30       	cpi	r18, 0x07	; 7
     41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	26 e0       	ldi	r18, 0x06	; 6
     420:	c8 e0       	ldi	r28, 0x08	; 8
     422:	d0 e4       	ldi	r29, 0x40	; 64
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	02 2e       	mov	r0, r18
     428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	88 0f       	add	r24, r24
     42c:	0a 94       	dec	r0
     42e:	ea f7       	brpl	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     430:	8a 83       	std	Y+2, r24	; 0x02
     432:	ee e4       	ldi	r30, 0x4E	; 78
     434:	f0 e4       	ldi	r31, 0x40	; 64
     436:	20 93 9d 40 	sts	0x409D, r18	; 0x80409d <ptc_seq_node_cfg1+0x4f>
     43a:	20 93 b1 40 	sts	0x40B1, r18	; 0x8040b1 <ptc_seq_node_cfg1+0x63>
     43e:	20 93 c5 40 	sts	0x40C5, r18	; 0x8040c5 <ptc_seq_node_cfg1+0x77>
     442:	23 8b       	std	Z+19, r18	; 0x13
     444:	27 a3       	std	Z+39, r18	; 0x27
     446:	23 af       	std	Z+59, r18	; 0x3b
     448:	0e 94 01 05 	call	0xa02	; 0xa02 <touch_init>
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	90 91 35 40 	lds	r25, 0x4035	; 0x804035 <qtlib_key_configs_set1+0x9>
     452:	89 17       	cp	r24, r25
     454:	09 f4       	brne	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     456:	b0 c0       	rjmp	.+352    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     458:	ec e2       	ldi	r30, 0x2C	; 44
     45a:	f0 e4       	ldi	r31, 0x40	; 64
     45c:	81 87       	std	Z+9, r24	; 0x09
     45e:	84 87       	std	Z+12, r24	; 0x0c
     460:	87 87       	std	Z+15, r24	; 0x0f
     462:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <cfgRam+0x4>
     466:	90 91 2c 40 	lds	r25, 0x402C	; 0x80402c <qtlib_key_configs_set1>
     46a:	89 17       	cp	r24, r25
     46c:	29 f0       	breq	.+10     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     46e:	ec e2       	ldi	r30, 0x2C	; 44
     470:	f0 e4       	ldi	r31, 0x40	; 64
     472:	80 83       	st	Z, r24
     474:	83 83       	std	Z+3, r24	; 0x03
     476:	86 83       	std	Z+6, r24	; 0x06
     478:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <cfgRam+0x9>
     47c:	e0 91 15 40 	lds	r30, 0x4015	; 0x804015 <qtm_surface_cs_control1+0x2>
     480:	f0 91 16 40 	lds	r31, 0x4016	; 0x804016 <qtm_surface_cs_control1+0x3>
     484:	96 81       	ldd	r25, Z+6	; 0x06
     486:	29 2f       	mov	r18, r25
     488:	22 95       	swap	r18
     48a:	2f 70       	andi	r18, 0x0F	; 15
     48c:	82 17       	cp	r24, r18
     48e:	29 f0       	breq	.+10     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     490:	9f 70       	andi	r25, 0x0F	; 15
     492:	82 95       	swap	r24
     494:	80 7f       	andi	r24, 0xF0	; 240
     496:	89 2b       	or	r24, r25
     498:	86 83       	std	Z+6, r24	; 0x06
     49a:	10 92 40 41 	sts	0x4140, r1	; 0x804140 <writeback_req>
     49e:	10 92 3a 41 	sts	0x413A, r1	; 0x80413a <touchRam>
     4a2:	a0 91 13 40 	lds	r26, 0x4013	; 0x804013 <qtm_surface_cs_control1>
     4a6:	b0 91 14 40 	lds	r27, 0x4014	; 0x804014 <qtm_surface_cs_control1+0x1>
     4aa:	8c 91       	ld	r24, X
     4ac:	80 ff       	sbrs	r24, 0
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 93 3a 41 	sts	0x413A, r24	; 0x80413a <touchRam>
     4b6:	80 91 1a 41 	lds	r24, 0x411A	; 0x80411a <frameCount.5071>
     4ba:	ea e3       	ldi	r30, 0x3A	; 58
     4bc:	f1 e4       	ldi	r31, 0x41	; 65
     4be:	90 81       	ld	r25, Z
     4c0:	98 2b       	or	r25, r24
     4c2:	90 83       	st	Z, r25
     4c4:	80 5f       	subi	r24, 0xF0	; 240
     4c6:	80 93 1a 41 	sts	0x411A, r24	; 0x80411a <frameCount.5071>
     4ca:	13 96       	adiw	r26, 0x03	; 3
     4cc:	2d 91       	ld	r18, X+
     4ce:	3c 91       	ld	r19, X
     4d0:	14 97       	sbiw	r26, 0x04	; 4
     4d2:	c9 01       	movw	r24, r18
     4d4:	92 95       	swap	r25
     4d6:	82 95       	swap	r24
     4d8:	8f 70       	andi	r24, 0x0F	; 15
     4da:	89 27       	eor	r24, r25
     4dc:	9f 70       	andi	r25, 0x0F	; 15
     4de:	89 27       	eor	r24, r25
     4e0:	81 83       	std	Z+1, r24	; 0x01
     4e2:	17 96       	adiw	r26, 0x07	; 7
     4e4:	8d 91       	ld	r24, X+
     4e6:	9c 91       	ld	r25, X
     4e8:	18 97       	sbiw	r26, 0x08	; 8
     4ea:	ac 01       	movw	r20, r24
     4ec:	52 95       	swap	r21
     4ee:	42 95       	swap	r20
     4f0:	4f 70       	andi	r20, 0x0F	; 15
     4f2:	45 27       	eor	r20, r21
     4f4:	5f 70       	andi	r21, 0x0F	; 15
     4f6:	45 27       	eor	r20, r21
     4f8:	42 83       	std	Z+2, r20	; 0x02
     4fa:	22 95       	swap	r18
     4fc:	20 7f       	andi	r18, 0xF0	; 240
     4fe:	8f 70       	andi	r24, 0x0F	; 15
     500:	82 2b       	or	r24, r18
     502:	83 83       	std	Z+3, r24	; 0x03
     504:	24 e3       	ldi	r18, 0x34	; 52
     506:	31 e4       	ldi	r19, 0x41	; 65
     508:	e9 e3       	ldi	r30, 0x39	; 57
     50a:	f2 e4       	ldi	r31, 0x42	; 66
     50c:	c8 e2       	ldi	r28, 0x28	; 40
     50e:	d1 e4       	ldi	r29, 0x41	; 65
     510:	0c e1       	ldi	r16, 0x1C	; 28
     512:	11 e4       	ldi	r17, 0x41	; 65
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	b8 f4       	brcc	.+46     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     51a:	44 a1       	ldd	r20, Z+36	; 0x24
     51c:	55 a1       	ldd	r21, Z+37	; 0x25
     51e:	da 01       	movw	r26, r20
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	4d 91       	ld	r20, X+
     524:	5c 91       	ld	r21, X
     526:	12 97       	sbiw	r26, 0x02	; 2
     528:	48 83       	st	Y, r20
     52a:	59 83       	std	Y+1, r21	; 0x01
     52c:	66 a1       	ldd	r22, Z+38	; 0x26
     52e:	77 a1       	ldd	r23, Z+39	; 0x27
     530:	d8 01       	movw	r26, r16
     532:	6d 93       	st	X+, r22
     534:	7c 93       	st	X, r23
     536:	64 17       	cp	r22, r20
     538:	75 07       	cpc	r23, r21
     53a:	10 f4       	brcc	.+4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     53c:	46 1b       	sub	r20, r22
     53e:	01 c0       	rjmp	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	d9 01       	movw	r26, r18
     544:	4c 93       	st	X, r20
     546:	16 c0       	rjmp	.+44     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     548:	40 81       	ld	r20, Z
     54a:	51 81       	ldd	r21, Z+1	; 0x01
     54c:	da 01       	movw	r26, r20
     54e:	11 96       	adiw	r26, 0x01	; 1
     550:	4d 91       	ld	r20, X+
     552:	5c 91       	ld	r21, X
     554:	12 97       	sbiw	r26, 0x02	; 2
     556:	48 83       	st	Y, r20
     558:	59 83       	std	Y+1, r21	; 0x01
     55a:	62 81       	ldd	r22, Z+2	; 0x02
     55c:	73 81       	ldd	r23, Z+3	; 0x03
     55e:	d8 01       	movw	r26, r16
     560:	6d 93       	st	X+, r22
     562:	7c 93       	st	X, r23
     564:	64 17       	cp	r22, r20
     566:	75 07       	cpc	r23, r21
     568:	10 f4       	brcc	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56a:	46 1b       	sub	r20, r22
     56c:	01 c0       	rjmp	.+2      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	d9 01       	movw	r26, r18
     572:	4c 93       	st	X, r20
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	2f 5f       	subi	r18, 0xFF	; 255
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	36 96       	adiw	r30, 0x06	; 6
     57c:	22 96       	adiw	r28, 0x02	; 2
     57e:	0e 5f       	subi	r16, 0xFE	; 254
     580:	1f 4f       	sbci	r17, 0xFF	; 255
     582:	86 30       	cpi	r24, 0x06	; 6
     584:	41 f6       	brne	.-112    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     586:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <__DATA_REGION_ORIGIN__+0x4>
     58a:	80 ff       	sbrs	r24, 0
     58c:	07 c0       	rjmp	.+14     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     58e:	0e 94 01 05 	call	0xa02	; 0xa02 <touch_init>
     592:	e0 e0       	ldi	r30, 0x00	; 0
     594:	f0 e4       	ldi	r31, 0x40	; 64
     596:	84 81       	ldd	r24, Z+4	; 0x04
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	84 83       	std	Z+4, r24	; 0x04
     59c:	0e 94 91 03 	call	0x722	; 0x722 <uart_send_touch_gesture_data>
     5a0:	80 91 0d 42 	lds	r24, 0x420D	; 0x80420d <qtm_surface_cs_data1>
     5a4:	80 93 19 41 	sts	0x4119, r24	; 0x804119 <previousSurfaceStatus.5072>
     5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5aa:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <cfgRam+0x3>
     5ae:	90 91 35 40 	lds	r25, 0x4035	; 0x804035 <qtlib_key_configs_set1+0x9>
     5b2:	98 13       	cpse	r25, r24
     5b4:	51 cf       	rjmp	.-350    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     5b6:	55 cf       	rjmp	.-342    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     5b8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <cfgRam+0x4>
     5bc:	90 91 2c 40 	lds	r25, 0x402C	; 0x80402c <qtlib_key_configs_set1>
     5c0:	89 13       	cpse	r24, r25
     5c2:	55 cf       	rjmp	.-342    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     5c4:	59 cf       	rjmp	.-334    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <Krono_memory_map_read>:
{
	uint16_t temp_read_16bit;
	uint8_t  temp_addr_calc;
	uint8_t  return_this_byte = 0u;

	if (mem_map_address < (VADDR_CORERAM + CORERAM_SIZE)) {
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	30 f4       	brcc	.+12     	; 0x5e0 <Krono_memory_map_read+0x10>
		return_this_byte = coreRam[mem_map_address];
     5d4:	e8 2f       	mov	r30, r24
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	e0 50       	subi	r30, 0x00	; 0
     5da:	f0 4c       	sbci	r31, 0xC0	; 192
     5dc:	80 81       	ld	r24, Z
     5de:	08 95       	ret
	} else if ((mem_map_address >= VADDR_TOUCHRAM) && (mem_map_address < (VADDR_TOUCHRAM + TOUCHRAM_SIZE))) {
     5e0:	90 ef       	ldi	r25, 0xF0	; 240
     5e2:	98 0f       	add	r25, r24
     5e4:	96 30       	cpi	r25, 0x06	; 6
     5e6:	30 f4       	brcc	.+12     	; 0x5f4 <Krono_memory_map_read+0x24>
		return_this_byte = touchRam[mem_map_address - VADDR_TOUCHRAM];
     5e8:	e8 2f       	mov	r30, r24
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	e6 5d       	subi	r30, 0xD6	; 214
     5ee:	fe 4b       	sbci	r31, 0xBE	; 190
     5f0:	80 81       	ld	r24, Z
     5f2:	08 95       	ret
	} else if ((mem_map_address >= VADDR_CFGRAM) && (mem_map_address < (VADDR_CFGRAM + CFGRAM_SIZE))) {
     5f4:	90 ee       	ldi	r25, 0xE0	; 224
     5f6:	98 0f       	add	r25, r24
     5f8:	9a 30       	cpi	r25, 0x0A	; 10
     5fa:	30 f4       	brcc	.+12     	; 0x608 <Krono_memory_map_read+0x38>
		return_this_byte = cfgRam[mem_map_address - VADDR_CFGRAM];
     5fc:	e8 2f       	mov	r30, r24
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	e8 51       	subi	r30, 0x18	; 24
     602:	f0 4c       	sbci	r31, 0xC0	; 192
     604:	80 81       	ld	r24, Z
     606:	08 95       	ret
	else if ((mem_map_address >= VADDR_GESTURECFGRAM)
	         && (mem_map_address < (VADDR_GESTURECFGRAM + GESTURECFGRAM_SIZE))) {
		return_this_byte = gestureCfgRam[mem_map_address - VADDR_GESTURECFGRAM];
	}
#endif
	else if ((mem_map_address >= VADDR_SVRAM)
     608:	94 e7       	ldi	r25, 0x74	; 116
     60a:	98 0f       	add	r25, r24
     60c:	96 30       	cpi	r25, 0x06	; 6
     60e:	30 f4       	brcc	.+12     	; 0x61c <Krono_memory_map_read+0x4c>
	         && (mem_map_address < (VADDR_SVRAM + (SURFACE_CS_NUM_KEYS_V + SURFACE_CS_NUM_KEYS_H)))) {
		return_this_byte = touchDelta[mem_map_address - VADDR_SVRAM];
     610:	e8 2f       	mov	r30, r24
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	e8 55       	subi	r30, 0x58	; 88
     616:	ff 4b       	sbci	r31, 0xBF	; 191
     618:	80 81       	ld	r24, Z
     61a:	08 95       	ret
	} else if ((mem_map_address >= VADDR_RAWVALUES)
	           && (mem_map_address < (VADDR_RAWVALUES + ((SURFACE_CS_NUM_KEYS_V + SURFACE_CS_NUM_KEYS_H) << 1u)))) {
     61c:	9d e5       	ldi	r25, 0x5D	; 93
     61e:	98 0f       	add	r25, r24
	}
#endif
	else if ((mem_map_address >= VADDR_SVRAM)
	         && (mem_map_address < (VADDR_SVRAM + (SURFACE_CS_NUM_KEYS_V + SURFACE_CS_NUM_KEYS_H)))) {
		return_this_byte = touchDelta[mem_map_address - VADDR_SVRAM];
	} else if ((mem_map_address >= VADDR_RAWVALUES)
     620:	9c 30       	cpi	r25, 0x0C	; 12
     622:	68 f4       	brcc	.+26     	; 0x63e <Krono_memory_map_read+0x6e>
	           && (mem_map_address < (VADDR_RAWVALUES + ((SURFACE_CS_NUM_KEYS_V + SURFACE_CS_NUM_KEYS_H) << 1u)))) {
		temp_addr_calc  = mem_map_address - VADDR_RAWVALUES;
		temp_read_16bit = touchRaw[temp_addr_calc >> 1u];
     624:	e9 2f       	mov	r30, r25
     626:	e6 95       	lsr	r30
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e8 5d       	subi	r30, 0xD8	; 216
     630:	fe 4b       	sbci	r31, 0xBE	; 190
     632:	20 81       	ld	r18, Z
     634:	81 81       	ldd	r24, Z+1	; 0x01
		if (0u == (temp_addr_calc % 2)) {
     636:	90 fd       	sbrc	r25, 0
     638:	15 c0       	rjmp	.+42     	; 0x664 <Krono_memory_map_read+0x94>
			/* Even number -> LSB */
			return_this_byte = (uint8_t)(temp_read_16bit & 0x00FFu);
     63a:	82 2f       	mov	r24, r18
     63c:	08 95       	ret
		} else {
			/* Odd number -> MSB */
			return_this_byte = (uint8_t)((temp_read_16bit & 0xFF00u) >> 8u);
		}
	} else if ((mem_map_address >= VADDR_BASEVALUES)
	           && (mem_map_address < (VADDR_BASEVALUES + ((SURFACE_CS_NUM_KEYS_V + SURFACE_CS_NUM_KEYS_H) << 1u)))) {
     63e:	ef e2       	ldi	r30, 0x2F	; 47
     640:	e8 0f       	add	r30, r24
			return_this_byte = (uint8_t)(temp_read_16bit & 0x00FFu);
		} else {
			/* Odd number -> MSB */
			return_this_byte = (uint8_t)((temp_read_16bit & 0xFF00u) >> 8u);
		}
	} else if ((mem_map_address >= VADDR_BASEVALUES)
     642:	ec 30       	cpi	r30, 0x0C	; 12
     644:	70 f4       	brcc	.+28     	; 0x662 <Krono_memory_map_read+0x92>
	           && (mem_map_address < (VADDR_BASEVALUES + ((SURFACE_CS_NUM_KEYS_V + SURFACE_CS_NUM_KEYS_H) << 1u)))) {
		temp_addr_calc  = mem_map_address - VADDR_BASEVALUES;
		temp_read_16bit = touchRef[temp_addr_calc >> 1u];
     646:	ae 2f       	mov	r26, r30
     648:	a6 95       	lsr	r26
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	aa 0f       	add	r26, r26
     64e:	bb 1f       	adc	r27, r27
     650:	a4 5e       	subi	r26, 0xE4	; 228
     652:	be 4b       	sbci	r27, 0xBE	; 190
     654:	9c 91       	ld	r25, X
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	8c 91       	ld	r24, X
		if (0u == (temp_addr_calc % 2)) {
     65a:	e0 fd       	sbrc	r30, 0
     65c:	03 c0       	rjmp	.+6      	; 0x664 <Krono_memory_map_read+0x94>
			/* Even number -> LSB */
			return_this_byte = (uint8_t)(temp_read_16bit & 0x00FFu);
     65e:	89 2f       	mov	r24, r25
     660:	08 95       	ret

uint8_t Krono_memory_map_read(uint8_t mem_map_address)
{
	uint16_t temp_read_16bit;
	uint8_t  temp_addr_calc;
	uint8_t  return_this_byte = 0u;
     662:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		/* Address not valid */
	}

	return return_this_byte;
}
     664:	08 95       	ret

00000666 <Krono_memory_map_write>:
uint8_t Krono_memory_map_write(uint8_t mem_map_address, uint8_t write_what)
{
	uint8_t return_this_byte = 0u;

	/* CMD Byte */
	if (mem_map_address == 4u) {
     666:	84 30       	cpi	r24, 0x04	; 4
     668:	19 f4       	brne	.+6      	; 0x670 <Krono_memory_map_write+0xa>
		coreRam[mem_map_address] = write_what;
     66a:	60 93 04 40 	sts	0x4004, r22	; 0x804004 <__DATA_REGION_ORIGIN__+0x4>
     66e:	0c c0       	rjmp	.+24     	; 0x688 <Krono_memory_map_write+0x22>
	}
	/* Touch Config - No access to NUM_KEYS_V or NUM_KEYS_H */
	else if ((mem_map_address >= (VADDR_CFGRAM + 2u)) && (mem_map_address < (VADDR_CFGRAM + CFGRAM_SIZE))) {
     670:	9e ed       	ldi	r25, 0xDE	; 222
     672:	98 0f       	add	r25, r24
     674:	98 30       	cpi	r25, 0x08	; 8
     676:	30 f4       	brcc	.+12     	; 0x684 <Krono_memory_map_write+0x1e>
		cfgRam[mem_map_address - VADDR_CFGRAM] = write_what;
     678:	e8 2f       	mov	r30, r24
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e8 51       	subi	r30, 0x18	; 24
     67e:	f0 4c       	sbci	r31, 0xC0	; 192
     680:	60 83       	st	Z, r22
     682:	02 c0       	rjmp	.+4      	; 0x688 <Krono_memory_map_write+0x22>
		gestureCfgRam[mem_map_address - VADDR_GESTURECFGRAM] = write_what;
	}
#endif
	else {
		/* Address not valid */
		return_this_byte = 1u;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	08 95       	ret
	}

	if (0u == return_this_byte) {
		writeback_req = 1u;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 40 41 	sts	0x4140, r24	; 0x804140 <writeback_req>
     68e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return return_this_byte;
}
     690:	08 95       	ret

00000692 <uart_get_char>:

uint8_t uart_runtime_data[UART_GES_LEN + UART_SIG_LEN + UART_DELTA_LEN + (UART_FIXED)*3];

uint8_t uart_get_char(void)
{
	uint8_t data = read_buffer[read_buf_read_ptr];
     692:	90 91 7a 41 	lds	r25, 0x417A	; 0x80417a <read_buf_read_ptr>
     696:	e9 2f       	mov	r30, r25
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	ea 59       	subi	r30, 0x9A	; 154
     69c:	fe 4b       	sbci	r31, 0xBE	; 190
     69e:	80 81       	ld	r24, Z
	read_buf_read_ptr++;
     6a0:	9f 5f       	subi	r25, 0xFF	; 255
	if (read_buf_read_ptr == UART_RX_BUF_LEN) {
     6a2:	94 31       	cpi	r25, 0x14	; 20
     6a4:	19 f0       	breq	.+6      	; 0x6ac <uart_get_char+0x1a>
uint8_t uart_runtime_data[UART_GES_LEN + UART_SIG_LEN + UART_DELTA_LEN + (UART_FIXED)*3];

uint8_t uart_get_char(void)
{
	uint8_t data = read_buffer[read_buf_read_ptr];
	read_buf_read_ptr++;
     6a6:	90 93 7a 41 	sts	0x417A, r25	; 0x80417a <read_buf_read_ptr>
     6aa:	08 95       	ret
	if (read_buf_read_ptr == UART_RX_BUF_LEN) {
		read_buf_read_ptr = 0;
     6ac:	10 92 7a 41 	sts	0x417A, r1	; 0x80417a <read_buf_read_ptr>
	}
	return data;
}
     6b0:	08 95       	ret

000006b2 <uart_send_data_wait>:

void uart_send_data_wait(uint8_t data)
{
	uart_tx_in_progress  = 1;
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	90 93 df 41 	sts	0x41DF, r25	; 0x8041df <uart_tx_in_progress>
	USART_Module.TXDATAL = data;
     6b8:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
	while (uart_tx_in_progress == 1)
     6bc:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <uart_tx_in_progress>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	e1 f3       	breq	.-8      	; 0x6bc <uart_send_data_wait+0xa>
		;
}
     6c4:	08 95       	ret

000006c6 <uart_send_data>:

void uart_send_data(void)
{
	if (uart_tx_in_progress == 0) {
     6c6:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <uart_tx_in_progress>
     6ca:	81 11       	cpse	r24, r1
     6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <uart_send_data+0x1a>
		uart_tx_in_progress  = 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 df 41 	sts	0x41DF, r24	; 0x8041df <uart_tx_in_progress>
		write_buf_read_ptr   = 0;
		USART_Module.TXDATAL = uart_runtime_data[write_buf_read_ptr++];
     6d4:	80 93 5e 41 	sts	0x415E, r24	; 0x80415e <write_buf_read_ptr>
     6d8:	80 91 e0 41 	lds	r24, 0x41E0	; 0x8041e0 <uart_runtime_data>
     6dc:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     6e0:	08 95       	ret

000006e2 <uart_init_debug_data>:
	}
}

void uart_init_debug_data(void)
{
	uart_runtime_data[0]            = UART_HEADER;
     6e2:	e0 ee       	ldi	r30, 0xE0	; 224
     6e4:	f1 e4       	ldi	r31, 0x41	; 65
     6e6:	2d ea       	ldi	r18, 0xAD	; 173
     6e8:	20 83       	st	Z, r18
	uart_runtime_data[1]            = UART_GES_LEN - 1 + UART_FIXED - 2;
     6ea:	3a e0       	ldi	r19, 0x0A	; 10
     6ec:	31 83       	std	Z+1, r19	; 0x01
	uart_runtime_data[2]            = UART_GES_ID;
     6ee:	12 82       	std	Z+2, r1	; 0x02
	uart_runtime_data[3]            = 0x01;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	83 83       	std	Z+3, r24	; 0x03
	uart_runtime_data[4]            = 0x00;
     6f4:	14 82       	std	Z+4, r1	; 0x04
	uart_runtime_data[5]            = UART_GES_ADDR;
     6f6:	40 e1       	ldi	r20, 0x10	; 16
     6f8:	45 83       	std	Z+5, r20	; 0x05
	uart_runtime_data[UART_GES_END] = UART_FOOTER;
     6fa:	9a ed       	ldi	r25, 0xDA	; 218
     6fc:	94 87       	std	Z+12, r25	; 0x0c

	uart_runtime_data[UART_SIG_POS + 0] = UART_HEADER;
     6fe:	25 87       	std	Z+13, r18	; 0x0d
	uart_runtime_data[UART_SIG_POS + 1] = UART_SIG_LEN - 1 + UART_FIXED - 2;
     700:	46 87       	std	Z+14, r20	; 0x0e
	uart_runtime_data[UART_SIG_POS + 2] = UART_SIG_ID;
     702:	87 87       	std	Z+15, r24	; 0x0f
	uart_runtime_data[UART_SIG_POS + 3] = 0x01;
     704:	80 8b       	std	Z+16, r24	; 0x10
	uart_runtime_data[UART_SIG_POS + 4] = 0x00;
     706:	11 8a       	std	Z+17, r1	; 0x11
	uart_runtime_data[UART_SIG_POS + 5] = UART_SIG_ADDR;
     708:	43 ea       	ldi	r20, 0xA3	; 163
     70a:	42 8b       	std	Z+18, r20	; 0x12
	uart_runtime_data[UART_SIG_END]     = UART_FOOTER;
     70c:	97 8f       	std	Z+31, r25	; 0x1f

	uart_runtime_data[UART_DELTA_POS + 0] = UART_HEADER;
     70e:	20 a3       	std	Z+32, r18	; 0x20
	uart_runtime_data[UART_DELTA_POS + 1] = UART_DELTA_LEN - 1 + UART_FIXED - 2;
     710:	31 a3       	std	Z+33, r19	; 0x21
	uart_runtime_data[UART_DELTA_POS + 2] = UART_DELTA_ID;
     712:	25 e0       	ldi	r18, 0x05	; 5
     714:	22 a3       	std	Z+34, r18	; 0x22
	uart_runtime_data[UART_DELTA_POS + 3] = 0x01;
     716:	83 a3       	std	Z+35, r24	; 0x23
	uart_runtime_data[UART_DELTA_POS + 4] = 0x00;
     718:	14 a2       	std	Z+36, r1	; 0x24
	uart_runtime_data[UART_DELTA_POS + 5] = UART_DELTA_ADDR;
     71a:	8c e8       	ldi	r24, 0x8C	; 140
     71c:	85 a3       	std	Z+37, r24	; 0x25
	uart_runtime_data[UART_DELTA_END]     = UART_FOOTER;
     71e:	94 a7       	std	Z+44, r25	; 0x2c
     720:	08 95       	ret

00000722 <uart_send_touch_gesture_data>:
}

void uart_send_touch_gesture_data(void)
{
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
	uint8_t *dest_ptr;

	if (uart_runtime_data[0] == 0) {
     72c:	80 91 e0 41 	lds	r24, 0x41E0	; 0x8041e0 <uart_runtime_data>
     730:	81 11       	cpse	r24, r1
     732:	02 c0       	rjmp	.+4      	; 0x738 <uart_send_touch_gesture_data+0x16>
		uart_init_debug_data();
     734:	0e 94 71 03 	call	0x6e2	; 0x6e2 <uart_init_debug_data>
	}

	if (uart_send_ges_data_flag == 1 && uart_tx_in_progress == 0) {
     738:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <uart_send_ges_data_flag>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	b1 f5       	brne	.+108    	; 0x7ac <uart_send_touch_gesture_data+0x8a>
     740:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <uart_tx_in_progress>
     744:	81 11       	cpse	r24, r1
     746:	32 c0       	rjmp	.+100    	; 0x7ac <uart_send_touch_gesture_data+0x8a>
     748:	06 ee       	ldi	r16, 0xE6	; 230
     74a:	11 e4       	ldi	r17, 0x41	; 65
     74c:	c0 e1       	ldi	r28, 0x10	; 16
		dest_ptr = &uart_runtime_data[UART_GES_DATA_POS];
		for (uint8_t cnt = 0; cnt < UART_GES_LEN; cnt++) {
			*dest_ptr++ = Krono_memory_map_read(VADDR_TOUCHRAM + cnt);
     74e:	8c 2f       	mov	r24, r28
     750:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Krono_memory_map_read>
     754:	f8 01       	movw	r30, r16
     756:	81 93       	st	Z+, r24
     758:	8f 01       	movw	r16, r30
     75a:	cf 5f       	subi	r28, 0xFF	; 255
		uart_init_debug_data();
	}

	if (uart_send_ges_data_flag == 1 && uart_tx_in_progress == 0) {
		dest_ptr = &uart_runtime_data[UART_GES_DATA_POS];
		for (uint8_t cnt = 0; cnt < UART_GES_LEN; cnt++) {
     75c:	c6 31       	cpi	r28, 0x16	; 22
     75e:	b9 f7       	brne	.-18     	; 0x74e <uart_send_touch_gesture_data+0x2c>
     760:	03 ef       	ldi	r16, 0xF3	; 243
     762:	11 e4       	ldi	r17, 0x41	; 65
     764:	0f 2e       	mov	r0, r31
     766:	ff ef       	ldi	r31, 0xFF	; 255
     768:	ef 2e       	mov	r14, r31
     76a:	f1 e4       	ldi	r31, 0x41	; 65
     76c:	ff 2e       	mov	r15, r31
     76e:	f0 2d       	mov	r31, r0
     770:	c3 ea       	ldi	r28, 0xA3	; 163
			*dest_ptr++ = Krono_memory_map_read(VADDR_TOUCHRAM + cnt);
		}

		dest_ptr = &uart_runtime_data[UART_SIG_DATA_POS];
		for (uint8_t cnt = 0; cnt < UART_SIG_LEN; cnt++) {
			*dest_ptr++ = Krono_memory_map_read(VADDR_RAWVALUES + cnt);
     772:	8c 2f       	mov	r24, r28
     774:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Krono_memory_map_read>
     778:	f8 01       	movw	r30, r16
     77a:	81 93       	st	Z+, r24
     77c:	8f 01       	movw	r16, r30
     77e:	cf 5f       	subi	r28, 0xFF	; 255
		for (uint8_t cnt = 0; cnt < UART_GES_LEN; cnt++) {
			*dest_ptr++ = Krono_memory_map_read(VADDR_TOUCHRAM + cnt);
		}

		dest_ptr = &uart_runtime_data[UART_SIG_DATA_POS];
		for (uint8_t cnt = 0; cnt < UART_SIG_LEN; cnt++) {
     780:	ee 16       	cp	r14, r30
     782:	ff 06       	cpc	r15, r31
     784:	b1 f7       	brne	.-20     	; 0x772 <uart_send_touch_gesture_data+0x50>
     786:	06 e0       	ldi	r16, 0x06	; 6
     788:	12 e4       	ldi	r17, 0x42	; 66
     78a:	cc e8       	ldi	r28, 0x8C	; 140
			*dest_ptr++ = Krono_memory_map_read(VADDR_RAWVALUES + cnt);
		}

		dest_ptr = &uart_runtime_data[UART_DELTA_DATA_POS];
		for (uint8_t cnt = 0; cnt < UART_DELTA_LEN; cnt++) {
			*dest_ptr++ = Krono_memory_map_read(VADDR_SVRAM + cnt);
     78c:	8c 2f       	mov	r24, r28
     78e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Krono_memory_map_read>
     792:	f8 01       	movw	r30, r16
     794:	81 93       	st	Z+, r24
     796:	8f 01       	movw	r16, r30
     798:	cf 5f       	subi	r28, 0xFF	; 255
		for (uint8_t cnt = 0; cnt < UART_SIG_LEN; cnt++) {
			*dest_ptr++ = Krono_memory_map_read(VADDR_RAWVALUES + cnt);
		}

		dest_ptr = &uart_runtime_data[UART_DELTA_DATA_POS];
		for (uint8_t cnt = 0; cnt < UART_DELTA_LEN; cnt++) {
     79a:	c2 39       	cpi	r28, 0x92	; 146
     79c:	b9 f7       	brne	.-18     	; 0x78c <uart_send_touch_gesture_data+0x6a>
			*dest_ptr++ = Krono_memory_map_read(VADDR_SVRAM + cnt);
		}

		if (uart_command_info.header_status != HEADER_RECEIVED) {
     79e:	80 91 5f 41 	lds	r24, 0x415F	; 0x80415f <uart_command_info>
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	19 f0       	breq	.+6      	; 0x7ac <uart_send_touch_gesture_data+0x8a>
			uart_new_data_available = 1;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 42 41 	sts	0x4142, r24	; 0x804142 <uart_new_data_available>

#if (KRONO_GESTURE_ENABLE == 1u)
		qtm_gestures_2d_clearGesture();
#endif
	}
}
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	08 95       	ret

000007b8 <uart_min_num_bytes_received>:

uint8_t uart_min_num_bytes_received(void)
{
	if (read_buf_write_ptr >= read_buf_read_ptr) {
     7b8:	80 91 5d 41 	lds	r24, 0x415D	; 0x80415d <read_buf_write_ptr>
     7bc:	90 91 7a 41 	lds	r25, 0x417A	; 0x80417a <read_buf_read_ptr>
     7c0:	89 17       	cp	r24, r25
     7c2:	10 f0       	brcs	.+4      	; 0x7c8 <uart_min_num_bytes_received+0x10>
		return (read_buf_write_ptr - read_buf_read_ptr);
     7c4:	89 1b       	sub	r24, r25
     7c6:	08 95       	ret
	} else {
		return ((read_buf_write_ptr + UART_RX_BUF_LEN) - read_buf_read_ptr);
     7c8:	8c 5e       	subi	r24, 0xEC	; 236
     7ca:	89 1b       	sub	r24, r25
	}
}
     7cc:	08 95       	ret

000007ce <uart_send_header>:

uint8_t uart_tx_len = 0;

void uart_send_header(uint8_t len, uint8_t id, uint8_t address)
{
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	c8 2f       	mov	r28, r24
     7d6:	16 2f       	mov	r17, r22
     7d8:	d4 2f       	mov	r29, r20
	write_buf_write_ptr = 0;
     7da:	10 92 65 41 	sts	0x4165, r1	; 0x804165 <write_buf_write_ptr>
	uart_tx_len         = len + 5;
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	8c 0f       	add	r24, r28
     7e2:	80 93 41 41 	sts	0x4141, r24	; 0x804141 <uart_tx_len>

	uart_send_data_wait(UART_HEADER);
     7e6:	8d ea       	ldi	r24, 0xAD	; 173
     7e8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
	uart_send_data_wait(len + 4);
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	8c 0f       	add	r24, r28
     7f0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
	uart_send_data_wait(id);
     7f4:	81 2f       	mov	r24, r17
     7f6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
	uart_send_data_wait(0x01); // fixed
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
	uart_send_data_wait(0x00); // fixed
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
	uart_send_data_wait(address);
     806:	8d 2f       	mov	r24, r29
     808:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	08 95       	ret

00000814 <uart_process>:

void uart_process(void)
{
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
	uint8_t l_trans_id = 0, l_addr = 0, l_len = 0;

	if (uart_new_data_available == 1) {
     81e:	80 91 42 41 	lds	r24, 0x4142	; 0x804142 <uart_new_data_available>
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	21 f4       	brne	.+8      	; 0x82e <uart_process+0x1a>
		uart_new_data_available = 0;
     826:	10 92 42 41 	sts	0x4142, r1	; 0x804142 <uart_new_data_available>
		uart_send_data();
     82a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <uart_send_data>
	}

	if (uart_min_num_bytes_received() > 4) {
     82e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <uart_min_num_bytes_received>
     832:	85 30       	cpi	r24, 0x05	; 5
     834:	08 f4       	brcc	.+2      	; 0x838 <uart_process+0x24>
     836:	a0 c0       	rjmp	.+320    	; 0x978 <uart_process+0x164>
		if (uart_get_char() == UART_HEADER) {
     838:	0e 94 49 03 	call	0x692	; 0x692 <uart_get_char>
     83c:	8d 3a       	cpi	r24, 0xAD	; 173
     83e:	09 f0       	breq	.+2      	; 0x842 <uart_process+0x2e>
     840:	9b c0       	rjmp	.+310    	; 0x978 <uart_process+0x164>
			// received some data process it
			if (uart_command_info.header_status == HEADER_AWAITING) {
     842:	80 91 5f 41 	lds	r24, 0x415F	; 0x80415f <uart_command_info>
     846:	81 11       	cpse	r24, r1
     848:	1c c0       	rjmp	.+56     	; 0x882 <uart_process+0x6e>
				if (uart_min_num_bytes_received() > 3) {
     84a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <uart_min_num_bytes_received>
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	08 f4       	brcc	.+2      	; 0x854 <uart_process+0x40>
     852:	92 c0       	rjmp	.+292    	; 0x978 <uart_process+0x164>
					l_trans_id                      = uart_get_char();
     854:	0e 94 49 03 	call	0x692	; 0x692 <uart_get_char>
     858:	18 2f       	mov	r17, r24
					uart_command_info.command_id    = uart_get_char();
     85a:	0e 94 49 03 	call	0x692	; 0x692 <uart_get_char>
     85e:	0f 2e       	mov	r0, r31
     860:	ff e5       	ldi	r31, 0x5F	; 95
     862:	ef 2e       	mov	r14, r31
     864:	f1 e4       	ldi	r31, 0x41	; 65
     866:	ff 2e       	mov	r15, r31
     868:	f0 2d       	mov	r31, r0
     86a:	f7 01       	movw	r30, r14
     86c:	82 83       	std	Z+2, r24	; 0x02
					l_addr                          = uart_get_char();
     86e:	0e 94 49 03 	call	0x692	; 0x692 <uart_get_char>
     872:	c8 2f       	mov	r28, r24
					l_len                           = uart_get_char();
     874:	0e 94 49 03 	call	0x692	; 0x692 <uart_get_char>
     878:	d8 2f       	mov	r29, r24
					uart_command_info.header_status = HEADER_RECEIVED;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	f7 01       	movw	r30, r14
     87e:	80 83       	st	Z, r24
     880:	06 c0       	rjmp	.+12     	; 0x88e <uart_process+0x7a>
				}
			}

			if (uart_command_info.header_status == HEADER_RECEIVED) {
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	09 f0       	breq	.+2      	; 0x888 <uart_process+0x74>
     886:	78 c0       	rjmp	.+240    	; 0x978 <uart_process+0x164>
	uart_send_data_wait(address);
}

void uart_process(void)
{
	uint8_t l_trans_id = 0, l_addr = 0, l_len = 0;
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	c0 e0       	ldi	r28, 0x00	; 0
     88c:	10 e0       	ldi	r17, 0x00	; 0
					uart_command_info.header_status = HEADER_RECEIVED;
				}
			}

			if (uart_command_info.header_status == HEADER_RECEIVED) {
				read_buf_write_ptr = 0;
     88e:	10 92 5d 41 	sts	0x415D, r1	; 0x80415d <read_buf_write_ptr>
				read_buf_read_ptr  = 0;
     892:	10 92 7a 41 	sts	0x417A, r1	; 0x80417a <read_buf_read_ptr>
				if (uart_command_info.command_id != COMMAND_INFO_PC_TO_MCU) {
     896:	80 91 61 41 	lds	r24, 0x4161	; 0x804161 <uart_command_info+0x2>
     89a:	80 38       	cpi	r24, 0x80	; 128
     89c:	09 f4       	brne	.+2      	; 0x8a0 <uart_process+0x8c>
     89e:	6a c0       	rjmp	.+212    	; 0x974 <uart_process+0x160>
					if (uart_command_info.command_id == COMMAND_INFO_MCU_TO_PC) // 0x81
     8a0:	81 38       	cpi	r24, 0x81	; 129
     8a2:	e9 f4       	brne	.+58     	; 0x8de <uart_process+0xca>
					{
						while (uart_tx_in_progress == 1)
     8a4:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <uart_tx_in_progress>
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	e1 f3       	breq	.-8      	; 0x8a4 <uart_process+0x90>
							;
						uart_send_ges_data_flag = 0;
     8ac:	10 92 12 40 	sts	0x4012, r1	; 0x804012 <uart_send_ges_data_flag>
						uart_send_header(l_len, l_trans_id, l_addr);
     8b0:	4c 2f       	mov	r20, r28
     8b2:	61 2f       	mov	r22, r17
     8b4:	8d 2f       	mov	r24, r29
     8b6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <uart_send_header>
						for (uint8_t cnt = 0; cnt < l_len; cnt++) {
     8ba:	dd 23       	and	r29, r29
     8bc:	49 f0       	breq	.+18     	; 0x8d0 <uart_process+0xbc>
     8be:	dc 0f       	add	r29, r28
							uart_send_data_wait(Krono_memory_map_read(l_addr + cnt));
     8c0:	8c 2f       	mov	r24, r28
     8c2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Krono_memory_map_read>
     8c6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
     8ca:	cf 5f       	subi	r28, 0xFF	; 255
					{
						while (uart_tx_in_progress == 1)
							;
						uart_send_ges_data_flag = 0;
						uart_send_header(l_len, l_trans_id, l_addr);
						for (uint8_t cnt = 0; cnt < l_len; cnt++) {
     8cc:	dc 13       	cpse	r29, r28
     8ce:	f8 cf       	rjmp	.-16     	; 0x8c0 <uart_process+0xac>
							uart_send_data_wait(Krono_memory_map_read(l_addr + cnt));
						}
						uart_send_data_wait(UART_FOOTER);
     8d0:	8a ed       	ldi	r24, 0xDA	; 218
     8d2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
						uart_send_ges_data_flag = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <uart_send_ges_data_flag>
     8dc:	48 c0       	rjmp	.+144    	; 0x96e <uart_process+0x15a>
					} else if (uart_command_info.command_id == COMMAND_DATA_MCU_TO_PC) // 0x01
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	61 f5       	brne	.+88     	; 0x93a <uart_process+0x126>
					{
						while (uart_tx_in_progress == 1)
     8e2:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <uart_tx_in_progress>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	e1 f3       	breq	.-8      	; 0x8e2 <uart_process+0xce>
							;
						uart_send_ges_data_flag = 0;
     8ea:	10 92 12 40 	sts	0x4012, r1	; 0x804012 <uart_send_ges_data_flag>
						uart_send_header(l_len, l_trans_id, l_addr);
     8ee:	4c 2f       	mov	r20, r28
     8f0:	61 2f       	mov	r22, r17
     8f2:	8d 2f       	mov	r24, r29
     8f4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <uart_send_header>
						if (l_addr != 0) {
     8f8:	cc 23       	and	r28, r28
     8fa:	61 f0       	breq	.+24     	; 0x914 <uart_process+0x100>
							for (uint8_t cnt = 0; cnt < l_len; cnt++) {
     8fc:	dd 23       	and	r29, r29
     8fe:	b1 f0       	breq	.+44     	; 0x92c <uart_process+0x118>
     900:	dc 0f       	add	r29, r28
								uart_send_data_wait(Krono_memory_map_read(l_addr + cnt));
     902:	8c 2f       	mov	r24, r28
     904:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Krono_memory_map_read>
     908:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
     90c:	cf 5f       	subi	r28, 0xFF	; 255
						while (uart_tx_in_progress == 1)
							;
						uart_send_ges_data_flag = 0;
						uart_send_header(l_len, l_trans_id, l_addr);
						if (l_addr != 0) {
							for (uint8_t cnt = 0; cnt < l_len; cnt++) {
     90e:	cd 13       	cpse	r28, r29
     910:	f8 cf       	rjmp	.-16     	; 0x902 <uart_process+0xee>
     912:	0c c0       	rjmp	.+24     	; 0x92c <uart_process+0x118>
								uart_send_data_wait(Krono_memory_map_read(l_addr + cnt));
							}
						} else {
							uart_send_data_wait(0x00);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
							uart_send_data_wait(0x00);
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
							uart_send_data_wait(0x00);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
							uart_send_data_wait(0x50); // FIRMWARE INFORMATION
     926:	80 e5       	ldi	r24, 0x50	; 80
     928:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
						}
						uart_send_data_wait(UART_FOOTER);
     92c:	8a ed       	ldi	r24, 0xDA	; 218
     92e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
						uart_send_ges_data_flag = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <uart_send_ges_data_flag>
     938:	1a c0       	rjmp	.+52     	; 0x96e <uart_process+0x15a>
					} else if (uart_command_info.command_id == COMMAND_DATA_PC_TO_MCU) // 0x00
     93a:	81 11       	cpse	r24, r1
     93c:	18 c0       	rjmp	.+48     	; 0x96e <uart_process+0x15a>
					{
						while (uart_tx_in_progress == 1)
     93e:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <uart_tx_in_progress>
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	e1 f3       	breq	.-8      	; 0x93e <uart_process+0x12a>
							;
						uart_send_ges_data_flag = 0;
     946:	10 92 12 40 	sts	0x4012, r1	; 0x804012 <uart_send_ges_data_flag>
						uint8_t value           = l_len;
						Krono_memory_map_write(l_addr, value);
     94a:	6d 2f       	mov	r22, r29
     94c:	8c 2f       	mov	r24, r28
     94e:	0e 94 33 03 	call	0x666	; 0x666 <Krono_memory_map_write>
						l_len = 1;
						uart_send_header(l_len, l_trans_id, l_addr);
     952:	4c 2f       	mov	r20, r28
     954:	61 2f       	mov	r22, r17
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 e7 03 	call	0x7ce	; 0x7ce <uart_send_header>
						uart_send_data_wait(value);
     95c:	8d 2f       	mov	r24, r29
     95e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
						uart_send_data_wait(UART_FOOTER);
     962:	8a ed       	ldi	r24, 0xDA	; 218
     964:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_send_data_wait>
						uart_send_ges_data_flag = 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <uart_send_ges_data_flag>
					}

					uart_command_info.header_status = HEADER_AWAITING;
     96e:	10 92 5f 41 	sts	0x415F, r1	; 0x80415f <uart_command_info>
     972:	02 c0       	rjmp	.+4      	; 0x978 <uart_process+0x164>
				} else {
					uart_command_info.header_status = HEADER_AWAITING;
     974:	10 92 5f 41 	sts	0x415F, r1	; 0x80415f <uart_command_info>
				}
			}
		}
	}
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	08 95       	ret

00000984 <krono_tx_complete_callback>:

void krono_tx_complete_callback(void)
{
#if (KRONOCOMM_UART == 1u)
	// USART TX complete interrupt
	USART_Module.STATUS |= (1 << 6);
     984:	e0 e2       	ldi	r30, 0x20	; 32
     986:	f8 e0       	ldi	r31, 0x08	; 8
     988:	84 81       	ldd	r24, Z+4	; 0x04
     98a:	80 64       	ori	r24, 0x40	; 64
     98c:	84 83       	std	Z+4, r24	; 0x04

	if (uart_send_ges_data_flag != 1) {
     98e:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <uart_send_ges_data_flag>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	19 f0       	breq	.+6      	; 0x99c <krono_tx_complete_callback+0x18>
		uart_tx_in_progress = 0;
     996:	10 92 df 41 	sts	0x41DF, r1	; 0x8041df <uart_tx_in_progress>
     99a:	08 95       	ret
	} else {
		if (write_buf_read_ptr < (UART_GES_LEN + UART_SIG_LEN + UART_DELTA_LEN + UART_FIXED * 3)) {
     99c:	80 91 5e 41 	lds	r24, 0x415E	; 0x80415e <write_buf_read_ptr>
     9a0:	8d 32       	cpi	r24, 0x2D	; 45
     9a2:	58 f4       	brcc	.+22     	; 0x9ba <krono_tx_complete_callback+0x36>
			USART_Module.TXDATAL = uart_runtime_data[write_buf_read_ptr];
     9a4:	e8 2f       	mov	r30, r24
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	e0 52       	subi	r30, 0x20	; 32
     9aa:	fe 4b       	sbci	r31, 0xBE	; 190
     9ac:	90 81       	ld	r25, Z
     9ae:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
			write_buf_read_ptr++;
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	80 93 5e 41 	sts	0x415E, r24	; 0x80415e <write_buf_read_ptr>
     9b8:	08 95       	ret
		} else {
			uart_tx_in_progress = 0;
     9ba:	10 92 df 41 	sts	0x41DF, r1	; 0x8041df <uart_tx_in_progress>
     9be:	08 95       	ret

000009c0 <krono_rx_complete_callback>:
}

void krono_rx_complete_callback(void)
{
#if (KRONOCOMM_UART == 1u)
	read_buffer[read_buf_write_ptr] = USART_Module.RXDATAL;
     9c0:	80 91 5d 41 	lds	r24, 0x415D	; 0x80415d <read_buf_write_ptr>
     9c4:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
     9c8:	e8 2f       	mov	r30, r24
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	ea 59       	subi	r30, 0x9A	; 154
     9ce:	fe 4b       	sbci	r31, 0xBE	; 190
     9d0:	90 83       	st	Z, r25
	read_buf_write_ptr++;
     9d2:	8f 5f       	subi	r24, 0xFF	; 255
	if (read_buf_write_ptr == UART_RX_BUF_LEN) {
     9d4:	84 31       	cpi	r24, 0x14	; 20
     9d6:	19 f0       	breq	.+6      	; 0x9de <krono_rx_complete_callback+0x1e>

void krono_rx_complete_callback(void)
{
#if (KRONOCOMM_UART == 1u)
	read_buffer[read_buf_write_ptr] = USART_Module.RXDATAL;
	read_buf_write_ptr++;
     9d8:	80 93 5d 41 	sts	0x415D, r24	; 0x80415d <read_buf_write_ptr>
     9dc:	08 95       	ret
	if (read_buf_write_ptr == UART_RX_BUF_LEN) {
		read_buf_write_ptr = 0;
     9de:	10 92 5d 41 	sts	0x415D, r1	; 0x80415d <read_buf_write_ptr>
     9e2:	08 95       	ret

000009e4 <qtm_measure_complete_callback>:
		temp_pos = qtm_surface_cs_control1.qtm_surface_contact_data->v_position;
	} else {
		temp_pos = qtm_surface_cs_control1.qtm_surface_contact_data->h_position;
	}
	return temp_pos;
}
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 45 41 	sts	0x4145, r24	; 0x804145 <touch_postprocess_request>
     9ea:	08 95       	ret

000009ec <Timer_set_period>:
     9ec:	e0 e4       	ldi	r30, 0x40	; 64
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	92 fd       	sbrc	r25, 2
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <Timer_set_period+0x4>
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x7e014a>
     9fc:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x7e014b>
     a00:	08 95       	ret

00000a02 <touch_init>:
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	80 e2       	ldi	r24, 0x20	; 32
     a0c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <Timer_set_period>
     a10:	e6 e1       	ldi	r30, 0x16	; 22
     a12:	f4 e0       	ldi	r31, 0x04	; 4
     a14:	80 81       	ld	r24, Z
     a16:	87 7f       	andi	r24, 0xF7	; 247
     a18:	80 83       	st	Z, r24
     a1a:	80 81       	ld	r24, Z
     a1c:	88 7f       	andi	r24, 0xF8	; 248
     a1e:	84 60       	ori	r24, 0x04	; 4
     a20:	80 83       	st	Z, r24
     a22:	e5 e1       	ldi	r30, 0x15	; 21
     a24:	f4 e0       	ldi	r31, 0x04	; 4
     a26:	80 81       	ld	r24, Z
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	80 83       	st	Z, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	88 7f       	andi	r24, 0xF8	; 248
     a30:	84 60       	ori	r24, 0x04	; 4
     a32:	80 83       	st	Z, r24
     a34:	e4 e1       	ldi	r30, 0x14	; 20
     a36:	f4 e0       	ldi	r31, 0x04	; 4
     a38:	80 81       	ld	r24, Z
     a3a:	87 7f       	andi	r24, 0xF7	; 247
     a3c:	80 83       	st	Z, r24
     a3e:	80 81       	ld	r24, Z
     a40:	88 7f       	andi	r24, 0xF8	; 248
     a42:	84 60       	ori	r24, 0x04	; 4
     a44:	80 83       	st	Z, r24
     a46:	e1 e3       	ldi	r30, 0x31	; 49
     a48:	f4 e0       	ldi	r31, 0x04	; 4
     a4a:	80 81       	ld	r24, Z
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	80 83       	st	Z, r24
     a50:	80 81       	ld	r24, Z
     a52:	88 7f       	andi	r24, 0xF8	; 248
     a54:	84 60       	ori	r24, 0x04	; 4
     a56:	80 83       	st	Z, r24
     a58:	e0 e3       	ldi	r30, 0x30	; 48
     a5a:	f4 e0       	ldi	r31, 0x04	; 4
     a5c:	80 81       	ld	r24, Z
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	80 83       	st	Z, r24
     a62:	80 81       	ld	r24, Z
     a64:	88 7f       	andi	r24, 0xF8	; 248
     a66:	84 60       	ori	r24, 0x04	; 4
     a68:	80 83       	st	Z, r24
     a6a:	e7 e1       	ldi	r30, 0x17	; 23
     a6c:	f4 e0       	ldi	r31, 0x04	; 4
     a6e:	80 81       	ld	r24, Z
     a70:	87 7f       	andi	r24, 0xF7	; 247
     a72:	80 83       	st	Z, r24
     a74:	80 81       	ld	r24, Z
     a76:	88 7f       	andi	r24, 0xF8	; 248
     a78:	84 60       	ori	r24, 0x04	; 4
     a7a:	80 83       	st	Z, r24
     a7c:	88 e4       	ldi	r24, 0x48	; 72
     a7e:	90 e4       	ldi	r25, 0x40	; 64
     a80:	0e 94 e5 12 	call	0x25ca	; 0x25ca <qtm_ptc_init_acquisition_module>
     a84:	8d e3       	ldi	r24, 0x3D	; 61
     a86:	92 e4       	ldi	r25, 0x42	; 66
     a88:	0e 94 9c 13 	call	0x2738	; 0x2738 <qtm_ptc_qtlib_assign_signal_memory>
     a8c:	c0 e0       	ldi	r28, 0x00	; 0
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
     a90:	be 01       	movw	r22, r28
     a92:	88 e4       	ldi	r24, 0x48	; 72
     a94:	90 e4       	ldi	r25, 0x40	; 64
     a96:	0e 94 16 14 	call	0x282c	; 0x282c <qtm_enable_sensor_node>
     a9a:	be 01       	movw	r22, r28
     a9c:	88 e4       	ldi	r24, 0x48	; 72
     a9e:	90 e4       	ldi	r25, 0x40	; 64
     aa0:	0e 94 35 14 	call	0x286a	; 0x286a <qtm_calibrate_sensor_node>
     aa4:	21 96       	adiw	r28, 0x01	; 1
     aa6:	c6 30       	cpi	r28, 0x06	; 6
     aa8:	d1 05       	cpc	r29, r1
     aaa:	91 f7       	brne	.-28     	; 0xa90 <touch_init+0x8e>
     aac:	0f e1       	ldi	r16, 0x1F	; 31
     aae:	12 e4       	ldi	r17, 0x42	; 66
     ab0:	c0 e0       	ldi	r28, 0x00	; 0
     ab2:	a8 01       	movw	r20, r16
     ab4:	6c 2f       	mov	r22, r28
     ab6:	84 e2       	ldi	r24, 0x24	; 36
     ab8:	90 e4       	ldi	r25, 0x40	; 64
     aba:	0e 94 ed 06 	call	0xdda	; 0xdda <qtm_init_sensor_key>
     abe:	cf 5f       	subi	r28, 0xFF	; 255
     ac0:	0b 5f       	subi	r16, 0xFB	; 251
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
     ac4:	c6 30       	cpi	r28, 0x06	; 6
     ac6:	a9 f7       	brne	.-22     	; 0xab2 <touch_init+0xb0>
     ac8:	83 e1       	ldi	r24, 0x13	; 19
     aca:	90 e4       	ldi	r25, 0x40	; 64
     acc:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <qtm_init_surface_cs>
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <touch_process>:
     ada:	80 91 46 41 	lds	r24, 0x4146	; 0x804146 <time_to_measure_touch_flag>
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <touch_process+0x1c>
     ae2:	62 ef       	ldi	r22, 0xF2	; 242
     ae4:	74 e0       	ldi	r23, 0x04	; 4
     ae6:	88 e4       	ldi	r24, 0x48	; 72
     ae8:	90 e4       	ldi	r25, 0x40	; 64
     aea:	0e 94 a6 13 	call	0x274c	; 0x274c <qtm_ptc_start_measurement_seq>
     aee:	81 11       	cpse	r24, r1
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <touch_process+0x1c>
     af2:	10 92 46 41 	sts	0x4146, r1	; 0x804146 <time_to_measure_touch_flag>
     af6:	80 91 45 41 	lds	r24, 0x4145	; 0x804145 <touch_postprocess_request>
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	71 f5       	brne	.+92     	; 0xb5a <touch_process+0x80>
     afe:	10 92 45 41 	sts	0x4145, r1	; 0x804145 <touch_postprocess_request>
     b02:	0e 94 63 10 	call	0x20c6	; 0x20c6 <qtm_acquisition_process>
     b06:	81 11       	cpse	r24, r1
     b08:	13 c0       	rjmp	.+38     	; 0xb30 <touch_process+0x56>
     b0a:	84 e2       	ldi	r24, 0x24	; 36
     b0c:	90 e4       	ldi	r25, 0x40	; 64
     b0e:	0e 94 0c 07 	call	0xe18	; 0xe18 <qtm_key_sensors_process>
     b12:	88 23       	and	r24, r24
     b14:	19 f0       	breq	.+6      	; 0xb1c <touch_process+0x42>
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	80 93 43 41 	sts	0x4143, r24	; 0x804143 <module_error_code>
     b1c:	83 e1       	ldi	r24, 0x13	; 19
     b1e:	90 e4       	ldi	r25, 0x40	; 64
     b20:	0e 94 34 0c 	call	0x1868	; 0x1868 <qtm_surface_cs_process>
     b24:	88 23       	and	r24, r24
     b26:	39 f0       	breq	.+14     	; 0xb36 <touch_process+0x5c>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	80 93 43 41 	sts	0x4143, r24	; 0x804143 <module_error_code>
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <touch_process+0x5c>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 43 41 	sts	0x4143, r24	; 0x804143 <module_error_code>
     b36:	e0 91 24 40 	lds	r30, 0x4024	; 0x804024 <qtlib_key_set1>
     b3a:	f0 91 25 40 	lds	r31, 0x4025	; 0x804025 <qtlib_key_set1+0x1>
     b3e:	80 81       	ld	r24, Z
     b40:	88 23       	and	r24, r24
     b42:	24 f4       	brge	.+8      	; 0xb4c <touch_process+0x72>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 46 41 	sts	0x4146, r24	; 0x804146 <time_to_measure_touch_flag>
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <touch_process+0x78>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 93 44 41 	sts	0x4144, r24	; 0x804144 <measurement_done_touch>
     b52:	f8 94       	cli
     b54:	0e 94 c0 01 	call	0x380	; 0x380 <Krono_UpdateBuffer>
     b58:	78 94       	sei
     b5a:	0e 94 0a 04 	call	0x814	; 0x814 <uart_process>
     b5e:	08 95       	ret

00000b60 <touch_timer_handler>:
     b60:	80 91 1e 42 	lds	r24, 0x421E	; 0x80421e <interrupt_cnt>
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	84 31       	cpi	r24, 0x14	; 20
     b68:	18 f4       	brcc	.+6      	; 0xb70 <touch_timer_handler+0x10>
     b6a:	80 93 1e 42 	sts	0x421E, r24	; 0x80421e <interrupt_cnt>
     b6e:	08 95       	ret
     b70:	10 92 1e 42 	sts	0x421E, r1	; 0x80421e <interrupt_cnt>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 46 41 	sts	0x4146, r24	; 0x804146 <time_to_measure_touch_flag>
     b7a:	84 e1       	ldi	r24, 0x14	; 20
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <qtm_update_qtlib_timer>
     b82:	08 95       	ret

00000b84 <get_sensor_state>:
     b84:	9c 01       	movw	r18, r24
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	82 0f       	add	r24, r18
     b8c:	93 1f       	adc	r25, r19
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	e0 91 28 40 	lds	r30, 0x4028	; 0x804028 <qtlib_key_set1+0x4>
     b96:	f0 91 29 40 	lds	r31, 0x4029	; 0x804029 <qtlib_key_set1+0x5>
     b9a:	e8 0f       	add	r30, r24
     b9c:	f9 1f       	adc	r31, r25
     b9e:	80 81       	ld	r24, Z
     ba0:	08 95       	ret

00000ba2 <__vector_27>:
#if defined(__ICCAVR__)
ISR(QTML_PTC_vect_iar)
#else
ISR(QTML_PTC_vect)
#endif
{
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	0b b6       	in	r0, 0x3b	; 59
     bae:	0f 92       	push	r0
     bb0:	2f 93       	push	r18
     bb2:	3f 93       	push	r19
     bb4:	4f 93       	push	r20
     bb6:	5f 93       	push	r21
     bb8:	6f 93       	push	r22
     bba:	7f 93       	push	r23
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	af 93       	push	r26
     bc2:	bf 93       	push	r27
     bc4:	ef 93       	push	r30
     bc6:	ff 93       	push	r31
	qtm_avr_da_ptc_handler_eoc();
     bc8:	0e 94 bc 14 	call	0x2978	; 0x2978 <qtm_avr_da_ptc_handler_eoc>
}
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0b be       	out	0x3b, r0	; 59
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     bf2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	08 95       	ret

00000bfa <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     bfa:	44 e2       	ldi	r20, 0x24	; 36
     bfc:	68 ed       	ldi	r22, 0xD8	; 216
     bfe:	88 e6       	ldi	r24, 0x68	; 104
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 59 06 	call	0xcb2	; 0xcb2 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	08 95       	ret

00000c0a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     c0a:	78 94       	sei

	return 0;
}
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret

00000c10 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     c10:	e0 e1       	ldi	r30, 0x10	; 16
     c12:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c14:	80 81       	ld	r24, Z
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     c1a:	e8 31       	cpi	r30, 0x18	; 24
     c1c:	84 e0       	ldi	r24, 0x04	; 4
     c1e:	f8 07       	cpc	r31, r24
     c20:	c9 f7       	brne	.-14     	; 0xc14 <mcu_init+0x4>
     c22:	e0 e3       	ldi	r30, 0x30	; 48
     c24:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c26:	80 81       	ld	r24, Z
     c28:	88 60       	ori	r24, 0x08	; 8
     c2a:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c2c:	e8 33       	cpi	r30, 0x38	; 56
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	f8 07       	cpc	r31, r24
     c32:	c9 f7       	brne	.-14     	; 0xc26 <mcu_init+0x16>
     c34:	e0 e5       	ldi	r30, 0x50	; 80
     c36:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c38:	80 81       	ld	r24, Z
     c3a:	88 60       	ori	r24, 0x08	; 8
     c3c:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c3e:	e8 35       	cpi	r30, 0x58	; 88
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	f8 07       	cpc	r31, r24
     c44:	c9 f7       	brne	.-14     	; 0xc38 <mcu_init+0x28>
     c46:	e0 e7       	ldi	r30, 0x70	; 112
     c48:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c4a:	80 81       	ld	r24, Z
     c4c:	88 60       	ori	r24, 0x08	; 8
     c4e:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c50:	e8 37       	cpi	r30, 0x78	; 120
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	f8 07       	cpc	r31, r24
     c56:	c9 f7       	brne	.-14     	; 0xc4a <mcu_init+0x3a>
     c58:	e0 e9       	ldi	r30, 0x90	; 144
     c5a:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c5c:	80 81       	ld	r24, Z
     c5e:	88 60       	ori	r24, 0x08	; 8
     c60:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c62:	e8 39       	cpi	r30, 0x98	; 152
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	f8 07       	cpc	r31, r24
     c68:	c9 f7       	brne	.-14     	; 0xc5c <mcu_init+0x4c>
     c6a:	e0 eb       	ldi	r30, 0xB0	; 176
     c6c:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c6e:	80 81       	ld	r24, Z
     c70:	88 60       	ori	r24, 0x08	; 8
     c72:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c74:	e8 3b       	cpi	r30, 0xB8	; 184
     c76:	84 e0       	ldi	r24, 0x04	; 4
     c78:	f8 07       	cpc	r31, r24
     c7a:	c9 f7       	brne	.-14     	; 0xc6e <mcu_init+0x5e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     c7c:	08 95       	ret

00000c7e <USART_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     c7e:	41 98       	cbi	0x08, 1	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c80:	e1 e5       	ldi	r30, 0x51	; 81
     c82:	f4 e0       	ldi	r31, 0x04	; 4
     c84:	80 81       	ld	r24, Z
     c86:	87 7f       	andi	r24, 0xF7	; 247
     c88:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c8a:	48 98       	cbi	0x09, 0	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     c8c:	40 9a       	sbi	0x08, 0	; 8
	    // <true"> High
	    false);

	PC0_set_dir(PORT_DIR_OUT);

	USART_init();
     c8e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_init>
     c92:	08 95       	ret

00000c94 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     c94:	0e 94 08 06 	call	0xc10	; 0xc10 <mcu_init>

	CLKCTRL_init();
     c98:	0e 94 fd 05 	call	0xbfa	; 0xbfa <CLKCTRL_init>

	USART_initialization();
     c9c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <USART_initialization>

	SLPCTRL_init();
     ca0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <SLPCTRL_init>

	CPUINT_init();
     ca4:	0e 94 05 06 	call	0xc0a	; 0xc0a <CPUINT_init>

	Timer_init();
     ca8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <Timer_init>

	BOD_init();
     cac:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <BOD_init>
     cb0:	08 95       	ret

00000cb2 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     cb2:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     cb4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     cb6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     cb8:	40 83       	st	Z, r20
	ret                             // Return to caller
     cba:	08 95       	ret

00000cbc <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     cbc:	e0 e4       	ldi	r30, 0x40	; 64
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	81 11       	cpse	r24, r1
     cc4:	fd cf       	rjmp	.-6      	; 0xcc0 <Timer_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     cc6:	e0 e4       	ldi	r30, 0x40	; 64
     cc8:	f1 e0       	ldi	r31, 0x01	; 1
     cca:	81 e8       	ldi	r24, 0x81	; 129
     ccc:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
     cce:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	08 95       	ret

00000cd8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	08 95       	ret

00000cdc <USART_init>:
 * \return Initialization status.
 */
int8_t USART_init()
{

	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(38400); /* set baud rate register */
     cdc:	e0 e2       	ldi	r30, 0x20	; 32
     cde:	f8 e0       	ldi	r31, 0x08	; 8
     ce0:	84 ec       	ldi	r24, 0xC4	; 196
     ce2:	99 e0       	ldi	r25, 0x09	; 9
     ce4:	80 87       	std	Z+8, r24	; 0x08
     ce6:	91 87       	std	Z+9, r25	; 0x09

	USART1.CTRLA = 0 << USART_ABEIE_bp      /* Auto-baud Error Interrupt Enable: disabled */
     ce8:	80 ec       	ldi	r24, 0xC0	; 192
     cea:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp    /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp    /* Receiver Start Frame Interrupt Enable: disabled */
	               | 1 << USART_TXCIE_bp;   /* Transmit Complete Interrupt Enable: enabled */

	USART1.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
     cec:	86 83       	std	Z+6, r24	; 0x06
	// USART1.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART1.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	08 95       	ret

00000cf2 <check_for_aks_block>:
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
     d02:	ae 81       	ldd	r26, Y+6	; 0x06
     d04:	bf 81       	ldd	r27, Y+7	; 0x07
     d06:	eb 01       	movw	r28, r22
     d08:	cc 0f       	add	r28, r28
     d0a:	dd 1f       	adc	r29, r29
     d0c:	c6 0f       	add	r28, r22
     d0e:	d7 1f       	adc	r29, r23
     d10:	ca 0f       	add	r28, r26
     d12:	db 1f       	adc	r29, r27
     d14:	fa 80       	ldd	r15, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	44 81       	ldd	r20, Z+4	; 0x04
     d1a:	55 81       	ldd	r21, Z+5	; 0x05
     d1c:	e6 e0       	ldi	r30, 0x06	; 6
     d1e:	e6 9f       	mul	r30, r22
     d20:	90 01       	movw	r18, r0
     d22:	e7 9f       	mul	r30, r23
     d24:	30 0d       	add	r19, r0
     d26:	11 24       	eor	r1, r1
     d28:	8a 01       	movw	r16, r20
     d2a:	02 0f       	add	r16, r18
     d2c:	13 1f       	adc	r17, r19
     d2e:	f8 01       	movw	r30, r16
     d30:	22 81       	ldd	r18, Z+2	; 0x02
     d32:	33 81       	ldd	r19, Z+3	; 0x03
     d34:	f9 01       	movw	r30, r18
     d36:	21 81       	ldd	r18, Z+1	; 0x01
     d38:	32 81       	ldd	r19, Z+2	; 0x02
     d3a:	f8 01       	movw	r30, r16
     d3c:	04 81       	ldd	r16, Z+4	; 0x04
     d3e:	15 81       	ldd	r17, Z+5	; 0x05
     d40:	20 1b       	sub	r18, r16
     d42:	31 0b       	sbc	r19, r17
     d44:	e8 81       	ld	r30, Y
     d46:	2e 1b       	sub	r18, r30
     d48:	31 09       	sbc	r19, r1
     d4a:	ec 01       	movw	r28, r24
     d4c:	ea 81       	ldd	r30, Y+2	; 0x02
     d4e:	fb 81       	ldd	r31, Y+3	; 0x03
     d50:	00 81       	ld	r16, Z
     d52:	11 81       	ldd	r17, Z+1	; 0x01
     d54:	fa 01       	movw	r30, r20
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	40 17       	cp	r20, r16
     d5c:	51 07       	cpc	r21, r17
     d5e:	39 f1       	breq	.+78     	; 0xdae <check_for_aks_block+0xbc>
     d60:	46 17       	cp	r20, r22
     d62:	57 07       	cpc	r21, r23
     d64:	f9 f0       	breq	.+62     	; 0xda4 <check_for_aks_block+0xb2>
     d66:	12 96       	adiw	r26, 0x02	; 2
     d68:	8c 91       	ld	r24, X
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	f8 12       	cpse	r15, r24
     d6e:	1a c0       	rjmp	.+52     	; 0xda4 <check_for_aks_block+0xb2>
     d70:	80 81       	ld	r24, Z
     d72:	85 58       	subi	r24, 0x85	; 133
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	e8 f0       	brcs	.+58     	; 0xdb2 <check_for_aks_block+0xc0>
     d78:	c4 80       	ldd	r12, Z+4	; 0x04
     d7a:	d5 80       	ldd	r13, Z+5	; 0x05
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	ec 01       	movw	r28, r24
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	c8 16       	cp	r12, r24
     d88:	d9 06       	cpc	r13, r25
     d8a:	60 f4       	brcc	.+24     	; 0xda4 <check_for_aks_block+0xb2>
     d8c:	8c 19       	sub	r24, r12
     d8e:	9d 09       	sbc	r25, r13
     d90:	cc 91       	ld	r28, X
     d92:	d0 e0       	ldi	r29, 0x00	; 0
     d94:	c8 17       	cp	r28, r24
     d96:	d9 07       	cpc	r29, r25
     d98:	28 f4       	brcc	.+10     	; 0xda4 <check_for_aks_block+0xb2>
     d9a:	8c 1b       	sub	r24, r28
     d9c:	9d 0b       	sbc	r25, r29
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	38 f0       	brcs	.+14     	; 0xdb2 <check_for_aks_block+0xc0>
     da4:	4f 5f       	subi	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	13 96       	adiw	r26, 0x03	; 3
     daa:	36 96       	adiw	r30, 0x06	; 6
     dac:	d6 cf       	rjmp	.-84     	; 0xd5a <check_for_aks_block+0x68>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <check_for_aks_block+0xc2>
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	08 95       	ret

00000dc4 <qtm_update_qtlib_timer>:
     dc4:	20 91 47 41 	lds	r18, 0x4147	; 0x804147 <qtm_local_ms_timecount>
     dc8:	30 91 48 41 	lds	r19, 0x4148	; 0x804148 <qtm_local_ms_timecount+0x1>
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	80 93 47 41 	sts	0x4147, r24	; 0x804147 <qtm_local_ms_timecount>
     dd4:	90 93 48 41 	sts	0x4148, r25	; 0x804148 <qtm_local_ms_timecount+0x1>
     dd8:	08 95       	ret

00000dda <qtm_init_sensor_key>:
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	d9 f0       	breq	.+54     	; 0xe14 <qtm_init_sensor_key+0x3a>
     dde:	41 15       	cp	r20, r1
     de0:	51 05       	cpc	r21, r1
     de2:	c1 f0       	breq	.+48     	; 0xe14 <qtm_init_sensor_key+0x3a>
     de4:	26 e0       	ldi	r18, 0x06	; 6
     de6:	62 9f       	mul	r22, r18
     de8:	b0 01       	movw	r22, r0
     dea:	11 24       	eor	r1, r1
     dec:	dc 01       	movw	r26, r24
     dee:	14 96       	adiw	r26, 0x04	; 4
     df0:	ed 91       	ld	r30, X+
     df2:	fc 91       	ld	r31, X
     df4:	15 97       	sbiw	r26, 0x05	; 5
     df6:	e6 0f       	add	r30, r22
     df8:	f7 1f       	adc	r31, r23
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	20 83       	st	Z, r18
     dfe:	14 96       	adiw	r26, 0x04	; 4
     e00:	8d 91       	ld	r24, X+
     e02:	9c 91       	ld	r25, X
     e04:	15 97       	sbiw	r26, 0x05	; 5
     e06:	fc 01       	movw	r30, r24
     e08:	e6 0f       	add	r30, r22
     e0a:	f7 1f       	adc	r31, r23
     e0c:	42 83       	std	Z+2, r20	; 0x02
     e0e:	53 83       	std	Z+3, r21	; 0x03
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	08 95       	ret
     e14:	8b e0       	ldi	r24, 0x0B	; 11
     e16:	08 95       	ret

00000e18 <qtm_key_sensors_process>:
     e18:	2f 92       	push	r2
     e1a:	3f 92       	push	r3
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	6f 92       	push	r6
     e22:	7f 92       	push	r7
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	09 f4       	brne	.+2      	; 0xe42 <qtm_key_sensors_process+0x2a>
     e40:	7e c3       	rjmp	.+1788   	; 0x153e <qtm_key_sensors_process+0x726>
     e42:	ec 01       	movw	r28, r24
     e44:	a1 2c       	mov	r10, r1
     e46:	b1 2c       	mov	r11, r1
     e48:	81 2c       	mov	r8, r1
     e4a:	91 2c       	mov	r9, r1
     e4c:	21 2c       	mov	r2, r1
     e4e:	d1 2c       	mov	r13, r1
     e50:	55 24       	eor	r5, r5
     e52:	53 94       	inc	r5
     e54:	33 e0       	ldi	r19, 0x03	; 3
     e56:	c3 2e       	mov	r12, r19
     e58:	45 e8       	ldi	r20, 0x85	; 133
     e5a:	64 2e       	mov	r6, r20
     e5c:	56 e8       	ldi	r21, 0x86	; 134
     e5e:	75 2e       	mov	r7, r21
     e60:	62 e0       	ldi	r22, 0x02	; 2
     e62:	36 2e       	mov	r3, r22
     e64:	78 e0       	ldi	r23, 0x08	; 8
     e66:	47 2e       	mov	r4, r23
     e68:	ea 81       	ldd	r30, Y+2	; 0x02
     e6a:	fb 81       	ldd	r31, Y+3	; 0x03
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	88 16       	cp	r8, r24
     e72:	99 06       	cpc	r9, r25
     e74:	08 f0       	brcs	.+2      	; 0xe78 <qtm_key_sensors_process+0x60>
     e76:	a6 c1       	rjmp	.+844    	; 0x11c4 <qtm_key_sensors_process+0x3ac>
     e78:	75 01       	movw	r14, r10
     e7a:	ee 0c       	add	r14, r14
     e7c:	ff 1c       	adc	r15, r15
     e7e:	ec 81       	ldd	r30, Y+4	; 0x04
     e80:	fd 81       	ldd	r31, Y+5	; 0x05
     e82:	ee 0d       	add	r30, r14
     e84:	ff 1d       	adc	r31, r15
     e86:	a2 81       	ldd	r26, Z+2	; 0x02
     e88:	b3 81       	ldd	r27, Z+3	; 0x03
     e8a:	9c 91       	ld	r25, X
     e8c:	9e 71       	andi	r25, 0x1E	; 30
     e8e:	09 f0       	breq	.+2      	; 0xe92 <qtm_key_sensors_process+0x7a>
     e90:	50 82       	st	Z, r5
     e92:	0c 81       	ldd	r16, Y+4	; 0x04
     e94:	1d 81       	ldd	r17, Y+5	; 0x05
     e96:	0e 0d       	add	r16, r14
     e98:	1f 1d       	adc	r17, r15
     e9a:	d8 01       	movw	r26, r16
     e9c:	8c 91       	ld	r24, X
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	09 f4       	brne	.+2      	; 0xea4 <qtm_key_sensors_process+0x8c>
     ea2:	9e c0       	rjmp	.+316    	; 0xfe0 <qtm_key_sensors_process+0x1c8>
     ea4:	38 f4       	brcc	.+14     	; 0xeb4 <qtm_key_sensors_process+0x9c>
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	d1 f0       	breq	.+52     	; 0xede <qtm_key_sensors_process+0xc6>
     eaa:	08 f0       	brcs	.+2      	; 0xeae <qtm_key_sensors_process+0x96>
     eac:	45 c0       	rjmp	.+138    	; 0xf38 <qtm_key_sensors_process+0x120>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	59 f0       	breq	.+22     	; 0xec8 <qtm_key_sensors_process+0xb0>
     eb2:	81 c1       	rjmp	.+770    	; 0x11b6 <qtm_key_sensors_process+0x39e>
     eb4:	85 38       	cpi	r24, 0x85	; 133
     eb6:	09 f4       	brne	.+2      	; 0xeba <qtm_key_sensors_process+0xa2>
     eb8:	bf c0       	rjmp	.+382    	; 0x1038 <qtm_key_sensors_process+0x220>
     eba:	86 38       	cpi	r24, 0x86	; 134
     ebc:	09 f4       	brne	.+2      	; 0xec0 <qtm_key_sensors_process+0xa8>
     ebe:	f5 c0       	rjmp	.+490    	; 0x10aa <qtm_key_sensors_process+0x292>
     ec0:	87 30       	cpi	r24, 0x07	; 7
     ec2:	09 f0       	breq	.+2      	; 0xec6 <qtm_key_sensors_process+0xae>
     ec4:	78 c1       	rjmp	.+752    	; 0x11b6 <qtm_key_sensors_process+0x39e>
     ec6:	36 c1       	rjmp	.+620    	; 0x1134 <qtm_key_sensors_process+0x31c>
     ec8:	91 11       	cpse	r25, r1
     eca:	67 c1       	rjmp	.+718    	; 0x119a <qtm_key_sensors_process+0x382>
     ecc:	f8 01       	movw	r30, r16
     ece:	30 82       	st	Z, r3
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	9d 81       	ldd	r25, Y+5	; 0x05
     ed4:	fc 01       	movw	r30, r24
     ed6:	ee 0d       	add	r30, r14
     ed8:	ff 1d       	adc	r31, r15
     eda:	41 82       	std	Z+1, r4	; 0x01
     edc:	5e c1       	rjmp	.+700    	; 0x119a <qtm_key_sensors_process+0x382>
     ede:	d8 01       	movw	r26, r16
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	2c 91       	ld	r18, X
     ee4:	11 97       	sbiw	r26, 0x01	; 1
     ee6:	22 23       	and	r18, r18
     ee8:	29 f1       	breq	.+74     	; 0xf34 <qtm_key_sensors_process+0x11c>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	ed 91       	ld	r30, X+
     eee:	fc 91       	ld	r31, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	25 30       	cpi	r18, 0x05	; 5
     ef4:	18 f0       	brcs	.+6      	; 0xefc <qtm_key_sensors_process+0xe4>
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	92 81       	ldd	r25, Z+2	; 0x02
     efa:	0e c0       	rjmp	.+28     	; 0xf18 <qtm_key_sensors_process+0x100>
     efc:	d8 01       	movw	r26, r16
     efe:	14 96       	adiw	r26, 0x04	; 4
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	15 97       	sbiw	r26, 0x05	; 5
     f06:	41 81       	ldd	r20, Z+1	; 0x01
     f08:	52 81       	ldd	r21, Z+2	; 0x02
     f0a:	84 17       	cp	r24, r20
     f0c:	95 07       	cpc	r25, r21
     f0e:	69 f0       	breq	.+26     	; 0xf2a <qtm_key_sensors_process+0x112>
     f10:	48 17       	cp	r20, r24
     f12:	59 07       	cpc	r21, r25
     f14:	30 f4       	brcc	.+12     	; 0xf22 <qtm_key_sensors_process+0x10a>
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	14 96       	adiw	r26, 0x04	; 4
     f1a:	8d 93       	st	X+, r24
     f1c:	9c 93       	st	X, r25
     f1e:	15 97       	sbiw	r26, 0x05	; 5
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <qtm_key_sensors_process+0x112>
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	f8 01       	movw	r30, r16
     f26:	84 83       	std	Z+4, r24	; 0x04
     f28:	95 83       	std	Z+5, r25	; 0x05
     f2a:	21 50       	subi	r18, 0x01	; 1
     f2c:	d8 01       	movw	r26, r16
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	2c 93       	st	X, r18
     f32:	33 c1       	rjmp	.+614    	; 0x119a <qtm_key_sensors_process+0x382>
     f34:	f8 01       	movw	r30, r16
     f36:	2d c1       	rjmp	.+602    	; 0x1192 <qtm_key_sensors_process+0x37a>
     f38:	d8 01       	movw	r26, r16
     f3a:	14 96       	adiw	r26, 0x04	; 4
     f3c:	2d 91       	ld	r18, X+
     f3e:	3c 91       	ld	r19, X
     f40:	15 97       	sbiw	r26, 0x05	; 5
     f42:	12 96       	adiw	r26, 0x02	; 2
     f44:	ed 91       	ld	r30, X+
     f46:	fc 91       	ld	r31, X
     f48:	13 97       	sbiw	r26, 0x03	; 3
     f4a:	41 81       	ldd	r20, Z+1	; 0x01
     f4c:	52 81       	ldd	r21, Z+2	; 0x02
     f4e:	24 17       	cp	r18, r20
     f50:	35 07       	cpc	r19, r21
     f52:	09 f4       	brne	.+2      	; 0xf56 <qtm_key_sensors_process+0x13e>
     f54:	30 c1       	rjmp	.+608    	; 0x11b6 <qtm_key_sensors_process+0x39e>
     f56:	8e 81       	ldd	r24, Y+6	; 0x06
     f58:	9f 81       	ldd	r25, Y+7	; 0x07
     f5a:	42 17       	cp	r20, r18
     f5c:	53 07       	cpc	r21, r19
     f5e:	f8 f4       	brcc	.+62     	; 0xf9e <qtm_key_sensors_process+0x186>
     f60:	ea 81       	ldd	r30, Y+2	; 0x02
     f62:	fb 81       	ldd	r31, Y+3	; 0x03
     f64:	24 1b       	sub	r18, r20
     f66:	35 0b       	sbc	r19, r21
     f68:	dc 01       	movw	r26, r24
     f6a:	aa 0d       	add	r26, r10
     f6c:	bb 1d       	adc	r27, r11
     f6e:	8c 91       	ld	r24, X
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	05 80       	ldd	r0, Z+5	; 0x05
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <qtm_key_sensors_process+0x162>
     f76:	95 95       	asr	r25
     f78:	87 95       	ror	r24
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <qtm_key_sensors_process+0x15e>
     f7e:	99 27       	eor	r25, r25
     f80:	28 17       	cp	r18, r24
     f82:	39 07       	cpc	r19, r25
     f84:	08 f4       	brcc	.+2      	; 0xf88 <qtm_key_sensors_process+0x170>
     f86:	17 c1       	rjmp	.+558    	; 0x11b6 <qtm_key_sensors_process+0x39e>
     f88:	84 81       	ldd	r24, Z+4	; 0x04
     f8a:	88 23       	and	r24, r24
     f8c:	09 f4       	brne	.+2      	; 0xf90 <qtm_key_sensors_process+0x178>
     f8e:	13 c1       	rjmp	.+550    	; 0x11b6 <qtm_key_sensors_process+0x39e>
     f90:	87 e0       	ldi	r24, 0x07	; 7
     f92:	f8 01       	movw	r30, r16
     f94:	80 83       	st	Z, r24
     f96:	ea 81       	ldd	r30, Y+2	; 0x02
     f98:	fb 81       	ldd	r31, Y+3	; 0x03
     f9a:	24 81       	ldd	r18, Z+4	; 0x04
     f9c:	1a c0       	rjmp	.+52     	; 0xfd2 <qtm_key_sensors_process+0x1ba>
     f9e:	fc 01       	movw	r30, r24
     fa0:	ea 0d       	add	r30, r10
     fa2:	fb 1d       	adc	r31, r11
     fa4:	42 1b       	sub	r20, r18
     fa6:	53 0b       	sbc	r21, r19
     fa8:	80 81       	ld	r24, Z
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	48 17       	cp	r20, r24
     fae:	59 07       	cpc	r21, r25
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <qtm_key_sensors_process+0x19c>
     fb2:	01 c1       	rjmp	.+514    	; 0x11b6 <qtm_key_sensors_process+0x39e>
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	88 23       	and	r24, r24
     fb8:	31 f0       	breq	.+12     	; 0xfc6 <qtm_key_sensors_process+0x1ae>
     fba:	b4 01       	movw	r22, r8
     fbc:	ce 01       	movw	r24, r28
     fbe:	0e 94 79 06 	call	0xcf2	; 0xcf2 <check_for_aks_block>
     fc2:	81 11       	cpse	r24, r1
     fc4:	f8 c0       	rjmp	.+496    	; 0x11b6 <qtm_key_sensors_process+0x39e>
     fc6:	e4 e0       	ldi	r30, 0x04	; 4
     fc8:	d8 01       	movw	r26, r16
     fca:	ec 93       	st	X, r30
     fcc:	ea 81       	ldd	r30, Y+2	; 0x02
     fce:	fb 81       	ldd	r31, Y+3	; 0x03
     fd0:	22 81       	ldd	r18, Z+2	; 0x02
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	fc 01       	movw	r30, r24
     fd8:	ee 0d       	add	r30, r14
     fda:	ff 1d       	adc	r31, r15
     fdc:	21 83       	std	Z+1, r18	; 0x01
     fde:	dd c0       	rjmp	.+442    	; 0x119a <qtm_key_sensors_process+0x382>
     fe0:	d8 01       	movw	r26, r16
     fe2:	14 96       	adiw	r26, 0x04	; 4
     fe4:	2d 91       	ld	r18, X+
     fe6:	3c 91       	ld	r19, X
     fe8:	15 97       	sbiw	r26, 0x05	; 5
     fea:	12 96       	adiw	r26, 0x02	; 2
     fec:	ed 91       	ld	r30, X+
     fee:	fc 91       	ld	r31, X
     ff0:	13 97       	sbiw	r26, 0x03	; 3
     ff2:	81 81       	ldd	r24, Z+1	; 0x01
     ff4:	92 81       	ldd	r25, Z+2	; 0x02
     ff6:	82 17       	cp	r24, r18
     ff8:	93 07       	cpc	r25, r19
     ffa:	08 f4       	brcc	.+2      	; 0xffe <qtm_key_sensors_process+0x1e6>
     ffc:	bb c0       	rjmp	.+374    	; 0x1174 <qtm_key_sensors_process+0x35c>
     ffe:	ee 81       	ldd	r30, Y+6	; 0x06
    1000:	ff 81       	ldd	r31, Y+7	; 0x07
    1002:	ea 0d       	add	r30, r10
    1004:	fb 1d       	adc	r31, r11
    1006:	82 1b       	sub	r24, r18
    1008:	93 0b       	sbc	r25, r19
    100a:	20 81       	ld	r18, Z
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	28 17       	cp	r18, r24
    1010:	39 07       	cpc	r19, r25
    1012:	08 f0       	brcs	.+2      	; 0x1016 <qtm_key_sensors_process+0x1fe>
    1014:	c5 c0       	rjmp	.+394    	; 0x11a0 <qtm_key_sensors_process+0x388>
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	88 23       	and	r24, r24
    101a:	31 f0       	breq	.+12     	; 0x1028 <qtm_key_sensors_process+0x210>
    101c:	b4 01       	movw	r22, r8
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 79 06 	call	0xcf2	; 0xcf2 <check_for_aks_block>
    1024:	81 11       	cpse	r24, r1
    1026:	c7 c0       	rjmp	.+398    	; 0x11b6 <qtm_key_sensors_process+0x39e>
    1028:	f8 01       	movw	r30, r16
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	88 23       	and	r24, r24
    102e:	09 f4       	brne	.+2      	; 0x1032 <qtm_key_sensors_process+0x21a>
    1030:	6a c0       	rjmp	.+212    	; 0x1106 <qtm_key_sensors_process+0x2ee>
    1032:	81 50       	subi	r24, 0x01	; 1
    1034:	81 83       	std	Z+1, r24	; 0x01
    1036:	b1 c0       	rjmp	.+354    	; 0x119a <qtm_key_sensors_process+0x382>
    1038:	e8 81       	ld	r30, Y
    103a:	f9 81       	ldd	r31, Y+1	; 0x01
    103c:	aa 81       	ldd	r26, Y+2	; 0x02
    103e:	bb 81       	ldd	r27, Y+3	; 0x03
    1040:	18 96       	adiw	r26, 0x08	; 8
    1042:	8c 91       	ld	r24, X
    1044:	83 83       	std	Z+3, r24	; 0x03
    1046:	ec 81       	ldd	r30, Y+4	; 0x04
    1048:	fd 81       	ldd	r31, Y+5	; 0x05
    104a:	ee 0d       	add	r30, r14
    104c:	ff 1d       	adc	r31, r15
    104e:	44 81       	ldd	r20, Z+4	; 0x04
    1050:	55 81       	ldd	r21, Z+5	; 0x05
    1052:	a2 81       	ldd	r26, Z+2	; 0x02
    1054:	b3 81       	ldd	r27, Z+3	; 0x03
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	8d 91       	ld	r24, X+
    105a:	9c 91       	ld	r25, X
    105c:	12 97       	sbiw	r26, 0x02	; 2
    105e:	84 17       	cp	r24, r20
    1060:	95 07       	cpc	r25, r21
    1062:	c0 f0       	brcs	.+48     	; 0x1094 <qtm_key_sensors_process+0x27c>
    1064:	ae 81       	ldd	r26, Y+6	; 0x06
    1066:	bf 81       	ldd	r27, Y+7	; 0x07
    1068:	aa 0d       	add	r26, r10
    106a:	bb 1d       	adc	r27, r11
    106c:	6c 91       	ld	r22, X
    106e:	26 2f       	mov	r18, r22
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	7c 91       	ld	r23, X
    1076:	7f 5f       	subi	r23, 0xFF	; 255
    1078:	02 c0       	rjmp	.+4      	; 0x107e <qtm_key_sensors_process+0x266>
    107a:	35 95       	asr	r19
    107c:	27 95       	ror	r18
    107e:	7a 95       	dec	r23
    1080:	e2 f7       	brpl	.-8      	; 0x107a <qtm_key_sensors_process+0x262>
    1082:	84 1b       	sub	r24, r20
    1084:	95 0b       	sbc	r25, r21
    1086:	62 1b       	sub	r22, r18
    1088:	26 2f       	mov	r18, r22
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	08 f4       	brcc	.+2      	; 0x1094 <qtm_key_sensors_process+0x27c>
    1092:	8f c0       	rjmp	.+286    	; 0x11b2 <qtm_key_sensors_process+0x39a>
    1094:	70 82       	st	Z, r7
    1096:	ea 81       	ldd	r30, Y+2	; 0x02
    1098:	fb 81       	ldd	r31, Y+3	; 0x03
    109a:	22 81       	ldd	r18, Z+2	; 0x02
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	9d 81       	ldd	r25, Y+5	; 0x05
    10a0:	fc 01       	movw	r30, r24
    10a2:	ee 0d       	add	r30, r14
    10a4:	ff 1d       	adc	r31, r15
    10a6:	21 83       	std	Z+1, r18	; 0x01
    10a8:	42 c0       	rjmp	.+132    	; 0x112e <qtm_key_sensors_process+0x316>
    10aa:	d8 01       	movw	r26, r16
    10ac:	14 96       	adiw	r26, 0x04	; 4
    10ae:	6d 91       	ld	r22, X+
    10b0:	7c 91       	ld	r23, X
    10b2:	15 97       	sbiw	r26, 0x05	; 5
    10b4:	12 96       	adiw	r26, 0x02	; 2
    10b6:	ed 91       	ld	r30, X+
    10b8:	fc 91       	ld	r31, X
    10ba:	13 97       	sbiw	r26, 0x03	; 3
    10bc:	21 81       	ldd	r18, Z+1	; 0x01
    10be:	32 81       	ldd	r19, Z+2	; 0x02
    10c0:	26 17       	cp	r18, r22
    10c2:	37 07       	cpc	r19, r23
    10c4:	58 f4       	brcc	.+22     	; 0x10dc <qtm_key_sensors_process+0x2c4>
    10c6:	11 96       	adiw	r26, 0x01	; 1
    10c8:	8c 91       	ld	r24, X
    10ca:	11 97       	sbiw	r26, 0x01	; 1
    10cc:	81 11       	cpse	r24, r1
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <qtm_key_sensors_process+0x2bc>
    10d0:	cc 92       	st	X, r12
    10d2:	6f c0       	rjmp	.+222    	; 0x11b2 <qtm_key_sensors_process+0x39a>
    10d4:	81 50       	subi	r24, 0x01	; 1
    10d6:	f8 01       	movw	r30, r16
    10d8:	81 83       	std	Z+1, r24	; 0x01
    10da:	6b c0       	rjmp	.+214    	; 0x11b2 <qtm_key_sensors_process+0x39a>
    10dc:	ee 81       	ldd	r30, Y+6	; 0x06
    10de:	ff 81       	ldd	r31, Y+7	; 0x07
    10e0:	ea 0d       	add	r30, r10
    10e2:	fb 1d       	adc	r31, r11
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	9f 5f       	subi	r25, 0xFF	; 255
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <qtm_key_sensors_process+0x2dc>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	9a 95       	dec	r25
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <qtm_key_sensors_process+0x2d8>
    10f8:	26 1b       	sub	r18, r22
    10fa:	37 0b       	sbc	r19, r23
    10fc:	84 1b       	sub	r24, r20
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	82 17       	cp	r24, r18
    1102:	93 07       	cpc	r25, r19
    1104:	60 f4       	brcc	.+24     	; 0x111e <qtm_key_sensors_process+0x306>
    1106:	d8 01       	movw	r26, r16
    1108:	6c 92       	st	X, r6
    110a:	ea 81       	ldd	r30, Y+2	; 0x02
    110c:	fb 81       	ldd	r31, Y+3	; 0x03
    110e:	23 81       	ldd	r18, Z+3	; 0x03
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	fc 01       	movw	r30, r24
    1116:	ee 0d       	add	r30, r14
    1118:	ff 1d       	adc	r31, r15
    111a:	21 83       	std	Z+1, r18	; 0x01
    111c:	4a c0       	rjmp	.+148    	; 0x11b2 <qtm_key_sensors_process+0x39a>
    111e:	f8 01       	movw	r30, r16
    1120:	81 81       	ldd	r24, Z+1	; 0x01
    1122:	81 11       	cpse	r24, r1
    1124:	02 c0       	rjmp	.+4      	; 0x112a <qtm_key_sensors_process+0x312>
    1126:	c0 82       	st	Z, r12
    1128:	44 c0       	rjmp	.+136    	; 0x11b2 <qtm_key_sensors_process+0x39a>
    112a:	81 50       	subi	r24, 0x01	; 1
    112c:	81 83       	std	Z+1, r24	; 0x01
    112e:	22 24       	eor	r2, r2
    1130:	23 94       	inc	r2
    1132:	33 c0       	rjmp	.+102    	; 0x119a <qtm_key_sensors_process+0x382>
    1134:	f8 01       	movw	r30, r16
    1136:	24 81       	ldd	r18, Z+4	; 0x04
    1138:	35 81       	ldd	r19, Z+5	; 0x05
    113a:	02 80       	ldd	r0, Z+2	; 0x02
    113c:	f3 81       	ldd	r31, Z+3	; 0x03
    113e:	e0 2d       	mov	r30, r0
    1140:	81 81       	ldd	r24, Z+1	; 0x01
    1142:	92 81       	ldd	r25, Z+2	; 0x02
    1144:	82 17       	cp	r24, r18
    1146:	93 07       	cpc	r25, r19
    1148:	58 f5       	brcc	.+86     	; 0x11a0 <qtm_key_sensors_process+0x388>
    114a:	28 1b       	sub	r18, r24
    114c:	39 0b       	sbc	r19, r25
    114e:	ee 81       	ldd	r30, Y+6	; 0x06
    1150:	ff 81       	ldd	r31, Y+7	; 0x07
    1152:	ea 0d       	add	r30, r10
    1154:	fb 1d       	adc	r31, r11
    1156:	80 81       	ld	r24, Z
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	ea 81       	ldd	r30, Y+2	; 0x02
    115c:	fb 81       	ldd	r31, Y+3	; 0x03
    115e:	05 80       	ldd	r0, Z+5	; 0x05
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <qtm_key_sensors_process+0x34e>
    1162:	95 95       	asr	r25
    1164:	87 95       	ror	r24
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <qtm_key_sensors_process+0x34a>
    116a:	99 27       	eor	r25, r25
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	18 f4       	brcc	.+6      	; 0x1178 <qtm_key_sensors_process+0x360>
    1172:	d8 01       	movw	r26, r16
    1174:	cc 92       	st	X, r12
    1176:	16 c0       	rjmp	.+44     	; 0x11a4 <qtm_key_sensors_process+0x38c>
    1178:	f8 01       	movw	r30, r16
    117a:	81 81       	ldd	r24, Z+1	; 0x01
    117c:	81 11       	cpse	r24, r1
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <qtm_key_sensors_process+0x37e>
    1180:	50 82       	st	Z, r5
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	fc 01       	movw	r30, r24
    1188:	ee 0d       	add	r30, r14
    118a:	ff 1d       	adc	r31, r15
    118c:	02 80       	ldd	r0, Z+2	; 0x02
    118e:	f3 81       	ldd	r31, Z+3	; 0x03
    1190:	e0 2d       	mov	r30, r0
    1192:	c0 82       	st	Z, r12
    1194:	10 c0       	rjmp	.+32     	; 0x11b6 <qtm_key_sensors_process+0x39e>
    1196:	81 50       	subi	r24, 0x01	; 1
    1198:	81 83       	std	Z+1, r24	; 0x01
    119a:	dd 24       	eor	r13, r13
    119c:	d3 94       	inc	r13
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <qtm_key_sensors_process+0x39e>
    11a0:	f8 01       	movw	r30, r16
    11a2:	c0 82       	st	Z, r12
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	fc 01       	movw	r30, r24
    11aa:	ee 0d       	add	r30, r14
    11ac:	ff 1d       	adc	r31, r15
    11ae:	11 82       	std	Z+1, r1	; 0x01
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <qtm_key_sensors_process+0x39e>
    11b2:	22 24       	eor	r2, r2
    11b4:	23 94       	inc	r2
    11b6:	ff ef       	ldi	r31, 0xFF	; 255
    11b8:	8f 1a       	sub	r8, r31
    11ba:	9f 0a       	sbc	r9, r31
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	a8 0e       	add	r10, r24
    11c0:	b1 1c       	adc	r11, r1
    11c2:	52 ce       	rjmp	.-860    	; 0xe68 <qtm_key_sensors_process+0x50>
    11c4:	e8 81       	ld	r30, Y
    11c6:	f9 81       	ldd	r31, Y+1	; 0x01
    11c8:	80 81       	ld	r24, Z
    11ca:	87 ff       	sbrs	r24, 7
    11cc:	23 c0       	rjmp	.+70     	; 0x1214 <qtm_key_sensors_process+0x3fc>
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	ea 81       	ldd	r30, Y+2	; 0x02
    11d8:	fb 81       	ldd	r31, Y+3	; 0x03
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	28 17       	cp	r18, r24
    11e0:	39 07       	cpc	r19, r25
    11e2:	98 f4       	brcc	.+38     	; 0x120a <qtm_key_sensors_process+0x3f2>
    11e4:	ec 81       	ldd	r30, Y+4	; 0x04
    11e6:	fd 81       	ldd	r31, Y+5	; 0x05
    11e8:	e4 0f       	add	r30, r20
    11ea:	f5 1f       	adc	r31, r21
    11ec:	a2 81       	ldd	r26, Z+2	; 0x02
    11ee:	b3 81       	ldd	r27, Z+3	; 0x03
    11f0:	8c 91       	ld	r24, X
    11f2:	80 fd       	sbrc	r24, 0
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <qtm_key_sensors_process+0x3e8>
    11f6:	90 81       	ld	r25, Z
    11f8:	97 7f       	andi	r25, 0xF7	; 247
    11fa:	11 f0       	breq	.+4      	; 0x1200 <qtm_key_sensors_process+0x3e8>
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	8c 93       	st	X, r24
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	4a 5f       	subi	r20, 0xFA	; 250
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	e6 cf       	rjmp	.-52     	; 0x11d6 <qtm_key_sensors_process+0x3be>
    120a:	e8 81       	ld	r30, Y
    120c:	f9 81       	ldd	r31, Y+1	; 0x01
    120e:	80 81       	ld	r24, Z
    1210:	8f 77       	andi	r24, 0x7F	; 127
    1212:	80 83       	st	Z, r24
    1214:	d1 10       	cpse	r13, r1
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <qtm_key_sensors_process+0x40e>
    1218:	e8 81       	ld	r30, Y
    121a:	f9 81       	ldd	r31, Y+1	; 0x01
    121c:	21 10       	cpse	r2, r1
    121e:	6f c0       	rjmp	.+222    	; 0x12fe <qtm_key_sensors_process+0x4e6>
    1220:	80 81       	ld	r24, Z
    1222:	8e 7f       	andi	r24, 0xFE	; 254
    1224:	6e c0       	rjmp	.+220    	; 0x1302 <qtm_key_sensors_process+0x4ea>
    1226:	ea 81       	ldd	r30, Y+2	; 0x02
    1228:	fb 81       	ldd	r31, Y+3	; 0x03
    122a:	81 85       	ldd	r24, Z+9	; 0x09
    122c:	88 23       	and	r24, r24
    122e:	a1 f3       	breq	.-24     	; 0x1218 <qtm_key_sensors_process+0x400>
    1230:	e8 81       	ld	r30, Y
    1232:	f9 81       	ldd	r31, Y+1	; 0x01
    1234:	80 81       	ld	r24, Z
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	80 83       	st	Z, r24
    123a:	ea 81       	ldd	r30, Y+2	; 0x02
    123c:	fb 81       	ldd	r31, Y+3	; 0x03
    123e:	81 85       	ldd	r24, Z+9	; 0x09
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	51 f7       	brne	.-44     	; 0x1218 <qtm_key_sensors_process+0x400>
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	96 e0       	ldi	r25, 0x06	; 6
    124e:	d9 2e       	mov	r13, r25
    1250:	ea 81       	ldd	r30, Y+2	; 0x02
    1252:	fb 81       	ldd	r31, Y+3	; 0x03
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	26 17       	cp	r18, r22
    125a:	37 07       	cpc	r19, r23
    125c:	e8 f6       	brcc	.-70     	; 0x1218 <qtm_key_sensors_process+0x400>
    125e:	0c 81       	ldd	r16, Y+4	; 0x04
    1260:	1d 81       	ldd	r17, Y+5	; 0x05
    1262:	fa 01       	movw	r30, r20
    1264:	ee 0f       	add	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	e0 0f       	add	r30, r16
    126a:	f1 1f       	adc	r31, r17
    126c:	80 81       	ld	r24, Z
    126e:	98 2f       	mov	r25, r24
    1270:	97 7f       	andi	r25, 0xF7	; 247
    1272:	a1 f1       	breq	.+104    	; 0x12dc <qtm_key_sensors_process+0x4c4>
    1274:	85 38       	cpi	r24, 0x85	; 133
    1276:	11 f0       	breq	.+4      	; 0x127c <qtm_key_sensors_process+0x464>
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	b1 f5       	brne	.+108    	; 0x12e8 <qtm_key_sensors_process+0x4d0>
    127c:	ee 80       	ldd	r14, Y+6	; 0x06
    127e:	ff 80       	ldd	r15, Y+7	; 0x07
    1280:	d7 01       	movw	r26, r14
    1282:	a4 0f       	add	r26, r20
    1284:	b5 1f       	adc	r27, r21
    1286:	12 96       	adiw	r26, 0x02	; 2
    1288:	bc 90       	ld	r11, X
    128a:	bb 20       	and	r11, r11
    128c:	39 f1       	breq	.+78     	; 0x12dc <qtm_key_sensors_process+0x4c4>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	c1 2c       	mov	r12, r1
    1294:	86 17       	cp	r24, r22
    1296:	97 07       	cpc	r25, r23
    1298:	f8 f4       	brcc	.+62     	; 0x12d8 <qtm_key_sensors_process+0x4c0>
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	d1 f0       	breq	.+52     	; 0x12d4 <qtm_key_sensors_process+0x4bc>
    12a0:	d8 9e       	mul	r13, r24
    12a2:	d0 01       	movw	r26, r0
    12a4:	d9 9e       	mul	r13, r25
    12a6:	b0 0d       	add	r27, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	a0 0f       	add	r26, r16
    12ac:	b1 1f       	adc	r27, r17
    12ae:	ac 91       	ld	r26, X
    12b0:	a4 30       	cpi	r26, 0x04	; 4
    12b2:	11 f0       	breq	.+4      	; 0x12b8 <qtm_key_sensors_process+0x4a0>
    12b4:	a6 38       	cpi	r26, 0x86	; 134
    12b6:	71 f4       	brne	.+28     	; 0x12d4 <qtm_key_sensors_process+0x4bc>
    12b8:	dc 01       	movw	r26, r24
    12ba:	aa 0f       	add	r26, r26
    12bc:	bb 1f       	adc	r27, r27
    12be:	a8 0f       	add	r26, r24
    12c0:	b9 1f       	adc	r27, r25
    12c2:	ae 0d       	add	r26, r14
    12c4:	bf 1d       	adc	r27, r15
    12c6:	12 96       	adiw	r26, 0x02	; 2
    12c8:	ac 91       	ld	r26, X
    12ca:	ba 12       	cpse	r11, r26
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <qtm_key_sensors_process+0x4bc>
    12ce:	cb 01       	movw	r24, r22
    12d0:	cc 24       	eor	r12, r12
    12d2:	c3 94       	inc	r12
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	de cf       	rjmp	.-68     	; 0x1294 <qtm_key_sensors_process+0x47c>
    12d8:	c1 10       	cpse	r12, r1
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <qtm_key_sensors_process+0x4d0>
    12dc:	02 80       	ldd	r0, Z+2	; 0x02
    12de:	f3 81       	ldd	r31, Z+3	; 0x03
    12e0:	e0 2d       	mov	r30, r0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <qtm_key_sensors_process+0x4da>
    12e8:	02 80       	ldd	r0, Z+2	; 0x02
    12ea:	f3 81       	ldd	r31, Z+3	; 0x03
    12ec:	e0 2d       	mov	r30, r0
    12ee:	80 81       	ld	r24, Z
    12f0:	81 60       	ori	r24, 0x01	; 1
    12f2:	80 83       	st	Z, r24
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	4d 5f       	subi	r20, 0xFD	; 253
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	a9 cf       	rjmp	.-174    	; 0x1250 <qtm_key_sensors_process+0x438>
    12fe:	80 81       	ld	r24, Z
    1300:	81 60       	ori	r24, 0x01	; 1
    1302:	80 83       	st	Z, r24
    1304:	80 91 47 41 	lds	r24, 0x4147	; 0x804147 <qtm_local_ms_timecount>
    1308:	90 91 48 41 	lds	r25, 0x4148	; 0x804148 <qtm_local_ms_timecount+0x1>
    130c:	e8 81       	ld	r30, Y
    130e:	f9 81       	ldd	r31, Y+1	; 0x01
    1310:	21 81       	ldd	r18, Z+1	; 0x01
    1312:	32 81       	ldd	r19, Z+2	; 0x02
    1314:	a9 01       	movw	r20, r18
    1316:	48 53       	subi	r20, 0x38	; 56
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	48 17       	cp	r20, r24
    131c:	59 07       	cpc	r21, r25
    131e:	38 f4       	brcc	.+14     	; 0x132e <qtm_key_sensors_process+0x516>
    1320:	82 1b       	sub	r24, r18
    1322:	93 0b       	sbc	r25, r19
    1324:	aa 24       	eor	r10, r10
    1326:	a3 94       	inc	r10
    1328:	a3 e0       	ldi	r26, 0x03	; 3
    132a:	ba 2e       	mov	r11, r26
    132c:	44 c0       	rjmp	.+136    	; 0x13b6 <qtm_key_sensors_process+0x59e>
    132e:	82 17       	cp	r24, r18
    1330:	93 07       	cpc	r25, r19
    1332:	10 f0       	brcs	.+4      	; 0x1338 <qtm_key_sensors_process+0x520>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	04 c1       	rjmp	.+520    	; 0x1540 <qtm_key_sensors_process+0x728>
    1338:	82 1b       	sub	r24, r18
    133a:	93 0b       	sbc	r25, r19
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	89 3c       	cpi	r24, 0xC9	; 201
    1340:	91 05       	cpc	r25, r1
    1342:	c0 f3       	brcs	.-16     	; 0x1334 <qtm_key_sensors_process+0x51c>
    1344:	ef cf       	rjmp	.-34     	; 0x1324 <qtm_key_sensors_process+0x50c>
    1346:	88 5c       	subi	r24, 0xC8	; 200
    1348:	91 09       	sbc	r25, r1
    134a:	e8 81       	ld	r30, Y
    134c:	f9 81       	ldd	r31, Y+1	; 0x01
    134e:	21 81       	ldd	r18, Z+1	; 0x01
    1350:	32 81       	ldd	r19, Z+2	; 0x02
    1352:	28 53       	subi	r18, 0x38	; 56
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	21 83       	std	Z+1, r18	; 0x01
    1358:	32 83       	std	Z+2, r19	; 0x02
    135a:	23 81       	ldd	r18, Z+3	; 0x03
    135c:	21 11       	cpse	r18, r1
    135e:	96 c0       	rjmp	.+300    	; 0x148c <qtm_key_sensors_process+0x674>
    1360:	24 81       	ldd	r18, Z+4	; 0x04
    1362:	22 23       	and	r18, r18
    1364:	11 f0       	breq	.+4      	; 0x136a <qtm_key_sensors_process+0x552>
    1366:	21 50       	subi	r18, 0x01	; 1
    1368:	24 83       	std	Z+4, r18	; 0x04
    136a:	e8 81       	ld	r30, Y
    136c:	f9 81       	ldd	r31, Y+1	; 0x01
    136e:	25 81       	ldd	r18, Z+5	; 0x05
    1370:	22 23       	and	r18, r18
    1372:	11 f0       	breq	.+4      	; 0x1378 <qtm_key_sensors_process+0x560>
    1374:	21 50       	subi	r18, 0x01	; 1
    1376:	25 83       	std	Z+5, r18	; 0x05
    1378:	8a 80       	ldd	r8, Y+2	; 0x02
    137a:	9b 80       	ldd	r9, Y+3	; 0x03
    137c:	d4 01       	movw	r26, r8
    137e:	16 96       	adiw	r26, 0x06	; 6
    1380:	2c 91       	ld	r18, X
    1382:	16 97       	sbiw	r26, 0x06	; 6
    1384:	21 11       	cpse	r18, r1
    1386:	1b c0       	rjmp	.+54     	; 0x13be <qtm_key_sensors_process+0x5a6>
    1388:	8a 80       	ldd	r8, Y+2	; 0x02
    138a:	9b 80       	ldd	r9, Y+3	; 0x03
    138c:	f4 01       	movw	r30, r8
    138e:	27 81       	ldd	r18, Z+7	; 0x07
    1390:	21 11       	cpse	r18, r1
    1392:	48 c0       	rjmp	.+144    	; 0x1424 <qtm_key_sensors_process+0x60c>
    1394:	ea 81       	ldd	r30, Y+2	; 0x02
    1396:	fb 81       	ldd	r31, Y+3	; 0x03
    1398:	23 81       	ldd	r18, Z+3	; 0x03
    139a:	22 23       	and	r18, r18
    139c:	61 f0       	breq	.+24     	; 0x13b6 <qtm_key_sensors_process+0x59e>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea 81       	ldd	r30, Y+2	; 0x02
    13a8:	fb 81       	ldd	r31, Y+3	; 0x03
    13aa:	40 81       	ld	r20, Z
    13ac:	51 81       	ldd	r21, Z+1	; 0x01
    13ae:	a4 17       	cp	r26, r20
    13b0:	b5 07       	cpc	r27, r21
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <qtm_key_sensors_process+0x59e>
    13b4:	6e c0       	rjmp	.+220    	; 0x1492 <qtm_key_sensors_process+0x67a>
    13b6:	89 3c       	cpi	r24, 0xC9	; 201
    13b8:	91 05       	cpc	r25, r1
    13ba:	28 f6       	brcc	.-118    	; 0x1346 <qtm_key_sensors_process+0x52e>
    13bc:	bb cf       	rjmp	.-138    	; 0x1334 <qtm_key_sensors_process+0x51c>
    13be:	08 81       	ld	r16, Y
    13c0:	19 81       	ldd	r17, Y+1	; 0x01
    13c2:	f8 01       	movw	r30, r16
    13c4:	24 81       	ldd	r18, Z+4	; 0x04
    13c6:	21 11       	cpse	r18, r1
    13c8:	df cf       	rjmp	.-66     	; 0x1388 <qtm_key_sensors_process+0x570>
    13ca:	ed 90       	ld	r14, X+
    13cc:	fc 90       	ld	r15, X
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	4e 15       	cp	r20, r14
    13d8:	5f 05       	cpc	r21, r15
    13da:	f1 f0       	breq	.+60     	; 0x1418 <qtm_key_sensors_process+0x600>
    13dc:	ec 81       	ldd	r30, Y+4	; 0x04
    13de:	fd 81       	ldd	r31, Y+5	; 0x05
    13e0:	e6 0f       	add	r30, r22
    13e2:	f7 1f       	adc	r31, r23
    13e4:	20 81       	ld	r18, Z
    13e6:	23 30       	cpi	r18, 0x03	; 3
    13e8:	11 f0       	breq	.+4      	; 0x13ee <qtm_key_sensors_process+0x5d6>
    13ea:	28 30       	cpi	r18, 0x08	; 8
    13ec:	81 f4       	brne	.+32     	; 0x140e <qtm_key_sensors_process+0x5f6>
    13ee:	24 81       	ldd	r18, Z+4	; 0x04
    13f0:	35 81       	ldd	r19, Z+5	; 0x05
    13f2:	c2 80       	ldd	r12, Z+2	; 0x02
    13f4:	d3 80       	ldd	r13, Z+3	; 0x03
    13f6:	d6 01       	movw	r26, r12
    13f8:	11 96       	adiw	r26, 0x01	; 1
    13fa:	cd 90       	ld	r12, X+
    13fc:	dc 90       	ld	r13, X
    13fe:	12 97       	sbiw	r26, 0x02	; 2
    1400:	2c 15       	cp	r18, r12
    1402:	3d 05       	cpc	r19, r13
    1404:	20 f4       	brcc	.+8      	; 0x140e <qtm_key_sensors_process+0x5f6>
    1406:	2f 5f       	subi	r18, 0xFF	; 255
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	24 83       	std	Z+4, r18	; 0x04
    140c:	35 83       	std	Z+5, r19	; 0x05
    140e:	4f 5f       	subi	r20, 0xFF	; 255
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	6a 5f       	subi	r22, 0xFA	; 250
    1414:	7f 4f       	sbci	r23, 0xFF	; 255
    1416:	df cf       	rjmp	.-66     	; 0x13d6 <qtm_key_sensors_process+0x5be>
    1418:	f4 01       	movw	r30, r8
    141a:	26 81       	ldd	r18, Z+6	; 0x06
    141c:	d8 01       	movw	r26, r16
    141e:	14 96       	adiw	r26, 0x04	; 4
    1420:	2c 93       	st	X, r18
    1422:	b2 cf       	rjmp	.-156    	; 0x1388 <qtm_key_sensors_process+0x570>
    1424:	08 81       	ld	r16, Y
    1426:	19 81       	ldd	r17, Y+1	; 0x01
    1428:	d8 01       	movw	r26, r16
    142a:	15 96       	adiw	r26, 0x05	; 5
    142c:	2c 91       	ld	r18, X
    142e:	21 11       	cpse	r18, r1
    1430:	b1 cf       	rjmp	.-158    	; 0x1394 <qtm_key_sensors_process+0x57c>
    1432:	e0 80       	ld	r14, Z
    1434:	f1 80       	ldd	r15, Z+1	; 0x01
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	4e 15       	cp	r20, r14
    1440:	5f 05       	cpc	r21, r15
    1442:	f1 f0       	breq	.+60     	; 0x1480 <qtm_key_sensors_process+0x668>
    1444:	ec 81       	ldd	r30, Y+4	; 0x04
    1446:	fd 81       	ldd	r31, Y+5	; 0x05
    1448:	e6 0f       	add	r30, r22
    144a:	f7 1f       	adc	r31, r23
    144c:	20 81       	ld	r18, Z
    144e:	23 30       	cpi	r18, 0x03	; 3
    1450:	11 f0       	breq	.+4      	; 0x1456 <qtm_key_sensors_process+0x63e>
    1452:	28 30       	cpi	r18, 0x08	; 8
    1454:	81 f4       	brne	.+32     	; 0x1476 <qtm_key_sensors_process+0x65e>
    1456:	24 81       	ldd	r18, Z+4	; 0x04
    1458:	35 81       	ldd	r19, Z+5	; 0x05
    145a:	c2 80       	ldd	r12, Z+2	; 0x02
    145c:	d3 80       	ldd	r13, Z+3	; 0x03
    145e:	d6 01       	movw	r26, r12
    1460:	11 96       	adiw	r26, 0x01	; 1
    1462:	cd 90       	ld	r12, X+
    1464:	dc 90       	ld	r13, X
    1466:	12 97       	sbiw	r26, 0x02	; 2
    1468:	c2 16       	cp	r12, r18
    146a:	d3 06       	cpc	r13, r19
    146c:	20 f4       	brcc	.+8      	; 0x1476 <qtm_key_sensors_process+0x65e>
    146e:	21 50       	subi	r18, 0x01	; 1
    1470:	31 09       	sbc	r19, r1
    1472:	24 83       	std	Z+4, r18	; 0x04
    1474:	35 83       	std	Z+5, r19	; 0x05
    1476:	4f 5f       	subi	r20, 0xFF	; 255
    1478:	5f 4f       	sbci	r21, 0xFF	; 255
    147a:	6a 5f       	subi	r22, 0xFA	; 250
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	df cf       	rjmp	.-66     	; 0x143e <qtm_key_sensors_process+0x626>
    1480:	f4 01       	movw	r30, r8
    1482:	27 81       	ldd	r18, Z+7	; 0x07
    1484:	d8 01       	movw	r26, r16
    1486:	15 96       	adiw	r26, 0x05	; 5
    1488:	2c 93       	st	X, r18
    148a:	84 cf       	rjmp	.-248    	; 0x1394 <qtm_key_sensors_process+0x57c>
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	23 83       	std	Z+3, r18	; 0x03
    1490:	81 cf       	rjmp	.-254    	; 0x1394 <qtm_key_sensors_process+0x57c>
    1492:	a9 01       	movw	r20, r18
    1494:	44 0f       	add	r20, r20
    1496:	55 1f       	adc	r21, r21
    1498:	ec 81       	ldd	r30, Y+4	; 0x04
    149a:	fd 81       	ldd	r31, Y+5	; 0x05
    149c:	e4 0f       	add	r30, r20
    149e:	f5 1f       	adc	r31, r21
    14a0:	60 81       	ld	r22, Z
    14a2:	65 38       	cpi	r22, 0x85	; 133
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <qtm_key_sensors_process+0x690>
    14a6:	47 c0       	rjmp	.+142    	; 0x1536 <qtm_key_sensors_process+0x71e>
    14a8:	61 81       	ldd	r22, Z+1	; 0x01
    14aa:	66 23       	and	r22, r22
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <qtm_key_sensors_process+0x69c>
    14ae:	61 50       	subi	r22, 0x01	; 1
    14b0:	61 83       	std	Z+1, r22	; 0x01
    14b2:	41 c0       	rjmp	.+130    	; 0x1536 <qtm_key_sensors_process+0x71e>
    14b4:	a0 82       	st	Z, r10
    14b6:	6c 81       	ldd	r22, Y+4	; 0x04
    14b8:	7d 81       	ldd	r23, Y+5	; 0x05
    14ba:	fb 01       	movw	r30, r22
    14bc:	e4 0f       	add	r30, r20
    14be:	f5 1f       	adc	r31, r21
    14c0:	02 80       	ldd	r0, Z+2	; 0x02
    14c2:	f3 81       	ldd	r31, Z+3	; 0x03
    14c4:	e0 2d       	mov	r30, r0
    14c6:	b0 82       	st	Z, r11
    14c8:	ee 81       	ldd	r30, Y+6	; 0x06
    14ca:	ff 81       	ldd	r31, Y+7	; 0x07
    14cc:	e2 0f       	add	r30, r18
    14ce:	f3 1f       	adc	r31, r19
    14d0:	d2 80       	ldd	r13, Z+2	; 0x02
    14d2:	dd 20       	and	r13, r13
    14d4:	81 f1       	breq	.+96     	; 0x1536 <qtm_key_sensors_process+0x71e>
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	00 e0       	ldi	r16, 0x00	; 0
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	ea 81       	ldd	r30, Y+2	; 0x02
    14e0:	fb 81       	ldd	r31, Y+3	; 0x03
    14e2:	60 81       	ld	r22, Z
    14e4:	71 81       	ldd	r23, Z+1	; 0x01
    14e6:	06 17       	cp	r16, r22
    14e8:	17 07       	cpc	r17, r23
    14ea:	28 f5       	brcc	.+74     	; 0x1536 <qtm_key_sensors_process+0x71e>
    14ec:	ee 81       	ldd	r30, Y+6	; 0x06
    14ee:	ff 81       	ldd	r31, Y+7	; 0x07
    14f0:	e4 0f       	add	r30, r20
    14f2:	f5 1f       	adc	r31, r21
    14f4:	62 81       	ldd	r22, Z+2	; 0x02
    14f6:	d6 12       	cpse	r13, r22
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <qtm_key_sensors_process+0x714>
    14fa:	ba 01       	movw	r22, r20
    14fc:	66 0f       	add	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	ec 81       	ldd	r30, Y+4	; 0x04
    1502:	fd 81       	ldd	r31, Y+5	; 0x05
    1504:	4f 01       	movw	r8, r30
    1506:	86 0e       	add	r8, r22
    1508:	97 1e       	adc	r9, r23
    150a:	f4 01       	movw	r30, r8
    150c:	e2 80       	ldd	r14, Z+2	; 0x02
    150e:	f3 80       	ldd	r15, Z+3	; 0x03
    1510:	f7 01       	movw	r30, r14
    1512:	f0 80       	ld	r15, Z
    1514:	f0 fe       	sbrs	r15, 0
    1516:	0a c0       	rjmp	.+20     	; 0x152c <qtm_key_sensors_process+0x714>
    1518:	f4 01       	movw	r30, r8
    151a:	a0 82       	st	Z, r10
    151c:	ec 81       	ldd	r30, Y+4	; 0x04
    151e:	fd 81       	ldd	r31, Y+5	; 0x05
    1520:	e6 0f       	add	r30, r22
    1522:	f7 1f       	adc	r31, r23
    1524:	02 80       	ldd	r0, Z+2	; 0x02
    1526:	f3 81       	ldd	r31, Z+3	; 0x03
    1528:	e0 2d       	mov	r30, r0
    152a:	b0 82       	st	Z, r11
    152c:	0f 5f       	subi	r16, 0xFF	; 255
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	4d 5f       	subi	r20, 0xFD	; 253
    1532:	5f 4f       	sbci	r21, 0xFF	; 255
    1534:	d4 cf       	rjmp	.-88     	; 0x14de <qtm_key_sensors_process+0x6c6>
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	2d 5f       	subi	r18, 0xFD	; 253
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	34 cf       	rjmp	.-408    	; 0x13a6 <qtm_key_sensors_process+0x58e>
    153e:	8b e0       	ldi	r24, 0x0B	; 11
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	7f 90       	pop	r7
    155a:	6f 90       	pop	r6
    155c:	5f 90       	pop	r5
    155e:	4f 90       	pop	r4
    1560:	3f 90       	pop	r3
    1562:	2f 90       	pop	r2
    1564:	08 95       	ret

00001566 <divide>:
    1566:	9c 01       	movw	r18, r24
    1568:	61 15       	cp	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	09 f1       	breq	.+66     	; 0x15b0 <divide+0x4a>
    156e:	4f 5f       	subi	r20, 0xFF	; 255
    1570:	37 fd       	sbrc	r19, 7
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <divide+0x1a>
    1574:	44 23       	and	r20, r20
    1576:	21 f0       	breq	.+8      	; 0x1580 <divide+0x1a>
    1578:	41 50       	subi	r20, 0x01	; 1
    157a:	22 0f       	add	r18, r18
    157c:	33 1f       	adc	r19, r19
    157e:	f8 cf       	rjmp	.-16     	; 0x1570 <divide+0xa>
    1580:	77 fd       	sbrc	r23, 7
    1582:	04 c0       	rjmp	.+8      	; 0x158c <divide+0x26>
    1584:	4f 5f       	subi	r20, 0xFF	; 255
    1586:	66 0f       	add	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	fa cf       	rjmp	.-12     	; 0x1580 <divide+0x1a>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	44 23       	and	r20, r20
    1592:	81 f0       	breq	.+32     	; 0x15b4 <divide+0x4e>
    1594:	97 fd       	sbrc	r25, 7
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <divide+0x4a>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	41 50       	subi	r20, 0x01	; 1
    159e:	26 17       	cp	r18, r22
    15a0:	37 07       	cpc	r19, r23
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <divide+0x44>
    15a4:	26 1b       	sub	r18, r22
    15a6:	37 0b       	sbc	r19, r23
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	76 95       	lsr	r23
    15ac:	67 95       	ror	r22
    15ae:	f0 cf       	rjmp	.-32     	; 0x1590 <divide+0x2a>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	9f ef       	ldi	r25, 0xFF	; 255
    15b4:	08 95       	ret

000015b6 <median_filter_update>:
    15b6:	26 e0       	ldi	r18, 0x06	; 6
    15b8:	82 9f       	mul	r24, r18
    15ba:	c0 01       	movw	r24, r0
    15bc:	11 24       	eor	r1, r1
    15be:	fc 01       	movw	r30, r24
    15c0:	e6 5b       	subi	r30, 0xB6	; 182
    15c2:	fe 4b       	sbci	r31, 0xBE	; 190
    15c4:	22 81       	ldd	r18, Z+2	; 0x02
    15c6:	33 81       	ldd	r19, Z+3	; 0x03
    15c8:	20 83       	st	Z, r18
    15ca:	31 83       	std	Z+1, r19	; 0x01
    15cc:	54 81       	ldd	r21, Z+4	; 0x04
    15ce:	45 81       	ldd	r20, Z+5	; 0x05
    15d0:	52 83       	std	Z+2, r21	; 0x02
    15d2:	43 83       	std	Z+3, r20	; 0x03
    15d4:	64 83       	std	Z+4, r22	; 0x04
    15d6:	75 83       	std	Z+5, r23	; 0x05
    15d8:	85 2f       	mov	r24, r21
    15da:	94 2f       	mov	r25, r20
    15dc:	68 17       	cp	r22, r24
    15de:	79 07       	cpc	r23, r25
    15e0:	d9 f0       	breq	.+54     	; 0x1618 <median_filter_update+0x62>
    15e2:	82 17       	cp	r24, r18
    15e4:	93 07       	cpc	r25, r19
    15e6:	c1 f0       	breq	.+48     	; 0x1618 <median_filter_update+0x62>
    15e8:	62 17       	cp	r22, r18
    15ea:	73 07       	cpc	r23, r19
    15ec:	a1 f0       	breq	.+40     	; 0x1616 <median_filter_update+0x60>
    15ee:	86 17       	cp	r24, r22
    15f0:	97 07       	cpc	r25, r23
    15f2:	40 f4       	brcc	.+16     	; 0x1604 <median_filter_update+0x4e>
    15f4:	28 17       	cp	r18, r24
    15f6:	39 07       	cpc	r19, r25
    15f8:	78 f0       	brcs	.+30     	; 0x1618 <median_filter_update+0x62>
    15fa:	cb 01       	movw	r24, r22
    15fc:	26 17       	cp	r18, r22
    15fe:	37 07       	cpc	r19, r23
    1600:	58 f4       	brcc	.+22     	; 0x1618 <median_filter_update+0x62>
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <median_filter_update+0x5c>
    1604:	82 17       	cp	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	38 f0       	brcs	.+14     	; 0x1618 <median_filter_update+0x62>
    160a:	cb 01       	movw	r24, r22
    160c:	62 17       	cp	r22, r18
    160e:	73 07       	cpc	r23, r19
    1610:	18 f4       	brcc	.+6      	; 0x1618 <median_filter_update+0x62>
    1612:	c9 01       	movw	r24, r18
    1614:	08 95       	ret
    1616:	cb 01       	movw	r24, r22
    1618:	08 95       	ret

0000161a <get_key_delta>:
    161a:	26 e0       	ldi	r18, 0x06	; 6
    161c:	26 9f       	mul	r18, r22
    161e:	f0 01       	movw	r30, r0
    1620:	27 9f       	mul	r18, r23
    1622:	f0 0d       	add	r31, r0
    1624:	11 24       	eor	r1, r1
    1626:	e8 0f       	add	r30, r24
    1628:	f9 1f       	adc	r31, r25
    162a:	a2 81       	ldd	r26, Z+2	; 0x02
    162c:	b3 81       	ldd	r27, Z+3	; 0x03
    162e:	11 96       	adiw	r26, 0x01	; 1
    1630:	8d 91       	ld	r24, X+
    1632:	9c 91       	ld	r25, X
    1634:	12 97       	sbiw	r26, 0x02	; 2
    1636:	24 81       	ldd	r18, Z+4	; 0x04
    1638:	35 81       	ldd	r19, Z+5	; 0x05
    163a:	82 1b       	sub	r24, r18
    163c:	93 0b       	sbc	r25, r19
    163e:	08 95       	ret

00001640 <get_axis_contact_size>:
    1640:	9f 92       	push	r9
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	5c 01       	movw	r10, r24
    1658:	6b 01       	movw	r12, r22
    165a:	94 2e       	mov	r9, r20
    165c:	79 01       	movw	r14, r18
    165e:	b9 01       	movw	r22, r18
    1660:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    1664:	18 16       	cp	r1, r24
    1666:	19 06       	cpc	r1, r25
    1668:	14 f4       	brge	.+4      	; 0x166e <get_axis_contact_size+0x2e>
    166a:	ec 01       	movw	r28, r24
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <get_axis_contact_size+0x32>
    166e:	c0 e0       	ldi	r28, 0x00	; 0
    1670:	d0 e0       	ldi	r29, 0x00	; 0
    1672:	ce 14       	cp	r12, r14
    1674:	df 04       	cpc	r13, r15
    1676:	58 f4       	brcc	.+22     	; 0x168e <get_axis_contact_size+0x4e>
    1678:	b7 01       	movw	r22, r14
    167a:	61 50       	subi	r22, 0x01	; 1
    167c:	71 09       	sbc	r23, r1
    167e:	c5 01       	movw	r24, r10
    1680:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    1684:	18 16       	cp	r1, r24
    1686:	19 06       	cpc	r1, r25
    1688:	14 f4       	brge	.+4      	; 0x168e <get_axis_contact_size+0x4e>
    168a:	8c 01       	movw	r16, r24
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <get_axis_contact_size+0x52>
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	c9 0c       	add	r12, r9
    1694:	d1 1c       	adc	r13, r1
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	c8 1a       	sub	r12, r24
    169a:	d1 08       	sbc	r13, r1
    169c:	ec 14       	cp	r14, r12
    169e:	fd 04       	cpc	r15, r13
    16a0:	48 f4       	brcc	.+18     	; 0x16b4 <get_axis_contact_size+0x74>
    16a2:	b7 01       	movw	r22, r14
    16a4:	6f 5f       	subi	r22, 0xFF	; 255
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	c5 01       	movw	r24, r10
    16aa:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    16ae:	18 16       	cp	r1, r24
    16b0:	19 06       	cpc	r1, r25
    16b2:	14 f0       	brlt	.+4      	; 0x16b8 <get_axis_contact_size+0x78>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	80 17       	cp	r24, r16
    16ba:	91 07       	cpc	r25, r17
    16bc:	08 f4       	brcc	.+2      	; 0x16c0 <get_axis_contact_size+0x80>
    16be:	c8 01       	movw	r24, r16
    16c0:	8c 0f       	add	r24, r28
    16c2:	9d 1f       	adc	r25, r29
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10
    16d8:	9f 90       	pop	r9
    16da:	08 95       	ret

000016dc <get_interpolated_position.isra.0>:
    16dc:	5f 92       	push	r5
    16de:	6f 92       	push	r6
    16e0:	7f 92       	push	r7
    16e2:	8f 92       	push	r8
    16e4:	9f 92       	push	r9
    16e6:	af 92       	push	r10
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	4b 01       	movw	r8, r22
    16fc:	64 2e       	mov	r6, r20
    16fe:	e9 01       	movw	r28, r18
    1700:	fc 01       	movw	r30, r24
    1702:	a3 84       	ldd	r10, Z+11	; 0x0b
    1704:	b4 84       	ldd	r11, Z+12	; 0x0c
    1706:	76 80       	ldd	r7, Z+6	; 0x06
    1708:	57 2c       	mov	r5, r7
    170a:	52 94       	swap	r5
    170c:	7f e0       	ldi	r23, 0x0F	; 15
    170e:	57 22       	and	r5, r23
    1710:	b9 01       	movw	r22, r18
    1712:	c5 01       	movw	r24, r10
    1714:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    1718:	18 16       	cp	r1, r24
    171a:	19 06       	cpc	r1, r25
    171c:	14 f4       	brge	.+4      	; 0x1722 <get_interpolated_position.isra.0+0x46>
    171e:	8c 01       	movw	r16, r24
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <get_interpolated_position.isra.0+0x4a>
    1722:	00 e0       	ldi	r16, 0x00	; 0
    1724:	10 e0       	ldi	r17, 0x00	; 0
    1726:	c8 15       	cp	r28, r8
    1728:	d9 05       	cpc	r29, r9
    172a:	59 f0       	breq	.+22     	; 0x1742 <get_interpolated_position.isra.0+0x66>
    172c:	be 01       	movw	r22, r28
    172e:	61 50       	subi	r22, 0x01	; 1
    1730:	71 09       	sbc	r23, r1
    1732:	c5 01       	movw	r24, r10
    1734:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    1738:	18 16       	cp	r1, r24
    173a:	19 06       	cpc	r1, r25
    173c:	14 f4       	brge	.+4      	; 0x1742 <get_interpolated_position.isra.0+0x66>
    173e:	7c 01       	movw	r14, r24
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <get_interpolated_position.isra.0+0x6a>
    1742:	e1 2c       	mov	r14, r1
    1744:	f1 2c       	mov	r15, r1
    1746:	c6 2c       	mov	r12, r6
    1748:	d1 2c       	mov	r13, r1
    174a:	c4 01       	movw	r24, r8
    174c:	8c 0d       	add	r24, r12
    174e:	9d 1d       	adc	r25, r13
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	c8 17       	cp	r28, r24
    1754:	d9 07       	cpc	r29, r25
    1756:	59 f0       	breq	.+22     	; 0x176e <get_interpolated_position.isra.0+0x92>
    1758:	be 01       	movw	r22, r28
    175a:	6f 5f       	subi	r22, 0xFF	; 255
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	c5 01       	movw	r24, r10
    1760:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    1764:	18 16       	cp	r1, r24
    1766:	19 06       	cpc	r1, r25
    1768:	14 f4       	brge	.+4      	; 0x176e <get_interpolated_position.isra.0+0x92>
    176a:	9c 01       	movw	r18, r24
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <get_interpolated_position.isra.0+0x96>
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	c8 19       	sub	r28, r8
    1774:	d9 09       	sbc	r29, r9
    1776:	dc 2f       	mov	r29, r28
    1778:	cc 27       	eor	r28, r28
    177a:	d2 95       	swap	r29
    177c:	d0 7f       	andi	r29, 0xF0	; 240
    177e:	4e 01       	movw	r8, r28
    1780:	a1 2c       	mov	r10, r1
    1782:	b1 2c       	mov	r11, r1
    1784:	e2 16       	cp	r14, r18
    1786:	f3 06       	cpc	r15, r19
    1788:	68 f0       	brcs	.+26     	; 0x17a4 <get_interpolated_position.isra.0+0xc8>
    178a:	c8 01       	movw	r24, r16
    178c:	82 1b       	sub	r24, r18
    178e:	93 0b       	sbc	r25, r19
    1790:	bc 01       	movw	r22, r24
    1792:	62 1b       	sub	r22, r18
    1794:	73 0b       	sbc	r23, r19
    1796:	6e 0d       	add	r22, r14
    1798:	7f 1d       	adc	r23, r15
    179a:	4c e0       	ldi	r20, 0x0C	; 12
    179c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <divide>
    17a0:	90 51       	subi	r25, 0x10	; 16
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <get_interpolated_position.isra.0+0xe4>
    17a4:	c7 01       	movw	r24, r14
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	b8 01       	movw	r22, r16
    17ac:	68 1b       	sub	r22, r24
    17ae:	79 0b       	sbc	r23, r25
    17b0:	62 0f       	add	r22, r18
    17b2:	73 1f       	adc	r23, r19
    17b4:	4c e0       	ldi	r20, 0x0C	; 12
    17b6:	c9 01       	movw	r24, r18
    17b8:	8e 19       	sub	r24, r14
    17ba:	9f 09       	sbc	r25, r15
    17bc:	0e 94 b3 0a 	call	0x1566	; 0x1566 <divide>
    17c0:	09 2e       	mov	r0, r25
    17c2:	00 0c       	add	r0, r0
    17c4:	aa 0b       	sbc	r26, r26
    17c6:	bb 0b       	sbc	r27, r27
    17c8:	88 0d       	add	r24, r8
    17ca:	99 1d       	adc	r25, r9
    17cc:	aa 1d       	adc	r26, r10
    17ce:	bb 1d       	adc	r27, r11
    17d0:	38 2f       	mov	r19, r24
    17d2:	29 2f       	mov	r18, r25
    17d4:	f2 e0       	ldi	r31, 0x02	; 2
    17d6:	f6 15       	cp	r31, r6
    17d8:	40 f4       	brcc	.+16     	; 0x17ea <get_interpolated_position.isra.0+0x10e>
    17da:	b6 01       	movw	r22, r12
    17dc:	61 50       	subi	r22, 0x01	; 1
    17de:	71 09       	sbc	r23, r1
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <divide>
    17e6:	38 2f       	mov	r19, r24
    17e8:	29 2f       	mov	r18, r25
    17ea:	83 2f       	mov	r24, r19
    17ec:	92 2f       	mov	r25, r18
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	20 e1       	ldi	r18, 0x10	; 16
    17f2:	92 07       	cpc	r25, r18
    17f4:	10 f0       	brcs	.+4      	; 0x17fa <get_interpolated_position.isra.0+0x11e>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e1       	ldi	r25, 0x10	; 16
    17fa:	27 2d       	mov	r18, r7
    17fc:	2f 70       	andi	r18, 0x0F	; 15
    17fe:	a9 f0       	breq	.+42     	; 0x182a <get_interpolated_position.isra.0+0x14e>
    1800:	48 e2       	ldi	r20, 0x28	; 40
    1802:	24 9f       	mul	r18, r20
    1804:	90 01       	movw	r18, r0
    1806:	11 24       	eor	r1, r1
    1808:	82 17       	cp	r24, r18
    180a:	93 07       	cpc	r25, r19
    180c:	18 f0       	brcs	.+6      	; 0x1814 <get_interpolated_position.isra.0+0x138>
    180e:	82 1b       	sub	r24, r18
    1810:	93 0b       	sbc	r25, r19
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <get_interpolated_position.isra.0+0x13c>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	22 0f       	add	r18, r18
    181a:	33 1f       	adc	r19, r19
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e1       	ldi	r23, 0x10	; 16
    1820:	62 1b       	sub	r22, r18
    1822:	73 0b       	sbc	r23, r19
    1824:	4c e0       	ldi	r20, 0x0C	; 12
    1826:	0e 94 b3 0a 	call	0x1566	; 0x1566 <divide>
    182a:	81 15       	cp	r24, r1
    182c:	e0 e1       	ldi	r30, 0x10	; 16
    182e:	9e 07       	cpc	r25, r30
    1830:	10 f0       	brcs	.+4      	; 0x1836 <get_interpolated_position.isra.0+0x15a>
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	9f e0       	ldi	r25, 0x0F	; 15
    1836:	2c e0       	ldi	r18, 0x0C	; 12
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	25 19       	sub	r18, r5
    183c:	31 09       	sbc	r19, r1
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <get_interpolated_position.isra.0+0x168>
    1840:	96 95       	lsr	r25
    1842:	87 95       	ror	r24
    1844:	2a 95       	dec	r18
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <get_interpolated_position.isra.0+0x164>
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	5f 90       	pop	r5
    1866:	08 95       	ret

00001868 <qtm_surface_cs_process>:
    1868:	2f 92       	push	r2
    186a:	3f 92       	push	r3
    186c:	4f 92       	push	r4
    186e:	5f 92       	push	r5
    1870:	6f 92       	push	r6
    1872:	7f 92       	push	r7
    1874:	8f 92       	push	r8
    1876:	9f 92       	push	r9
    1878:	af 92       	push	r10
    187a:	bf 92       	push	r11
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	28 97       	sbiw	r28, 0x08	; 8
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	09 f4       	brne	.+2      	; 0x189c <qtm_surface_cs_process+0x34>
    189a:	00 c1       	rjmp	.+512    	; 0x1a9c <qtm_surface_cs_process+0x234>
    189c:	dc 01       	movw	r26, r24
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	0d 91       	ld	r16, X+
    18a2:	1c 91       	ld	r17, X
    18a4:	13 97       	sbiw	r26, 0x03	; 3
    18a6:	f8 01       	movw	r30, r16
    18a8:	26 81       	ldd	r18, Z+6	; 0x06
    18aa:	20 3d       	cpi	r18, 0xD0	; 208
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <qtm_surface_cs_process+0x48>
    18ae:	f4 c0       	rjmp	.+488    	; 0x1a98 <qtm_surface_cs_process+0x230>
    18b0:	2d 91       	ld	r18, X+
    18b2:	3c 91       	ld	r19, X
    18b4:	2f 83       	std	Y+7, r18	; 0x07
    18b6:	38 87       	std	Y+8, r19	; 0x08
    18b8:	23 2b       	or	r18, r19
    18ba:	09 f4       	brne	.+2      	; 0x18be <qtm_surface_cs_process+0x56>
    18bc:	ef c0       	rjmp	.+478    	; 0x1a9c <qtm_surface_cs_process+0x234>
    18be:	01 15       	cp	r16, r1
    18c0:	11 05       	cpc	r17, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <qtm_surface_cs_process+0x5e>
    18c4:	eb c0       	rjmp	.+470    	; 0x1a9c <qtm_surface_cs_process+0x234>
    18c6:	43 84       	ldd	r4, Z+11	; 0x0b
    18c8:	54 84       	ldd	r5, Z+12	; 0x0c
    18ca:	41 14       	cp	r4, r1
    18cc:	51 04       	cpc	r5, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <qtm_surface_cs_process+0x6a>
    18d0:	e5 c0       	rjmp	.+458    	; 0x1a9c <qtm_surface_cs_process+0x234>
    18d2:	32 81       	ldd	r19, Z+2	; 0x02
    18d4:	3b 83       	std	Y+3, r19	; 0x03
    18d6:	c0 80       	ld	r12, Z
    18d8:	d1 80       	ldd	r13, Z+1	; 0x01
    18da:	c6 01       	movw	r24, r12
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	a6 01       	movw	r20, r12
    18e0:	43 0f       	add	r20, r19
    18e2:	51 1d       	adc	r21, r1
    18e4:	49 83       	std	Y+1, r20	; 0x01
    18e6:	5a 83       	std	Y+2, r21	; 0x02
    18e8:	36 e0       	ldi	r19, 0x06	; 6
    18ea:	49 81       	ldd	r20, Y+1	; 0x01
    18ec:	5a 81       	ldd	r21, Y+2	; 0x02
    18ee:	84 17       	cp	r24, r20
    18f0:	95 07       	cpc	r25, r21
    18f2:	80 f4       	brcc	.+32     	; 0x1914 <qtm_surface_cs_process+0xac>
    18f4:	38 9f       	mul	r19, r24
    18f6:	f0 01       	movw	r30, r0
    18f8:	39 9f       	mul	r19, r25
    18fa:	f0 0d       	add	r31, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	e4 0d       	add	r30, r4
    1900:	f5 1d       	adc	r31, r5
    1902:	60 81       	ld	r22, Z
    1904:	65 38       	cpi	r22, 0x85	; 133
    1906:	11 f0       	breq	.+4      	; 0x190c <qtm_surface_cs_process+0xa4>
    1908:	ac 01       	movw	r20, r24
    190a:	01 c0       	rjmp	.+2      	; 0x190e <qtm_surface_cs_process+0xa6>
    190c:	21 e0       	ldi	r18, 0x01	; 1
    190e:	ca 01       	movw	r24, r20
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	eb cf       	rjmp	.-42     	; 0x18ea <qtm_surface_cs_process+0x82>
    1914:	22 23       	and	r18, r18
    1916:	39 f0       	breq	.+14     	; 0x1926 <qtm_surface_cs_process+0xbe>
    1918:	46 01       	movw	r8, r12
    191a:	aa 24       	eor	r10, r10
    191c:	aa 94       	dec	r10
    191e:	ba 2c       	mov	r11, r10
    1920:	e1 2c       	mov	r14, r1
    1922:	f1 2c       	mov	r15, r1
    1924:	34 c0       	rjmp	.+104    	; 0x198e <qtm_surface_cs_process+0x126>
    1926:	d8 01       	movw	r26, r16
    1928:	15 96       	adiw	r26, 0x05	; 5
    192a:	3c 91       	ld	r19, X
    192c:	15 97       	sbiw	r26, 0x05	; 5
    192e:	13 96       	adiw	r26, 0x03	; 3
    1930:	8d 91       	ld	r24, X+
    1932:	9c 91       	ld	r25, X
    1934:	14 97       	sbiw	r26, 0x04	; 4
    1936:	ac 01       	movw	r20, r24
    1938:	43 0f       	add	r20, r19
    193a:	51 1d       	adc	r21, r1
    193c:	36 e0       	ldi	r19, 0x06	; 6
    193e:	ba 01       	movw	r22, r20
    1940:	84 17       	cp	r24, r20
    1942:	95 07       	cpc	r25, r21
    1944:	80 f4       	brcc	.+32     	; 0x1966 <qtm_surface_cs_process+0xfe>
    1946:	38 9f       	mul	r19, r24
    1948:	f0 01       	movw	r30, r0
    194a:	39 9f       	mul	r19, r25
    194c:	f0 0d       	add	r31, r0
    194e:	11 24       	eor	r1, r1
    1950:	e4 0d       	add	r30, r4
    1952:	f5 1d       	adc	r31, r5
    1954:	e0 81       	ld	r30, Z
    1956:	e5 38       	cpi	r30, 0x85	; 133
    1958:	11 f0       	breq	.+4      	; 0x195e <qtm_surface_cs_process+0xf6>
    195a:	bc 01       	movw	r22, r24
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <qtm_surface_cs_process+0xf8>
    195e:	21 e0       	ldi	r18, 0x01	; 1
    1960:	cb 01       	movw	r24, r22
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	ec cf       	rjmp	.-40     	; 0x193e <qtm_surface_cs_process+0xd6>
    1966:	21 11       	cpse	r18, r1
    1968:	d7 cf       	rjmp	.-82     	; 0x1918 <qtm_surface_cs_process+0xb0>
    196a:	ef 81       	ldd	r30, Y+7	; 0x07
    196c:	f8 85       	ldd	r31, Y+8	; 0x08
    196e:	80 81       	ld	r24, Z
    1970:	80 fd       	sbrc	r24, 0
    1972:	d2 cf       	rjmp	.-92     	; 0x1918 <qtm_surface_cs_process+0xb0>
    1974:	11 86       	std	Z+9, r1	; 0x09
    1976:	12 86       	std	Z+10, r1	; 0x0a
    1978:	93 c0       	rjmp	.+294    	; 0x1aa0 <qtm_surface_cs_process+0x238>
    197a:	b4 01       	movw	r22, r8
    197c:	c2 01       	movw	r24, r4
    197e:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    1982:	18 16       	cp	r1, r24
    1984:	19 06       	cpc	r1, r25
    1986:	4c f0       	brlt	.+18     	; 0x199a <qtm_surface_cs_process+0x132>
    1988:	ff ef       	ldi	r31, 0xFF	; 255
    198a:	8f 1a       	sub	r8, r31
    198c:	9f 0a       	sbc	r9, r31
    198e:	29 81       	ldd	r18, Y+1	; 0x01
    1990:	3a 81       	ldd	r19, Y+2	; 0x02
    1992:	82 16       	cp	r8, r18
    1994:	93 06       	cpc	r9, r19
    1996:	88 f3       	brcs	.-30     	; 0x197a <qtm_surface_cs_process+0x112>
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <qtm_surface_cs_process+0x13e>
    199a:	e8 16       	cp	r14, r24
    199c:	f9 06       	cpc	r15, r25
    199e:	a4 f7       	brge	.-24     	; 0x1988 <qtm_surface_cs_process+0x120>
    19a0:	54 01       	movw	r10, r8
    19a2:	7c 01       	movw	r14, r24
    19a4:	f1 cf       	rjmp	.-30     	; 0x1988 <qtm_surface_cs_process+0x120>
    19a6:	d8 01       	movw	r26, r16
    19a8:	15 96       	adiw	r26, 0x05	; 5
    19aa:	bc 91       	ld	r27, X
    19ac:	bc 83       	std	Y+4, r27	; 0x04
    19ae:	f8 01       	movw	r30, r16
    19b0:	63 80       	ldd	r6, Z+3	; 0x03
    19b2:	74 80       	ldd	r7, Z+4	; 0x04
    19b4:	13 01       	movw	r2, r6
    19b6:	88 24       	eor	r8, r8
    19b8:	8a 94       	dec	r8
    19ba:	98 2c       	mov	r9, r8
    19bc:	e1 2c       	mov	r14, r1
    19be:	f1 2c       	mov	r15, r1
    19c0:	93 01       	movw	r18, r6
    19c2:	2b 0f       	add	r18, r27
    19c4:	31 1d       	adc	r19, r1
    19c6:	2d 83       	std	Y+5, r18	; 0x05
    19c8:	3e 83       	std	Y+6, r19	; 0x06
    19ca:	6d 81       	ldd	r22, Y+5	; 0x05
    19cc:	7e 81       	ldd	r23, Y+6	; 0x06
    19ce:	26 16       	cp	r2, r22
    19d0:	37 06       	cpc	r3, r23
    19d2:	80 f4       	brcc	.+32     	; 0x19f4 <qtm_surface_cs_process+0x18c>
    19d4:	b1 01       	movw	r22, r2
    19d6:	c2 01       	movw	r24, r4
    19d8:	0e 94 0d 0b 	call	0x161a	; 0x161a <get_key_delta>
    19dc:	18 16       	cp	r1, r24
    19de:	19 06       	cpc	r1, r25
    19e0:	2c f4       	brge	.+10     	; 0x19ec <qtm_surface_cs_process+0x184>
    19e2:	e8 16       	cp	r14, r24
    19e4:	f9 06       	cpc	r15, r25
    19e6:	14 f4       	brge	.+4      	; 0x19ec <qtm_surface_cs_process+0x184>
    19e8:	41 01       	movw	r8, r2
    19ea:	7c 01       	movw	r14, r24
    19ec:	5f ef       	ldi	r21, 0xFF	; 255
    19ee:	25 1a       	sub	r2, r21
    19f0:	35 0a       	sbc	r3, r21
    19f2:	eb cf       	rjmp	.-42     	; 0x19ca <qtm_surface_cs_process+0x162>
    19f4:	7f ef       	ldi	r23, 0xFF	; 255
    19f6:	87 16       	cp	r8, r23
    19f8:	97 06       	cpc	r9, r23
    19fa:	21 f0       	breq	.+8      	; 0x1a04 <qtm_surface_cs_process+0x19c>
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	a8 16       	cp	r10, r24
    1a00:	b8 06       	cpc	r11, r24
    1a02:	39 f4       	brne	.+14     	; 0x1a12 <qtm_surface_cs_process+0x1aa>
    1a04:	af 81       	ldd	r26, Y+7	; 0x07
    1a06:	b8 85       	ldd	r27, Y+8	; 0x08
    1a08:	19 96       	adiw	r26, 0x09	; 9
    1a0a:	1d 92       	st	X+, r1
    1a0c:	1c 92       	st	X, r1
    1a0e:	1a 97       	sbiw	r26, 0x0a	; 10
    1a10:	47 c0       	rjmp	.+142    	; 0x1aa0 <qtm_surface_cs_process+0x238>
    1a12:	ac 14       	cp	r10, r12
    1a14:	bd 04       	cpc	r11, r13
    1a16:	68 f0       	brcs	.+26     	; 0x1a32 <qtm_surface_cs_process+0x1ca>
    1a18:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1c:	ae 16       	cp	r10, r30
    1a1e:	bf 06       	cpc	r11, r31
    1a20:	40 f4       	brcc	.+16     	; 0x1a32 <qtm_surface_cs_process+0x1ca>
    1a22:	95 01       	movw	r18, r10
    1a24:	4b 81       	ldd	r20, Y+3	; 0x03
    1a26:	b6 01       	movw	r22, r12
    1a28:	c2 01       	movw	r24, r4
    1a2a:	0e 94 20 0b 	call	0x1640	; 0x1640 <get_axis_contact_size>
    1a2e:	7c 01       	movw	r14, r24
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <qtm_surface_cs_process+0x1ce>
    1a32:	e1 2c       	mov	r14, r1
    1a34:	f1 2c       	mov	r15, r1
    1a36:	86 14       	cp	r8, r6
    1a38:	97 04       	cpc	r9, r7
    1a3a:	70 f0       	brcs	.+28     	; 0x1a58 <qtm_surface_cs_process+0x1f0>
    1a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a40:	82 16       	cp	r8, r18
    1a42:	93 06       	cpc	r9, r19
    1a44:	48 f4       	brcc	.+18     	; 0x1a58 <qtm_surface_cs_process+0x1f0>
    1a46:	94 01       	movw	r18, r8
    1a48:	4c 81       	ldd	r20, Y+4	; 0x04
    1a4a:	b3 01       	movw	r22, r6
    1a4c:	c2 01       	movw	r24, r4
    1a4e:	0e 94 20 0b 	call	0x1640	; 0x1640 <get_axis_contact_size>
    1a52:	8e 0d       	add	r24, r14
    1a54:	9f 1d       	adc	r25, r15
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <qtm_surface_cs_process+0x1f4>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	af 81       	ldd	r26, Y+7	; 0x07
    1a5e:	b8 85       	ldd	r27, Y+8	; 0x08
    1a60:	2c 91       	ld	r18, X
    1a62:	32 2f       	mov	r19, r18
    1a64:	31 70       	andi	r19, 0x01	; 1
    1a66:	20 ff       	sbrs	r18, 0
    1a68:	0a c0       	rjmp	.+20     	; 0x1a7e <qtm_surface_cs_process+0x216>
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	41 f0       	breq	.+16     	; 0x1a7e <qtm_surface_cs_process+0x216>
    1a6e:	19 96       	adiw	r26, 0x09	; 9
    1a70:	ed 90       	ld	r14, X+
    1a72:	fc 90       	ld	r15, X
    1a74:	1a 97       	sbiw	r26, 0x0a	; 10
    1a76:	8e 0d       	add	r24, r14
    1a78:	9f 1d       	adc	r25, r15
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	ef 81       	ldd	r30, Y+7	; 0x07
    1a80:	f8 85       	ldd	r31, Y+8	; 0x08
    1a82:	81 87       	std	Z+9, r24	; 0x09
    1a84:	92 87       	std	Z+10, r25	; 0x0a
    1a86:	d8 01       	movw	r26, r16
    1a88:	19 96       	adiw	r26, 0x09	; 9
    1a8a:	4d 91       	ld	r20, X+
    1a8c:	5c 91       	ld	r21, X
    1a8e:	1a 97       	sbiw	r26, 0x0a	; 10
    1a90:	84 17       	cp	r24, r20
    1a92:	95 07       	cpc	r25, r21
    1a94:	28 f0       	brcs	.+10     	; 0x1aa0 <qtm_surface_cs_process+0x238>
    1a96:	0a c0       	rjmp	.+20     	; 0x1aac <qtm_surface_cs_process+0x244>
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	59 c1       	rjmp	.+690    	; 0x1d4e <qtm_surface_cs_process+0x4e6>
    1a9c:	8b e0       	ldi	r24, 0x0B	; 11
    1a9e:	57 c1       	rjmp	.+686    	; 0x1d4e <qtm_surface_cs_process+0x4e6>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	ef 81       	ldd	r30, Y+7	; 0x07
    1aa4:	f8 85       	ldd	r31, Y+8	; 0x08
    1aa6:	80 83       	st	Z, r24
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	51 c1       	rjmp	.+674    	; 0x1d4e <qtm_surface_cs_process+0x4e6>
    1aac:	31 11       	cpse	r19, r1
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <qtm_surface_cs_process+0x250>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	80 93 49 41 	sts	0x4149, r24	; 0x804149 <new_contact_detected>
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <qtm_surface_cs_process+0x254>
    1ab8:	10 92 49 41 	sts	0x4149, r1	; 0x804149 <new_contact_detected>
    1abc:	f8 01       	movw	r30, r16
    1abe:	42 81       	ldd	r20, Z+2	; 0x02
    1ac0:	35 80       	ldd	r3, Z+5	; 0x05
    1ac2:	80 91 49 41 	lds	r24, 0x4149	; 0x804149 <new_contact_detected>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	7b c0       	rjmp	.+246    	; 0x1bc0 <qtm_surface_cs_process+0x358>
    1aca:	80 85       	ldd	r24, Z+8	; 0x08
    1acc:	83 70       	andi	r24, 0x03	; 3
    1ace:	28 2e       	mov	r2, r24
    1ad0:	b1 f4       	brne	.+44     	; 0x1afe <qtm_surface_cs_process+0x296>
    1ad2:	95 01       	movw	r18, r10
    1ad4:	b6 01       	movw	r22, r12
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <get_interpolated_position.isra.0>
    1adc:	af 81       	ldd	r26, Y+7	; 0x07
    1ade:	b8 85       	ldd	r27, Y+8	; 0x08
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	8d 93       	st	X+, r24
    1ae4:	9c 93       	st	X, r25
    1ae6:	12 97       	sbiw	r26, 0x02	; 2
    1ae8:	94 01       	movw	r18, r8
    1aea:	43 2d       	mov	r20, r3
    1aec:	b3 01       	movw	r22, r6
    1aee:	c8 01       	movw	r24, r16
    1af0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <get_interpolated_position.isra.0>
    1af4:	ef 81       	ldd	r30, Y+7	; 0x07
    1af6:	f8 85       	ldd	r31, Y+8	; 0x08
    1af8:	85 83       	std	Z+5, r24	; 0x05
    1afa:	96 83       	std	Z+6, r25	; 0x06
    1afc:	99 c0       	rjmp	.+306    	; 0x1c30 <qtm_surface_cs_process+0x3c8>
    1afe:	af 81       	ldd	r26, Y+7	; 0x07
    1b00:	b8 85       	ldd	r27, Y+8	; 0x08
    1b02:	11 96       	adiw	r26, 0x01	; 1
    1b04:	ed 90       	ld	r14, X+
    1b06:	fc 90       	ld	r15, X
    1b08:	12 97       	sbiw	r26, 0x02	; 2
    1b0a:	15 96       	adiw	r26, 0x05	; 5
    1b0c:	4d 90       	ld	r4, X+
    1b0e:	5c 90       	ld	r5, X
    1b10:	16 97       	sbiw	r26, 0x06	; 6
    1b12:	95 01       	movw	r18, r10
    1b14:	b6 01       	movw	r22, r12
    1b16:	c8 01       	movw	r24, r16
    1b18:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <get_interpolated_position.isra.0>
    1b1c:	6c 01       	movw	r12, r24
    1b1e:	94 01       	movw	r18, r8
    1b20:	43 2d       	mov	r20, r3
    1b22:	b3 01       	movw	r22, r6
    1b24:	c8 01       	movw	r24, r16
    1b26:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <get_interpolated_position.isra.0>
    1b2a:	a7 01       	movw	r20, r14
    1b2c:	4c 0d       	add	r20, r12
    1b2e:	5d 1d       	adc	r21, r13
    1b30:	92 01       	movw	r18, r4
    1b32:	28 0f       	add	r18, r24
    1b34:	39 1f       	adc	r19, r25
    1b36:	b1 e0       	ldi	r27, 0x01	; 1
    1b38:	2b 12       	cpse	r2, r27
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <qtm_surface_cs_process+0x2e2>
    1b3c:	b6 01       	movw	r22, r12
    1b3e:	66 0f       	add	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	46 0f       	add	r20, r22
    1b44:	57 1f       	adc	r21, r23
    1b46:	bc 01       	movw	r22, r24
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <qtm_surface_cs_process+0x2fe>
    1b4a:	e2 e0       	ldi	r30, 0x02	; 2
    1b4c:	2e 12       	cpse	r2, r30
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <qtm_surface_cs_process+0x2f2>
    1b50:	44 0f       	add	r20, r20
    1b52:	55 1f       	adc	r21, r21
    1b54:	22 0f       	add	r18, r18
    1b56:	33 1f       	adc	r19, r19
    1b58:	0a c0       	rjmp	.+20     	; 0x1b6e <qtm_surface_cs_process+0x306>
    1b5a:	b7 01       	movw	r22, r14
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	46 0f       	add	r20, r22
    1b62:	57 1f       	adc	r21, r23
    1b64:	b2 01       	movw	r22, r4
    1b66:	66 0f       	add	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	26 0f       	add	r18, r22
    1b6c:	37 1f       	adc	r19, r23
    1b6e:	ec 14       	cp	r14, r12
    1b70:	fd 04       	cpc	r15, r13
    1b72:	18 f4       	brcc	.+6      	; 0x1b7a <qtm_surface_cs_process+0x312>
    1b74:	4e 5f       	subi	r20, 0xFE	; 254
    1b76:	5f 4f       	sbci	r21, 0xFF	; 255
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <qtm_surface_cs_process+0x31c>
    1b7a:	ce 14       	cp	r12, r14
    1b7c:	df 04       	cpc	r13, r15
    1b7e:	10 f4       	brcc	.+4      	; 0x1b84 <qtm_surface_cs_process+0x31c>
    1b80:	41 50       	subi	r20, 0x01	; 1
    1b82:	51 09       	sbc	r21, r1
    1b84:	48 16       	cp	r4, r24
    1b86:	59 06       	cpc	r5, r25
    1b88:	18 f4       	brcc	.+6      	; 0x1b90 <qtm_surface_cs_process+0x328>
    1b8a:	2e 5f       	subi	r18, 0xFE	; 254
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	05 c0       	rjmp	.+10     	; 0x1b9a <qtm_surface_cs_process+0x332>
    1b90:	84 15       	cp	r24, r4
    1b92:	95 05       	cpc	r25, r5
    1b94:	10 f4       	brcc	.+4      	; 0x1b9a <qtm_surface_cs_process+0x332>
    1b96:	21 50       	subi	r18, 0x01	; 1
    1b98:	31 09       	sbc	r19, r1
    1b9a:	56 95       	lsr	r21
    1b9c:	47 95       	ror	r20
    1b9e:	56 95       	lsr	r21
    1ba0:	47 95       	ror	r20
    1ba2:	af 81       	ldd	r26, Y+7	; 0x07
    1ba4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ba6:	11 96       	adiw	r26, 0x01	; 1
    1ba8:	4d 93       	st	X+, r20
    1baa:	5c 93       	st	X, r21
    1bac:	12 97       	sbiw	r26, 0x02	; 2
    1bae:	36 95       	lsr	r19
    1bb0:	27 95       	ror	r18
    1bb2:	36 95       	lsr	r19
    1bb4:	27 95       	ror	r18
    1bb6:	15 96       	adiw	r26, 0x05	; 5
    1bb8:	2d 93       	st	X+, r18
    1bba:	3c 93       	st	X, r19
    1bbc:	16 97       	sbiw	r26, 0x06	; 6
    1bbe:	38 c0       	rjmp	.+112    	; 0x1c30 <qtm_surface_cs_process+0x3c8>
    1bc0:	95 01       	movw	r18, r10
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <get_interpolated_position.isra.0>
    1bca:	7c 01       	movw	r14, r24
    1bcc:	ef 81       	ldd	r30, Y+7	; 0x07
    1bce:	f8 85       	ldd	r31, Y+8	; 0x08
    1bd0:	81 83       	std	Z+1, r24	; 0x01
    1bd2:	92 83       	std	Z+2, r25	; 0x02
    1bd4:	94 01       	movw	r18, r8
    1bd6:	43 2d       	mov	r20, r3
    1bd8:	b3 01       	movw	r22, r6
    1bda:	c8 01       	movw	r24, r16
    1bdc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <get_interpolated_position.isra.0>
    1be0:	af 81       	ldd	r26, Y+7	; 0x07
    1be2:	b8 85       	ldd	r27, Y+8	; 0x08
    1be4:	15 96       	adiw	r26, 0x05	; 5
    1be6:	8d 93       	st	X+, r24
    1be8:	9c 93       	st	X, r25
    1bea:	16 97       	sbiw	r26, 0x06	; 6
    1bec:	13 96       	adiw	r26, 0x03	; 3
    1bee:	ed 92       	st	X+, r14
    1bf0:	fc 92       	st	X, r15
    1bf2:	14 97       	sbiw	r26, 0x04	; 4
    1bf4:	17 96       	adiw	r26, 0x07	; 7
    1bf6:	8d 93       	st	X+, r24
    1bf8:	9c 93       	st	X, r25
    1bfa:	18 97       	sbiw	r26, 0x08	; 8
    1bfc:	e0 92 4a 41 	sts	0x414A, r14	; 0x80414a <median_filter_data_buffer>
    1c00:	f0 92 4b 41 	sts	0x414B, r15	; 0x80414b <median_filter_data_buffer+0x1>
    1c04:	e0 92 4c 41 	sts	0x414C, r14	; 0x80414c <median_filter_data_buffer+0x2>
    1c08:	f0 92 4d 41 	sts	0x414D, r15	; 0x80414d <median_filter_data_buffer+0x3>
    1c0c:	e0 92 4e 41 	sts	0x414E, r14	; 0x80414e <median_filter_data_buffer+0x4>
    1c10:	f0 92 4f 41 	sts	0x414F, r15	; 0x80414f <median_filter_data_buffer+0x5>
    1c14:	80 93 50 41 	sts	0x4150, r24	; 0x804150 <median_filter_data_buffer+0x6>
    1c18:	90 93 51 41 	sts	0x4151, r25	; 0x804151 <median_filter_data_buffer+0x7>
    1c1c:	80 93 52 41 	sts	0x4152, r24	; 0x804152 <median_filter_data_buffer+0x8>
    1c20:	90 93 53 41 	sts	0x4153, r25	; 0x804153 <median_filter_data_buffer+0x9>
    1c24:	80 93 54 41 	sts	0x4154, r24	; 0x804154 <median_filter_data_buffer+0xa>
    1c28:	90 93 55 41 	sts	0x4155, r25	; 0x804155 <median_filter_data_buffer+0xb>
    1c2c:	81 e8       	ldi	r24, 0x81	; 129
    1c2e:	39 cf       	rjmp	.-398    	; 0x1aa2 <qtm_surface_cs_process+0x23a>
    1c30:	d8 01       	movw	r26, r16
    1c32:	18 96       	adiw	r26, 0x08	; 8
    1c34:	8c 91       	ld	r24, X
    1c36:	ef 81       	ldd	r30, Y+7	; 0x07
    1c38:	f8 85       	ldd	r31, Y+8	; 0x08
    1c3a:	61 81       	ldd	r22, Z+1	; 0x01
    1c3c:	72 81       	ldd	r23, Z+2	; 0x02
    1c3e:	f8 2f       	mov	r31, r24
    1c40:	f0 71       	andi	r31, 0x10	; 16
    1c42:	ef 2e       	mov	r14, r31
    1c44:	84 fd       	sbrc	r24, 4
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <qtm_surface_cs_process+0x3e4>
    1c48:	fb 01       	movw	r30, r22
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <qtm_surface_cs_process+0x3ec>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <median_filter_update>
    1c52:	fc 01       	movw	r30, r24
    1c54:	af 81       	ldd	r26, Y+7	; 0x07
    1c56:	b8 85       	ldd	r27, Y+8	; 0x08
    1c58:	13 96       	adiw	r26, 0x03	; 3
    1c5a:	2d 91       	ld	r18, X+
    1c5c:	3c 91       	ld	r19, X
    1c5e:	14 97       	sbiw	r26, 0x04	; 4
    1c60:	9c 91       	ld	r25, X
    1c62:	e2 17       	cp	r30, r18
    1c64:	f3 07       	cpc	r31, r19
    1c66:	b0 f4       	brcc	.+44     	; 0x1c94 <qtm_surface_cs_process+0x42c>
    1c68:	93 fd       	sbrc	r25, 3
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <qtm_surface_cs_process+0x41a>
    1c6c:	2e 1b       	sub	r18, r30
    1c6e:	3f 0b       	sbc	r19, r31
    1c70:	d8 01       	movw	r26, r16
    1c72:	17 96       	adiw	r26, 0x07	; 7
    1c74:	4c 91       	ld	r20, X
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	42 17       	cp	r20, r18
    1c7a:	53 07       	cpc	r21, r19
    1c7c:	10 f0       	brcs	.+4      	; 0x1c82 <qtm_surface_cs_process+0x41a>
    1c7e:	94 70       	andi	r25, 0x04	; 4
    1c80:	16 c0       	rjmp	.+44     	; 0x1cae <qtm_surface_cs_process+0x446>
    1c82:	af 81       	ldd	r26, Y+7	; 0x07
    1c84:	b8 85       	ldd	r27, Y+8	; 0x08
    1c86:	13 96       	adiw	r26, 0x03	; 3
    1c88:	ed 93       	st	X+, r30
    1c8a:	fc 93       	st	X, r31
    1c8c:	14 97       	sbiw	r26, 0x04	; 4
    1c8e:	9b e8       	ldi	r25, 0x8B	; 139
    1c90:	f9 2e       	mov	r15, r25
    1c92:	18 c0       	rjmp	.+48     	; 0x1cc4 <qtm_surface_cs_process+0x45c>
    1c94:	92 fd       	sbrc	r25, 2
    1c96:	0e c0       	rjmp	.+28     	; 0x1cb4 <qtm_surface_cs_process+0x44c>
    1c98:	af 01       	movw	r20, r30
    1c9a:	42 1b       	sub	r20, r18
    1c9c:	53 0b       	sbc	r21, r19
    1c9e:	d8 01       	movw	r26, r16
    1ca0:	17 96       	adiw	r26, 0x07	; 7
    1ca2:	2c 91       	ld	r18, X
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	24 17       	cp	r18, r20
    1ca8:	35 07       	cpc	r19, r21
    1caa:	20 f0       	brcs	.+8      	; 0x1cb4 <qtm_surface_cs_process+0x44c>
    1cac:	98 70       	andi	r25, 0x08	; 8
    1cae:	91 68       	ori	r25, 0x81	; 129
    1cb0:	f9 2e       	mov	r15, r25
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <qtm_surface_cs_process+0x45c>
    1cb4:	af 81       	ldd	r26, Y+7	; 0x07
    1cb6:	b8 85       	ldd	r27, Y+8	; 0x08
    1cb8:	13 96       	adiw	r26, 0x03	; 3
    1cba:	ed 93       	st	X+, r30
    1cbc:	fc 93       	st	X, r31
    1cbe:	14 97       	sbiw	r26, 0x04	; 4
    1cc0:	87 e8       	ldi	r24, 0x87	; 135
    1cc2:	f8 2e       	mov	r15, r24
    1cc4:	ef 81       	ldd	r30, Y+7	; 0x07
    1cc6:	f8 85       	ldd	r31, Y+8	; 0x08
    1cc8:	65 81       	ldd	r22, Z+5	; 0x05
    1cca:	76 81       	ldd	r23, Z+6	; 0x06
    1ccc:	e1 10       	cpse	r14, r1
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <qtm_surface_cs_process+0x46c>
    1cd0:	fb 01       	movw	r30, r22
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <qtm_surface_cs_process+0x474>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <median_filter_update>
    1cda:	fc 01       	movw	r30, r24
    1cdc:	af 81       	ldd	r26, Y+7	; 0x07
    1cde:	b8 85       	ldd	r27, Y+8	; 0x08
    1ce0:	17 96       	adiw	r26, 0x07	; 7
    1ce2:	2d 91       	ld	r18, X+
    1ce4:	3c 91       	ld	r19, X
    1ce6:	18 97       	sbiw	r26, 0x08	; 8
    1ce8:	9c 91       	ld	r25, X
    1cea:	e2 17       	cp	r30, r18
    1cec:	f3 07       	cpc	r31, r19
    1cee:	b0 f4       	brcc	.+44     	; 0x1d1c <qtm_surface_cs_process+0x4b4>
    1cf0:	95 fd       	sbrc	r25, 5
    1cf2:	0b c0       	rjmp	.+22     	; 0x1d0a <qtm_surface_cs_process+0x4a2>
    1cf4:	2e 1b       	sub	r18, r30
    1cf6:	3f 0b       	sbc	r19, r31
    1cf8:	d8 01       	movw	r26, r16
    1cfa:	17 96       	adiw	r26, 0x07	; 7
    1cfc:	4c 91       	ld	r20, X
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	42 17       	cp	r20, r18
    1d02:	53 07       	cpc	r21, r19
    1d04:	10 f0       	brcs	.+4      	; 0x1d0a <qtm_surface_cs_process+0x4a2>
    1d06:	90 71       	andi	r25, 0x10	; 16
    1d08:	16 c0       	rjmp	.+44     	; 0x1d36 <qtm_surface_cs_process+0x4ce>
    1d0a:	af 81       	ldd	r26, Y+7	; 0x07
    1d0c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d0e:	17 96       	adiw	r26, 0x07	; 7
    1d10:	ed 93       	st	X+, r30
    1d12:	fc 93       	st	X, r31
    1d14:	18 97       	sbiw	r26, 0x08	; 8
    1d16:	8f 2d       	mov	r24, r15
    1d18:	82 62       	ori	r24, 0x22	; 34
    1d1a:	c3 ce       	rjmp	.-634    	; 0x1aa2 <qtm_surface_cs_process+0x23a>
    1d1c:	94 fd       	sbrc	r25, 4
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <qtm_surface_cs_process+0x4d4>
    1d20:	af 01       	movw	r20, r30
    1d22:	42 1b       	sub	r20, r18
    1d24:	53 0b       	sbc	r21, r19
    1d26:	d8 01       	movw	r26, r16
    1d28:	17 96       	adiw	r26, 0x07	; 7
    1d2a:	2c 91       	ld	r18, X
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	24 17       	cp	r18, r20
    1d30:	35 07       	cpc	r19, r21
    1d32:	20 f0       	brcs	.+8      	; 0x1d3c <qtm_surface_cs_process+0x4d4>
    1d34:	90 72       	andi	r25, 0x20	; 32
    1d36:	89 2f       	mov	r24, r25
    1d38:	8f 29       	or	r24, r15
    1d3a:	b3 ce       	rjmp	.-666    	; 0x1aa2 <qtm_surface_cs_process+0x23a>
    1d3c:	af 81       	ldd	r26, Y+7	; 0x07
    1d3e:	b8 85       	ldd	r27, Y+8	; 0x08
    1d40:	17 96       	adiw	r26, 0x07	; 7
    1d42:	ed 93       	st	X+, r30
    1d44:	fc 93       	st	X, r31
    1d46:	18 97       	sbiw	r26, 0x08	; 8
    1d48:	8f 2d       	mov	r24, r15
    1d4a:	82 61       	ori	r24, 0x12	; 18
    1d4c:	aa ce       	rjmp	.-684    	; 0x1aa2 <qtm_surface_cs_process+0x23a>
    1d4e:	28 96       	adiw	r28, 0x08	; 8
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	cf 90       	pop	r12
    1d64:	bf 90       	pop	r11
    1d66:	af 90       	pop	r10
    1d68:	9f 90       	pop	r9
    1d6a:	8f 90       	pop	r8
    1d6c:	7f 90       	pop	r7
    1d6e:	6f 90       	pop	r6
    1d70:	5f 90       	pop	r5
    1d72:	4f 90       	pop	r4
    1d74:	3f 90       	pop	r3
    1d76:	2f 90       	pop	r2
    1d78:	08 95       	ret

00001d7a <qtm_init_surface_cs>:
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	91 f0       	breq	.+36     	; 0x1da2 <qtm_init_surface_cs+0x28>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	ed 91       	ld	r30, X+
    1d82:	fc 91       	ld	r31, X
    1d84:	30 97       	sbiw	r30, 0x00	; 0
    1d86:	69 f0       	breq	.+26     	; 0x1da2 <qtm_init_surface_cs+0x28>
    1d88:	10 82       	st	Z, r1
    1d8a:	11 82       	std	Z+1, r1	; 0x01
    1d8c:	12 82       	std	Z+2, r1	; 0x02
    1d8e:	13 82       	std	Z+3, r1	; 0x03
    1d90:	14 82       	std	Z+4, r1	; 0x04
    1d92:	15 82       	std	Z+5, r1	; 0x05
    1d94:	16 82       	std	Z+6, r1	; 0x06
    1d96:	17 82       	std	Z+7, r1	; 0x07
    1d98:	10 86       	std	Z+8, r1	; 0x08
    1d9a:	11 86       	std	Z+9, r1	; 0x09
    1d9c:	12 86       	std	Z+10, r1	; 0x0a
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	08 95       	ret
    1da2:	8b e0       	ldi	r24, 0x0B	; 11
    1da4:	08 95       	ret

00001da6 <charge_share_test>:
    1da6:	a0 91 6d 42 	lds	r26, 0x426D	; 0x80426d <qtm_acquisition_control_working_set_ptr>
    1daa:	b0 91 6e 42 	lds	r27, 0x426E	; 0x80426e <qtm_acquisition_control_working_set_ptr+0x1>
    1dae:	25 e0       	ldi	r18, 0x05	; 5
    1db0:	ac 01       	movw	r20, r24
    1db2:	24 9f       	mul	r18, r20
    1db4:	c0 01       	movw	r24, r0
    1db6:	25 9f       	mul	r18, r21
    1db8:	90 0d       	add	r25, r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	14 96       	adiw	r26, 0x04	; 4
    1dbe:	ed 91       	ld	r30, X+
    1dc0:	fc 91       	ld	r31, X
    1dc2:	15 97       	sbiw	r26, 0x05	; 5
    1dc4:	e8 0f       	add	r30, r24
    1dc6:	f9 1f       	adc	r31, r25
    1dc8:	81 81       	ldd	r24, Z+1	; 0x01
    1dca:	92 81       	ldd	r25, Z+2	; 0x02
    1dcc:	86 17       	cp	r24, r22
    1dce:	97 07       	cpc	r25, r23
    1dd0:	81 f1       	breq	.+96     	; 0x1e32 <charge_share_test+0x8c>
    1dd2:	86 17       	cp	r24, r22
    1dd4:	97 07       	cpc	r25, r23
    1dd6:	18 f4       	brcc	.+6      	; 0x1dde <charge_share_test+0x38>
    1dd8:	68 1b       	sub	r22, r24
    1dda:	79 0b       	sbc	r23, r25
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <charge_share_test+0x40>
    1dde:	9c 01       	movw	r18, r24
    1de0:	26 1b       	sub	r18, r22
    1de2:	37 0b       	sbc	r19, r23
    1de4:	b9 01       	movw	r22, r18
    1de6:	ed 91       	ld	r30, X+
    1de8:	fc 91       	ld	r31, X
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	80 34       	cpi	r24, 0x40	; 64
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <charge_share_test+0x4e>
    1df0:	76 95       	lsr	r23
    1df2:	67 95       	ror	r22
    1df4:	65 38       	cpi	r22, 0x85	; 133
    1df6:	71 05       	cpc	r23, r1
    1df8:	d0 f4       	brcc	.+52     	; 0x1e2e <charge_share_test+0x88>
    1dfa:	66 30       	cpi	r22, 0x06	; 6
    1dfc:	71 05       	cpc	r23, r1
    1dfe:	c8 f0       	brcs	.+50     	; 0x1e32 <charge_share_test+0x8c>
    1e00:	e3 81       	ldd	r30, Z+3	; 0x03
    1e02:	e0 73       	andi	r30, 0x30	; 48
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	f6 95       	lsr	r31
    1e0a:	e7 95       	ror	r30
    1e0c:	8a 95       	dec	r24
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <charge_share_test+0x62>
    1e10:	e4 53       	subi	r30, 0x34	; 52
    1e12:	ff 4b       	sbci	r31, 0xBF	; 191
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	68 9f       	mul	r22, r24
    1e1a:	90 01       	movw	r18, r0
    1e1c:	69 9f       	mul	r22, r25
    1e1e:	30 0d       	add	r19, r0
    1e20:	78 9f       	mul	r23, r24
    1e22:	30 0d       	add	r19, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	23 2b       	or	r18, r19
    1e2a:	21 f4       	brne	.+8      	; 0x1e34 <charge_share_test+0x8e>
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <charge_share_test+0x8c>
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	08 95       	ret
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	08 95       	ret

00001e36 <select_next_channel_to_measure>:
    1e36:	80 91 5b 41 	lds	r24, 0x415B	; 0x80415b <current_measure_channel>
    1e3a:	90 91 5c 41 	lds	r25, 0x415C	; 0x80415c <current_measure_channel+0x1>
    1e3e:	a0 91 6d 42 	lds	r26, 0x426D	; 0x80426d <qtm_acquisition_control_working_set_ptr>
    1e42:	b0 91 6e 42 	lds	r27, 0x426E	; 0x80426e <qtm_acquisition_control_working_set_ptr+0x1>
    1e46:	ed 91       	ld	r30, X+
    1e48:	fc 91       	ld	r31, X
    1e4a:	11 97       	sbiw	r26, 0x01	; 1
    1e4c:	40 81       	ld	r20, Z
    1e4e:	51 81       	ldd	r21, Z+1	; 0x01
    1e50:	25 e0       	ldi	r18, 0x05	; 5
    1e52:	28 9f       	mul	r18, r24
    1e54:	b0 01       	movw	r22, r0
    1e56:	29 9f       	mul	r18, r25
    1e58:	70 0d       	add	r23, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	84 17       	cp	r24, r20
    1e62:	95 07       	cpc	r25, r21
    1e64:	a8 f4       	brcc	.+42     	; 0x1e90 <select_next_channel_to_measure+0x5a>
    1e66:	14 96       	adiw	r26, 0x04	; 4
    1e68:	ed 91       	ld	r30, X+
    1e6a:	fc 91       	ld	r31, X
    1e6c:	15 97       	sbiw	r26, 0x05	; 5
    1e6e:	e2 0f       	add	r30, r18
    1e70:	f3 1f       	adc	r31, r19
    1e72:	e6 0f       	add	r30, r22
    1e74:	f7 1f       	adc	r31, r23
    1e76:	e0 81       	ld	r30, Z
    1e78:	2b 5f       	subi	r18, 0xFB	; 251
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	e0 fd       	sbrc	r30, 0
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <select_next_channel_to_measure+0x4e>
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	ee cf       	rjmp	.-36     	; 0x1e60 <select_next_channel_to_measure+0x2a>
    1e84:	80 93 5b 41 	sts	0x415B, r24	; 0x80415b <current_measure_channel>
    1e88:	90 93 5c 41 	sts	0x415C, r25	; 0x80415c <current_measure_channel+0x1>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	08 95       	ret
    1e90:	10 92 5b 41 	sts	0x415B, r1	; 0x80415b <current_measure_channel>
    1e94:	10 92 5c 41 	sts	0x415C, r1	; 0x80415c <current_measure_channel+0x1>
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	08 95       	ret

00001e9c <qtm_measure_node>:
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	7c 01       	movw	r14, r24
    1eb2:	e0 91 6d 42 	lds	r30, 0x426D	; 0x80426d <qtm_acquisition_control_working_set_ptr>
    1eb6:	f0 91 6e 42 	lds	r31, 0x426E	; 0x80426e <qtm_acquisition_control_working_set_ptr+0x1>
    1eba:	84 e1       	ldi	r24, 0x14	; 20
    1ebc:	8e 9d       	mul	r24, r14
    1ebe:	e0 01       	movw	r28, r0
    1ec0:	8f 9d       	mul	r24, r15
    1ec2:	d0 0d       	add	r29, r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	a2 81       	ldd	r26, Z+2	; 0x02
    1ec8:	b3 81       	ldd	r27, Z+3	; 0x03
    1eca:	ac 0f       	add	r26, r28
    1ecc:	bd 1f       	adc	r27, r29
    1ece:	18 96       	adiw	r26, 0x08	; 8
    1ed0:	2c 91       	ld	r18, X
    1ed2:	18 97       	sbiw	r26, 0x08	; 8
    1ed4:	19 96       	adiw	r26, 0x09	; 9
    1ed6:	3c 91       	ld	r19, X
    1ed8:	19 97       	sbiw	r26, 0x09	; 9
    1eda:	1a 96       	adiw	r26, 0x0a	; 10
    1edc:	4c 91       	ld	r20, X
    1ede:	1a 97       	sbiw	r26, 0x0a	; 10
    1ee0:	1b 96       	adiw	r26, 0x0b	; 11
    1ee2:	5c 91       	ld	r21, X
    1ee4:	1b 97       	sbiw	r26, 0x0b	; 11
    1ee6:	1c 96       	adiw	r26, 0x0c	; 12
    1ee8:	6c 91       	ld	r22, X
    1eea:	1c 97       	sbiw	r26, 0x0c	; 12
    1eec:	1d 96       	adiw	r26, 0x0d	; 13
    1eee:	7c 91       	ld	r23, X
    1ef0:	1d 97       	sbiw	r26, 0x0d	; 13
    1ef2:	1e 96       	adiw	r26, 0x0e	; 14
    1ef4:	8c 91       	ld	r24, X
    1ef6:	1e 97       	sbiw	r26, 0x0e	; 14
    1ef8:	1f 96       	adiw	r26, 0x0f	; 15
    1efa:	9c 91       	ld	r25, X
    1efc:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    1f00:	08 e0       	ldi	r16, 0x08	; 8
    1f02:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f06:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    1f0a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f0e:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    1f12:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f16:	20 93 f3 07 	sts	0x07F3, r18	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    1f1a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f1e:	20 93 f4 07 	sts	0x07F4, r18	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    1f22:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f26:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    1f2a:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    1f2e:	a0 81       	ld	r26, Z
    1f30:	b1 81       	ldd	r27, Z+1	; 0x01
    1f32:	12 96       	adiw	r26, 0x02	; 2
    1f34:	8c 91       	ld	r24, X
    1f36:	80 38       	cpi	r24, 0x80	; 128
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <qtm_measure_node+0xa0>
    1f3a:	4f c0       	rjmp	.+158    	; 0x1fda <qtm_measure_node+0x13e>
    1f3c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f3e:	b3 81       	ldd	r27, Z+3	; 0x03
    1f40:	ac 0f       	add	r26, r28
    1f42:	bd 1f       	adc	r27, r29
    1f44:	cc 90       	ld	r12, X
    1f46:	11 96       	adiw	r26, 0x01	; 1
    1f48:	3c 91       	ld	r19, X
    1f4a:	11 97       	sbiw	r26, 0x01	; 1
    1f4c:	12 96       	adiw	r26, 0x02	; 2
    1f4e:	4c 91       	ld	r20, X
    1f50:	12 97       	sbiw	r26, 0x02	; 2
    1f52:	13 96       	adiw	r26, 0x03	; 3
    1f54:	5c 91       	ld	r21, X
    1f56:	13 97       	sbiw	r26, 0x03	; 3
    1f58:	14 96       	adiw	r26, 0x04	; 4
    1f5a:	6c 91       	ld	r22, X
    1f5c:	14 97       	sbiw	r26, 0x04	; 4
    1f5e:	15 96       	adiw	r26, 0x05	; 5
    1f60:	7c 91       	ld	r23, X
    1f62:	15 97       	sbiw	r26, 0x05	; 5
    1f64:	16 96       	adiw	r26, 0x06	; 6
    1f66:	8c 91       	ld	r24, X
    1f68:	16 97       	sbiw	r26, 0x06	; 6
    1f6a:	17 96       	adiw	r26, 0x07	; 7
    1f6c:	9c 91       	ld	r25, X
    1f6e:	c0 92 e8 07 	sts	0x07E8, r12	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    1f72:	2c 2d       	mov	r18, r12
    1f74:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f78:	d2 2e       	mov	r13, r18
    1f7a:	20 93 e9 07 	sts	0x07E9, r18	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    1f7e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f82:	12 2f       	mov	r17, r18
    1f84:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    1f88:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f8c:	a2 2e       	mov	r10, r18
    1f8e:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    1f92:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1f96:	b2 2e       	mov	r11, r18
    1f98:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    1f9c:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    1fa0:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	dc 01       	movw	r26, r24
    1faa:	12 96       	adiw	r26, 0x02	; 2
    1fac:	8c 91       	ld	r24, X
    1fae:	81 38       	cpi	r24, 0x81	; 129
    1fb0:	21 f4       	brne	.+8      	; 0x1fba <qtm_measure_node+0x11e>
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    1fb8:	10 c0       	rjmp	.+32     	; 0x1fda <qtm_measure_node+0x13e>
    1fba:	82 38       	cpi	r24, 0x82	; 130
    1fbc:	71 f4       	brne	.+28     	; 0x1fda <qtm_measure_node+0x13e>
    1fbe:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    1fc2:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    1fc6:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    1fca:	10 93 fa 07 	sts	0x07FA, r17	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    1fce:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    1fd2:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    1fd6:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    1fda:	25 e0       	ldi	r18, 0x05	; 5
    1fdc:	2e 9d       	mul	r18, r14
    1fde:	c0 01       	movw	r24, r0
    1fe0:	2f 9d       	mul	r18, r15
    1fe2:	90 0d       	add	r25, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	a4 81       	ldd	r26, Z+4	; 0x04
    1fe8:	b5 81       	ldd	r27, Z+5	; 0x05
    1fea:	a8 0f       	add	r26, r24
    1fec:	b9 1f       	adc	r27, r25
    1fee:	13 96       	adiw	r26, 0x03	; 3
    1ff0:	2d 91       	ld	r18, X+
    1ff2:	3c 91       	ld	r19, X
    1ff4:	14 97       	sbiw	r26, 0x04	; 4
    1ff6:	a9 01       	movw	r20, r18
    1ff8:	53 70       	andi	r21, 0x03	; 3
    1ffa:	40 93 e4 07 	sts	0x07E4, r20	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7e07e4>
    1ffe:	50 93 e5 07 	sts	0x07E5, r21	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7e07e5>
    2002:	37 fd       	sbrc	r19, 7
    2004:	03 c0       	rjmp	.+6      	; 0x200c <qtm_measure_node+0x170>
    2006:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <qtm_measure_node+0x176>
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	20 93 ca 07 	sts	0x07CA, r18	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    2012:	a4 81       	ldd	r26, Z+4	; 0x04
    2014:	b5 81       	ldd	r27, Z+5	; 0x05
    2016:	a8 0f       	add	r26, r24
    2018:	b9 1f       	adc	r27, r25
    201a:	2c 91       	ld	r18, X
    201c:	21 ff       	sbrs	r18, 1
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <qtm_measure_node+0x188>
    2020:	25 e0       	ldi	r18, 0x05	; 5
    2022:	2c 93       	st	X, r18
    2024:	24 81       	ldd	r18, Z+4	; 0x04
    2026:	35 81       	ldd	r19, Z+5	; 0x05
    2028:	d9 01       	movw	r26, r18
    202a:	a8 0f       	add	r26, r24
    202c:	b9 1f       	adc	r27, r25
    202e:	8c 91       	ld	r24, X
    2030:	8c 71       	andi	r24, 0x1C	; 28
    2032:	69 f4       	brne	.+26     	; 0x204e <qtm_measure_node+0x1b2>
    2034:	a2 81       	ldd	r26, Z+2	; 0x02
    2036:	b3 81       	ldd	r27, Z+3	; 0x03
    2038:	ac 0f       	add	r26, r28
    203a:	bd 1f       	adc	r27, r29
    203c:	52 96       	adiw	r26, 0x12	; 18
    203e:	ac 91       	ld	r26, X
    2040:	a2 95       	swap	r26
    2042:	af 70       	andi	r26, 0x0F	; 15
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ac 52       	subi	r26, 0x2C	; 44
    2048:	bf 4b       	sbci	r27, 0xBF	; 191
    204a:	8c 91       	ld	r24, X
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <qtm_measure_node+0x1b4>
    204e:	8f e1       	ldi	r24, 0x1F	; 31
    2050:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7e07e6>
    2054:	a2 81       	ldd	r26, Z+2	; 0x02
    2056:	b3 81       	ldd	r27, Z+3	; 0x03
    2058:	ac 0f       	add	r26, r28
    205a:	bd 1f       	adc	r27, r29
    205c:	50 96       	adiw	r26, 0x10	; 16
    205e:	8c 91       	ld	r24, X
    2060:	8b 37       	cpi	r24, 0x7B	; 123
    2062:	10 f4       	brcc	.+4      	; 0x2068 <qtm_measure_node+0x1cc>
    2064:	8c 5f       	subi	r24, 0xFC	; 252
    2066:	01 c0       	rjmp	.+2      	; 0x206a <qtm_measure_node+0x1ce>
    2068:	8f e7       	ldi	r24, 0x7F	; 127
    206a:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7e07c4>
    206e:	a2 81       	ldd	r26, Z+2	; 0x02
    2070:	b3 81       	ldd	r27, Z+3	; 0x03
    2072:	ac 0f       	add	r26, r28
    2074:	bd 1f       	adc	r27, r29
    2076:	53 96       	adiw	r26, 0x13	; 19
    2078:	8c 91       	ld	r24, X
    207a:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7e07c7>
    207e:	a2 81       	ldd	r26, Z+2	; 0x02
    2080:	b3 81       	ldd	r27, Z+3	; 0x03
    2082:	ac 0f       	add	r26, r28
    2084:	bd 1f       	adc	r27, r29
    2086:	51 96       	adiw	r26, 0x11	; 17
    2088:	8c 91       	ld	r24, X
    208a:	82 95       	swap	r24
    208c:	8f 70       	andi	r24, 0x0F	; 15
    208e:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7e07c9>
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	c8 0f       	add	r28, r24
    2098:	d9 1f       	adc	r29, r25
    209a:	89 89       	ldd	r24, Y+17	; 0x11
    209c:	8f 70       	andi	r24, 0x0F	; 15
    209e:	80 68       	ori	r24, 0x80	; 128
    20a0:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__TEXT_REGION_LENGTH__+0x7e07c2>
    20a4:	81 e8       	ldi	r24, 0x81	; 129
    20a6:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7e07d0>
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	cf 90       	pop	r12
    20c0:	bf 90       	pop	r11
    20c2:	af 90       	pop	r10
    20c4:	08 95       	ret

000020c6 <qtm_acquisition_process>:
    20c6:	2f 92       	push	r2
    20c8:	3f 92       	push	r3
    20ca:	4f 92       	push	r4
    20cc:	5f 92       	push	r5
    20ce:	6f 92       	push	r6
    20d0:	7f 92       	push	r7
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	27 97       	sbiw	r28, 0x07	; 7
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	80 91 5a 41 	lds	r24, 0x415A	; 0x80415a <touch_seq_lib_state>
    20f8:	88 23       	and	r24, r24
    20fa:	09 f4       	brne	.+2      	; 0x20fe <qtm_acquisition_process+0x38>
    20fc:	46 c2       	rjmp	.+1164   	; 0x258a <qtm_acquisition_process+0x4c4>
    20fe:	00 91 6d 42 	lds	r16, 0x426D	; 0x80426d <qtm_acquisition_control_working_set_ptr>
    2102:	10 91 6e 42 	lds	r17, 0x426E	; 0x80426e <qtm_acquisition_control_working_set_ptr+0x1>
    2106:	20 91 6f 42 	lds	r18, 0x426F	; 0x80426f <qtm_raw_data_measurements_ptr>
    210a:	30 91 70 42 	lds	r19, 0x4270	; 0x804270 <qtm_raw_data_measurements_ptr+0x1>
    210e:	2a 83       	std	Y+2, r18	; 0x02
    2110:	3b 83       	std	Y+3, r19	; 0x03
    2112:	c1 2c       	mov	r12, r1
    2114:	d1 2c       	mov	r13, r1
    2116:	a1 2c       	mov	r10, r1
    2118:	b1 2c       	mov	r11, r1
    211a:	21 2c       	mov	r2, r1
    211c:	31 2c       	mov	r3, r1
    211e:	19 82       	std	Y+1, r1	; 0x01
    2120:	44 24       	eor	r4, r4
    2122:	4a 94       	dec	r4
    2124:	55 24       	eor	r5, r5
    2126:	53 94       	inc	r5
    2128:	77 24       	eor	r7, r7
    212a:	73 94       	inc	r7
    212c:	d8 01       	movw	r26, r16
    212e:	0d 90       	ld	r0, X+
    2130:	bc 91       	ld	r27, X
    2132:	a0 2d       	mov	r26, r0
    2134:	ae 83       	std	Y+6, r26	; 0x06
    2136:	bf 83       	std	Y+7, r27	; 0x07
    2138:	8d 91       	ld	r24, X+
    213a:	9c 91       	ld	r25, X
    213c:	28 16       	cp	r2, r24
    213e:	39 06       	cpc	r3, r25
    2140:	08 f0       	brcs	.+2      	; 0x2144 <qtm_acquisition_process+0x7e>
    2142:	1f c2       	rjmp	.+1086   	; 0x2582 <qtm_acquisition_process+0x4bc>
    2144:	aa 81       	ldd	r26, Y+2	; 0x02
    2146:	bb 81       	ldd	r27, Y+3	; 0x03
    2148:	4d 91       	ld	r20, X+
    214a:	5d 91       	ld	r21, X+
    214c:	aa 83       	std	Y+2, r26	; 0x02
    214e:	bb 83       	std	Y+3, r27	; 0x03
    2150:	f8 01       	movw	r30, r16
    2152:	e4 80       	ldd	r14, Z+4	; 0x04
    2154:	f5 80       	ldd	r15, Z+5	; 0x05
    2156:	ea 0c       	add	r14, r10
    2158:	fb 1c       	adc	r15, r11
    215a:	d7 01       	movw	r26, r14
    215c:	2c 91       	ld	r18, X
    215e:	82 2f       	mov	r24, r18
    2160:	8c 71       	andi	r24, 0x1C	; 28
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	96 95       	lsr	r25
    2166:	87 95       	ror	r24
    2168:	96 95       	lsr	r25
    216a:	87 95       	ror	r24
    216c:	82 30       	cpi	r24, 0x02	; 2
    216e:	91 05       	cpc	r25, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <qtm_acquisition_process+0xae>
    2172:	a0 c1       	rjmp	.+832    	; 0x24b4 <qtm_acquisition_process+0x3ee>
    2174:	28 f4       	brcc	.+10     	; 0x2180 <qtm_acquisition_process+0xba>
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	59 f0       	breq	.+22     	; 0x2190 <qtm_acquisition_process+0xca>
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	01 f1       	breq	.+64     	; 0x21be <qtm_acquisition_process+0xf8>
    217e:	f7 c1       	rjmp	.+1006   	; 0x256e <qtm_acquisition_process+0x4a8>
    2180:	83 30       	cpi	r24, 0x03	; 3
    2182:	91 05       	cpc	r25, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <qtm_acquisition_process+0xc2>
    2186:	59 c1       	rjmp	.+690    	; 0x243a <qtm_acquisition_process+0x374>
    2188:	04 97       	sbiw	r24, 0x04	; 4
    218a:	09 f4       	brne	.+2      	; 0x218e <qtm_acquisition_process+0xc8>
    218c:	e1 c0       	rjmp	.+450    	; 0x2350 <qtm_acquisition_process+0x28a>
    218e:	ef c1       	rjmp	.+990    	; 0x256e <qtm_acquisition_process+0x4a8>
    2190:	02 80       	ldd	r0, Z+2	; 0x02
    2192:	f3 81       	ldd	r31, Z+3	; 0x03
    2194:	e0 2d       	mov	r30, r0
    2196:	ec 0d       	add	r30, r12
    2198:	fd 1d       	adc	r31, r13
    219a:	92 89       	ldd	r25, Z+18	; 0x12
    219c:	9f 70       	andi	r25, 0x0F	; 15
    219e:	83 89       	ldd	r24, Z+19	; 0x13
    21a0:	98 17       	cp	r25, r24
    21a2:	10 f4       	brcc	.+4      	; 0x21a8 <qtm_acquisition_process+0xe2>
    21a4:	89 1b       	sub	r24, r25
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <qtm_acquisition_process+0xe4>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	9a 01       	movw	r18, r20
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <qtm_acquisition_process+0xec>
    21ae:	36 95       	lsr	r19
    21b0:	27 95       	ror	r18
    21b2:	8a 95       	dec	r24
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <qtm_acquisition_process+0xe8>
    21b6:	f7 01       	movw	r30, r14
    21b8:	21 83       	std	Z+1, r18	; 0x01
    21ba:	32 83       	std	Z+2, r19	; 0x02
    21bc:	d8 c1       	rjmp	.+944    	; 0x256e <qtm_acquisition_process+0x4a8>
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	fc 01       	movw	r30, r24
    21c4:	ec 0d       	add	r30, r12
    21c6:	fd 1d       	adc	r31, r13
    21c8:	4a 01       	movw	r8, r20
    21ca:	03 88       	ldd	r0, Z+19	; 0x13
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <qtm_acquisition_process+0x10c>
    21ce:	96 94       	lsr	r9
    21d0:	87 94       	ror	r8
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <qtm_acquisition_process+0x108>
    21d6:	d7 01       	movw	r26, r14
    21d8:	11 96       	adiw	r26, 0x01	; 1
    21da:	8d 92       	st	X+, r8
    21dc:	9c 92       	st	X, r9
    21de:	12 97       	sbiw	r26, 0x02	; 2
    21e0:	13 96       	adiw	r26, 0x03	; 3
    21e2:	8d 91       	ld	r24, X+
    21e4:	9c 91       	ld	r25, X
    21e6:	14 97       	sbiw	r26, 0x04	; 4
    21e8:	69 2f       	mov	r22, r25
    21ea:	66 1f       	adc	r22, r22
    21ec:	66 27       	eor	r22, r22
    21ee:	66 1f       	adc	r22, r22
    21f0:	81 14       	cp	r8, r1
    21f2:	b2 e0       	ldi	r27, 0x02	; 2
    21f4:	9b 06       	cpc	r9, r27
    21f6:	30 f0       	brcs	.+12     	; 0x2204 <qtm_acquisition_process+0x13e>
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	83 1a       	sub	r8, r19
    21fc:	31 e0       	ldi	r19, 0x01	; 1
    21fe:	93 0a       	sbc	r9, r19
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	05 c0       	rjmp	.+10     	; 0x220e <qtm_acquisition_process+0x148>
    2204:	a2 01       	movw	r20, r4
    2206:	48 19       	sub	r20, r8
    2208:	59 09       	sbc	r21, r9
    220a:	4a 01       	movw	r8, r20
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	96 94       	lsr	r9
    2210:	87 94       	ror	r8
    2212:	ae 81       	ldd	r26, Y+6	; 0x06
    2214:	bf 81       	ldd	r27, Y+7	; 0x07
    2216:	12 96       	adiw	r26, 0x02	; 2
    2218:	3c 91       	ld	r19, X
    221a:	30 34       	cpi	r19, 0x40	; 64
    221c:	29 f0       	breq	.+10     	; 0x2228 <qtm_acquisition_process+0x162>
    221e:	44 23       	and	r20, r20
    2220:	09 f4       	brne	.+2      	; 0x2224 <qtm_acquisition_process+0x15e>
    2222:	b6 c1       	rjmp	.+876    	; 0x2590 <qtm_acquisition_process+0x4ca>
    2224:	46 2f       	mov	r20, r22
    2226:	06 c0       	rjmp	.+12     	; 0x2234 <qtm_acquisition_process+0x16e>
    2228:	97 ff       	sbrs	r25, 7
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <qtm_acquisition_process+0x16e>
    222c:	31 e0       	ldi	r19, 0x01	; 1
    222e:	41 11       	cpse	r20, r1
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	43 2f       	mov	r20, r19
    2234:	ba e0       	ldi	r27, 0x0A	; 10
    2236:	8b 16       	cp	r8, r27
    2238:	91 04       	cpc	r9, r1
    223a:	08 f0       	brcs	.+2      	; 0x223e <qtm_acquisition_process+0x178>
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <qtm_acquisition_process+0x1f6>
    223e:	26 fd       	sbrc	r18, 6
    2240:	3a c0       	rjmp	.+116    	; 0x22b6 <qtm_acquisition_process+0x1f0>
    2242:	27 fd       	sbrc	r18, 7
    2244:	94 c1       	rjmp	.+808    	; 0x256e <qtm_acquisition_process+0x4a8>
    2246:	ae 81       	ldd	r26, Y+6	; 0x06
    2248:	bf 81       	ldd	r27, Y+7	; 0x07
    224a:	13 96       	adiw	r26, 0x03	; 3
    224c:	8c 91       	ld	r24, X
    224e:	83 70       	andi	r24, 0x03	; 3
    2250:	83 30       	cpi	r24, 0x03	; 3
    2252:	59 f4       	brne	.+22     	; 0x226a <qtm_acquisition_process+0x1a4>
    2254:	bf e7       	ldi	r27, 0x7F	; 127
    2256:	b0 8b       	std	Z+16, r27	; 0x10
    2258:	d8 01       	movw	r26, r16
    225a:	14 96       	adiw	r26, 0x04	; 4
    225c:	ed 91       	ld	r30, X+
    225e:	fc 91       	ld	r31, X
    2260:	15 97       	sbiw	r26, 0x05	; 5
    2262:	ea 0d       	add	r30, r10
    2264:	fb 1d       	adc	r31, r11
    2266:	b1 e1       	ldi	r27, 0x11	; 17
    2268:	0d c0       	rjmp	.+26     	; 0x2284 <qtm_acquisition_process+0x1be>
    226a:	82 30       	cpi	r24, 0x02	; 2
    226c:	69 f4       	brne	.+26     	; 0x2288 <qtm_acquisition_process+0x1c2>
    226e:	81 89       	ldd	r24, Z+17	; 0x11
    2270:	80 7f       	andi	r24, 0xF0	; 240
    2272:	81 8b       	std	Z+17, r24	; 0x11
    2274:	d8 01       	movw	r26, r16
    2276:	14 96       	adiw	r26, 0x04	; 4
    2278:	ed 91       	ld	r30, X+
    227a:	fc 91       	ld	r31, X
    227c:	15 97       	sbiw	r26, 0x05	; 5
    227e:	ea 0d       	add	r30, r10
    2280:	fb 1d       	adc	r31, r11
    2282:	b9 e0       	ldi	r27, 0x09	; 9
    2284:	b0 83       	st	Z, r27
    2286:	73 c1       	rjmp	.+742    	; 0x256e <qtm_acquisition_process+0x4a8>
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	a9 f4       	brne	.+42     	; 0x22b6 <qtm_acquisition_process+0x1f0>
    228c:	81 89       	ldd	r24, Z+17	; 0x11
    228e:	8f 70       	andi	r24, 0x0F	; 15
    2290:	81 8b       	std	Z+17, r24	; 0x11
    2292:	d8 01       	movw	r26, r16
    2294:	12 96       	adiw	r26, 0x02	; 2
    2296:	ed 91       	ld	r30, X+
    2298:	fc 91       	ld	r31, X
    229a:	13 97       	sbiw	r26, 0x03	; 3
    229c:	ec 0d       	add	r30, r12
    229e:	fd 1d       	adc	r31, r13
    22a0:	81 89       	ldd	r24, Z+17	; 0x11
    22a2:	80 67       	ori	r24, 0x70	; 112
    22a4:	81 8b       	std	Z+17, r24	; 0x11
    22a6:	14 96       	adiw	r26, 0x04	; 4
    22a8:	ed 91       	ld	r30, X+
    22aa:	fc 91       	ld	r31, X
    22ac:	15 97       	sbiw	r26, 0x05	; 5
    22ae:	ea 0d       	add	r30, r10
    22b0:	fb 1d       	adc	r31, r11
    22b2:	bd e0       	ldi	r27, 0x0D	; 13
    22b4:	e7 cf       	rjmp	.-50     	; 0x2284 <qtm_acquisition_process+0x1be>
    22b6:	f7 01       	movw	r30, r14
    22b8:	70 82       	st	Z, r7
    22ba:	59 c1       	rjmp	.+690    	; 0x256e <qtm_acquisition_process+0x4a8>
    22bc:	9c 01       	movw	r18, r24
    22be:	33 70       	andi	r19, 0x03	; 3
    22c0:	2f 3f       	cpi	r18, 0xFF	; 255
    22c2:	f3 e0       	ldi	r31, 0x03	; 3
    22c4:	3f 07       	cpc	r19, r31
    22c6:	31 f4       	brne	.+12     	; 0x22d4 <qtm_acquisition_process+0x20e>
    22c8:	e1 e8       	ldi	r30, 0x81	; 129
    22ca:	d7 01       	movw	r26, r14
    22cc:	ec 93       	st	X, r30
    22ce:	8f ef       	ldi	r24, 0xFF	; 255
    22d0:	93 e0       	ldi	r25, 0x03	; 3
    22d2:	0b c0       	rjmp	.+22     	; 0x22ea <qtm_acquisition_process+0x224>
    22d4:	21 15       	cp	r18, r1
    22d6:	31 05       	cpc	r19, r1
    22d8:	59 f4       	brne	.+22     	; 0x22f0 <qtm_acquisition_process+0x22a>
    22da:	97 ff       	sbrs	r25, 7
    22dc:	25 c0       	rjmp	.+74     	; 0x2328 <qtm_acquisition_process+0x262>
    22de:	e1 e8       	ldi	r30, 0x81	; 129
    22e0:	d7 01       	movw	r26, r14
    22e2:	ec 93       	st	X, r30
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	fe e0       	ldi	r31, 0x0E	; 14
    22ec:	f9 83       	std	Y+1, r31	; 0x01
    22ee:	1f c0       	rjmp	.+62     	; 0x232e <qtm_acquisition_process+0x268>
    22f0:	c9 01       	movw	r24, r18
    22f2:	41 11       	cpse	r20, r1
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <qtm_acquisition_process+0x24e>
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	21 e0       	ldi	r18, 0x01	; 1
    22fa:	82 1a       	sub	r8, r18
    22fc:	91 08       	sbc	r9, r1
    22fe:	31 e0       	ldi	r19, 0x01	; 1
    2300:	83 16       	cp	r8, r19
    2302:	91 04       	cpc	r9, r1
    2304:	a1 f0       	breq	.+40     	; 0x232e <qtm_acquisition_process+0x268>
    2306:	8f 3f       	cpi	r24, 0xFF	; 255
    2308:	43 e0       	ldi	r20, 0x03	; 3
    230a:	94 07       	cpc	r25, r20
    230c:	a1 f7       	brne	.-24     	; 0x22f6 <qtm_acquisition_process+0x230>
    230e:	0f c0       	rjmp	.+30     	; 0x232e <qtm_acquisition_process+0x268>
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f0       	breq	.+26     	; 0x232e <qtm_acquisition_process+0x268>
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	ac 01       	movw	r20, r24
    2318:	42 1b       	sub	r20, r18
    231a:	53 0b       	sbc	r21, r19
    231c:	48 0d       	add	r20, r8
    231e:	59 1d       	adc	r21, r9
    2320:	41 30       	cpi	r20, 0x01	; 1
    2322:	51 05       	cpc	r21, r1
    2324:	a9 f7       	brne	.-22     	; 0x2310 <qtm_acquisition_process+0x24a>
    2326:	03 c0       	rjmp	.+6      	; 0x232e <qtm_acquisition_process+0x268>
    2328:	80 ef       	ldi	r24, 0xF0	; 240
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	d8 01       	movw	r26, r16
    2330:	14 96       	adiw	r26, 0x04	; 4
    2332:	ed 91       	ld	r30, X+
    2334:	fc 91       	ld	r31, X
    2336:	15 97       	sbiw	r26, 0x05	; 5
    2338:	ea 0d       	add	r30, r10
    233a:	fb 1d       	adc	r31, r11
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	77 27       	eor	r23, r23
    2340:	66 95       	lsr	r22
    2342:	77 95       	ror	r23
    2344:	66 27       	eor	r22, r22
    2346:	86 2b       	or	r24, r22
    2348:	97 2b       	or	r25, r23
    234a:	83 83       	std	Z+3, r24	; 0x03
    234c:	94 83       	std	Z+4, r25	; 0x04
    234e:	0f c1       	rjmp	.+542    	; 0x256e <qtm_acquisition_process+0x4a8>
    2350:	f8 01       	movw	r30, r16
    2352:	82 80       	ldd	r8, Z+2	; 0x02
    2354:	93 80       	ldd	r9, Z+3	; 0x03
    2356:	8c 0c       	add	r8, r12
    2358:	9d 1c       	adc	r9, r13
    235a:	fa 01       	movw	r30, r20
    235c:	d4 01       	movw	r26, r8
    235e:	53 96       	adiw	r26, 0x13	; 19
    2360:	0c 90       	ld	r0, X
    2362:	53 97       	sbiw	r26, 0x13	; 19
    2364:	02 c0       	rjmp	.+4      	; 0x236a <qtm_acquisition_process+0x2a4>
    2366:	f6 95       	lsr	r31
    2368:	e7 95       	ror	r30
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <qtm_acquisition_process+0x2a0>
    236e:	ec 83       	std	Y+4, r30	; 0x04
    2370:	fd 83       	std	Y+5, r31	; 0x05
    2372:	50 96       	adiw	r26, 0x10	; 16
    2374:	6c 90       	ld	r6, X
    2376:	ff e7       	ldi	r31, 0x7F	; 127
    2378:	6f 12       	cpse	r6, r31
    237a:	0f c0       	rjmp	.+30     	; 0x239a <qtm_acquisition_process+0x2d4>
    237c:	ec 81       	ldd	r30, Y+4	; 0x04
    237e:	fd 81       	ldd	r31, Y+5	; 0x05
    2380:	d7 01       	movw	r26, r14
    2382:	11 96       	adiw	r26, 0x01	; 1
    2384:	ed 93       	st	X+, r30
    2386:	fc 93       	st	X, r31
    2388:	12 97       	sbiw	r26, 0x02	; 2
    238a:	d4 01       	movw	r26, r8
    238c:	50 96       	adiw	r26, 0x10	; 16
    238e:	8c 91       	ld	r24, X
    2390:	50 97       	sbiw	r26, 0x10	; 16
    2392:	8f 7b       	andi	r24, 0xBF	; 191
    2394:	50 96       	adiw	r26, 0x10	; 16
    2396:	8c 93       	st	X, r24
    2398:	42 c0       	rjmp	.+132    	; 0x241e <qtm_acquisition_process+0x358>
    239a:	f1 2c       	mov	r15, r1
    239c:	26 2d       	mov	r18, r6
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	c9 01       	movw	r24, r18
    23a2:	0f 2c       	mov	r0, r15
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <qtm_acquisition_process+0x2e4>
    23a6:	96 95       	lsr	r25
    23a8:	87 95       	ror	r24
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <qtm_acquisition_process+0x2e0>
    23ae:	80 ff       	sbrs	r24, 0
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <qtm_acquisition_process+0x2f2>
    23b2:	8f 2d       	mov	r24, r15
    23b4:	f1 2c       	mov	r15, r1
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <qtm_acquisition_process+0x2f4>
    23b8:	87 e0       	ldi	r24, 0x07	; 7
    23ba:	8f 5f       	subi	r24, 0xFF	; 255
    23bc:	87 30       	cpi	r24, 0x07	; 7
    23be:	10 f4       	brcc	.+4      	; 0x23c4 <qtm_acquisition_process+0x2fe>
    23c0:	f8 2e       	mov	r15, r24
    23c2:	ee cf       	rjmp	.-36     	; 0x23a0 <qtm_acquisition_process+0x2da>
    23c4:	6c 81       	ldd	r22, Y+4	; 0x04
    23c6:	7d 81       	ldd	r23, Y+5	; 0x05
    23c8:	c1 01       	movw	r24, r2
    23ca:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <charge_share_test>
    23ce:	88 23       	and	r24, r24
    23d0:	51 f0       	breq	.+20     	; 0x23e6 <qtm_acquisition_process+0x320>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0f 2c       	mov	r0, r15
    23d8:	01 c0       	rjmp	.+2      	; 0x23dc <qtm_acquisition_process+0x316>
    23da:	88 0f       	add	r24, r24
    23dc:	0a 94       	dec	r0
    23de:	ea f7       	brpl	.-6      	; 0x23da <qtm_acquisition_process+0x314>
    23e0:	86 29       	or	r24, r6
    23e2:	f4 01       	movw	r30, r8
    23e4:	80 8b       	std	Z+16, r24	; 0x10
    23e6:	d8 01       	movw	r26, r16
    23e8:	ff 20       	and	r15, r15
    23ea:	91 f0       	breq	.+36     	; 0x2410 <qtm_acquisition_process+0x34a>
    23ec:	12 96       	adiw	r26, 0x02	; 2
    23ee:	ed 91       	ld	r30, X+
    23f0:	fc 91       	ld	r31, X
    23f2:	13 97       	sbiw	r26, 0x03	; 3
    23f4:	ec 0d       	add	r30, r12
    23f6:	fd 1d       	adc	r31, r13
    23f8:	fa 94       	dec	r15
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <qtm_acquisition_process+0x33c>
    2400:	88 0f       	add	r24, r24
    2402:	fa 94       	dec	r15
    2404:	ea f7       	brpl	.-6      	; 0x2400 <qtm_acquisition_process+0x33a>
    2406:	80 95       	com	r24
    2408:	90 89       	ldd	r25, Z+16	; 0x10
    240a:	89 23       	and	r24, r25
    240c:	80 8b       	std	Z+16, r24	; 0x10
    240e:	07 c0       	rjmp	.+14     	; 0x241e <qtm_acquisition_process+0x358>
    2410:	14 96       	adiw	r26, 0x04	; 4
    2412:	ed 91       	ld	r30, X+
    2414:	fc 91       	ld	r31, X
    2416:	15 97       	sbiw	r26, 0x05	; 5
    2418:	ea 0d       	add	r30, r10
    241a:	fb 1d       	adc	r31, r11
    241c:	70 82       	st	Z, r7
    241e:	d8 01       	movw	r26, r16
    2420:	14 96       	adiw	r26, 0x04	; 4
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	15 97       	sbiw	r26, 0x05	; 5
    2428:	ea 0d       	add	r30, r10
    242a:	fb 1d       	adc	r31, r11
    242c:	80 81       	ld	r24, Z
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	09 f0       	breq	.+2      	; 0x2434 <qtm_acquisition_process+0x36e>
    2432:	9d c0       	rjmp	.+314    	; 0x256e <qtm_acquisition_process+0x4a8>
    2434:	2c 81       	ldd	r18, Y+4	; 0x04
    2436:	3d 81       	ldd	r19, Y+5	; 0x05
    2438:	83 c0       	rjmp	.+262    	; 0x2540 <qtm_acquisition_process+0x47a>
    243a:	02 80       	ldd	r0, Z+2	; 0x02
    243c:	f3 81       	ldd	r31, Z+3	; 0x03
    243e:	e0 2d       	mov	r30, r0
    2440:	ec 0d       	add	r30, r12
    2442:	fd 1d       	adc	r31, r13
    2444:	9a 01       	movw	r18, r20
    2446:	03 88       	ldd	r0, Z+19	; 0x13
    2448:	02 c0       	rjmp	.+4      	; 0x244e <qtm_acquisition_process+0x388>
    244a:	36 95       	lsr	r19
    244c:	27 95       	ror	r18
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <qtm_acquisition_process+0x384>
    2452:	2c 83       	std	Y+4, r18	; 0x04
    2454:	3d 83       	std	Y+5, r19	; 0x05
    2456:	91 88       	ldd	r9, Z+17	; 0x11
    2458:	92 94       	swap	r9
    245a:	2f e0       	ldi	r18, 0x0F	; 15
    245c:	92 22       	and	r9, r18
    245e:	37 e0       	ldi	r19, 0x07	; 7
    2460:	93 16       	cp	r9, r19
    2462:	91 f0       	breq	.+36     	; 0x2488 <qtm_acquisition_process+0x3c2>
    2464:	6c 81       	ldd	r22, Y+4	; 0x04
    2466:	7d 81       	ldd	r23, Y+5	; 0x05
    2468:	c1 01       	movw	r24, r2
    246a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <charge_share_test>
    246e:	81 11       	cpse	r24, r1
    2470:	04 c0       	rjmp	.+8      	; 0x247a <qtm_acquisition_process+0x3b4>
    2472:	93 94       	inc	r9
    2474:	d7 01       	movw	r26, r14
    2476:	7c 92       	st	X, r7
    2478:	09 c0       	rjmp	.+18     	; 0x248c <qtm_acquisition_process+0x3c6>
    247a:	91 10       	cpse	r9, r1
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <qtm_acquisition_process+0x3be>
    247e:	f7 01       	movw	r30, r14
    2480:	70 82       	st	Z, r7
    2482:	04 c0       	rjmp	.+8      	; 0x248c <qtm_acquisition_process+0x3c6>
    2484:	9a 94       	dec	r9
    2486:	02 c0       	rjmp	.+4      	; 0x248c <qtm_acquisition_process+0x3c6>
    2488:	96 e0       	ldi	r25, 0x06	; 6
    248a:	99 2e       	mov	r9, r25
    248c:	d8 01       	movw	r26, r16
    248e:	12 96       	adiw	r26, 0x02	; 2
    2490:	ed 91       	ld	r30, X+
    2492:	fc 91       	ld	r31, X
    2494:	13 97       	sbiw	r26, 0x03	; 3
    2496:	ec 0d       	add	r30, r12
    2498:	fd 1d       	adc	r31, r13
    249a:	81 89       	ldd	r24, Z+17	; 0x11
    249c:	8f 70       	andi	r24, 0x0F	; 15
    249e:	81 8b       	std	Z+17, r24	; 0x11
    24a0:	12 96       	adiw	r26, 0x02	; 2
    24a2:	ed 91       	ld	r30, X+
    24a4:	fc 91       	ld	r31, X
    24a6:	13 97       	sbiw	r26, 0x03	; 3
    24a8:	ec 0d       	add	r30, r12
    24aa:	fd 1d       	adc	r31, r13
    24ac:	92 94       	swap	r9
    24ae:	80 ef       	ldi	r24, 0xF0	; 240
    24b0:	98 22       	and	r9, r24
    24b2:	36 c0       	rjmp	.+108    	; 0x2520 <qtm_acquisition_process+0x45a>
    24b4:	02 80       	ldd	r0, Z+2	; 0x02
    24b6:	f3 81       	ldd	r31, Z+3	; 0x03
    24b8:	e0 2d       	mov	r30, r0
    24ba:	ec 0d       	add	r30, r12
    24bc:	fd 1d       	adc	r31, r13
    24be:	9a 01       	movw	r18, r20
    24c0:	03 88       	ldd	r0, Z+19	; 0x13
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <qtm_acquisition_process+0x402>
    24c4:	36 95       	lsr	r19
    24c6:	27 95       	ror	r18
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <qtm_acquisition_process+0x3fe>
    24cc:	2c 83       	std	Y+4, r18	; 0x04
    24ce:	3d 83       	std	Y+5, r19	; 0x05
    24d0:	81 89       	ldd	r24, Z+17	; 0x11
    24d2:	8f 70       	andi	r24, 0x0F	; 15
    24d4:	98 2e       	mov	r9, r24
    24d6:	91 f0       	breq	.+36     	; 0x24fc <qtm_acquisition_process+0x436>
    24d8:	b9 01       	movw	r22, r18
    24da:	c1 01       	movw	r24, r2
    24dc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <charge_share_test>
    24e0:	81 11       	cpse	r24, r1
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <qtm_acquisition_process+0x426>
    24e4:	9a 94       	dec	r9
    24e6:	d7 01       	movw	r26, r14
    24e8:	7c 92       	st	X, r7
    24ea:	0a c0       	rjmp	.+20     	; 0x2500 <qtm_acquisition_process+0x43a>
    24ec:	b7 e0       	ldi	r27, 0x07	; 7
    24ee:	9b 12       	cpse	r9, r27
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <qtm_acquisition_process+0x432>
    24f2:	f7 01       	movw	r30, r14
    24f4:	70 82       	st	Z, r7
    24f6:	04 c0       	rjmp	.+8      	; 0x2500 <qtm_acquisition_process+0x43a>
    24f8:	93 94       	inc	r9
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <qtm_acquisition_process+0x43a>
    24fc:	99 24       	eor	r9, r9
    24fe:	93 94       	inc	r9
    2500:	d8 01       	movw	r26, r16
    2502:	12 96       	adiw	r26, 0x02	; 2
    2504:	ed 91       	ld	r30, X+
    2506:	fc 91       	ld	r31, X
    2508:	13 97       	sbiw	r26, 0x03	; 3
    250a:	ec 0d       	add	r30, r12
    250c:	fd 1d       	adc	r31, r13
    250e:	81 89       	ldd	r24, Z+17	; 0x11
    2510:	80 7f       	andi	r24, 0xF0	; 240
    2512:	81 8b       	std	Z+17, r24	; 0x11
    2514:	12 96       	adiw	r26, 0x02	; 2
    2516:	ed 91       	ld	r30, X+
    2518:	fc 91       	ld	r31, X
    251a:	13 97       	sbiw	r26, 0x03	; 3
    251c:	ec 0d       	add	r30, r12
    251e:	fd 1d       	adc	r31, r13
    2520:	81 89       	ldd	r24, Z+17	; 0x11
    2522:	98 2a       	or	r9, r24
    2524:	91 8a       	std	Z+17, r9	; 0x11
    2526:	14 96       	adiw	r26, 0x04	; 4
    2528:	ed 91       	ld	r30, X+
    252a:	fc 91       	ld	r31, X
    252c:	15 97       	sbiw	r26, 0x05	; 5
    252e:	ea 0d       	add	r30, r10
    2530:	fb 1d       	adc	r31, r11
    2532:	2c 81       	ldd	r18, Y+4	; 0x04
    2534:	3d 81       	ldd	r19, Y+5	; 0x05
    2536:	21 83       	std	Z+1, r18	; 0x01
    2538:	32 83       	std	Z+2, r19	; 0x02
    253a:	80 81       	ld	r24, Z
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	b9 f4       	brne	.+46     	; 0x256e <qtm_acquisition_process+0x4a8>
    2540:	21 15       	cp	r18, r1
    2542:	42 e0       	ldi	r20, 0x02	; 2
    2544:	34 07       	cpc	r19, r20
    2546:	28 f0       	brcs	.+10     	; 0x2552 <qtm_acquisition_process+0x48c>
    2548:	2f 5f       	subi	r18, 0xFF	; 255
    254a:	31 40       	sbci	r19, 0x01	; 1
    254c:	2c 83       	std	Y+4, r18	; 0x04
    254e:	3d 83       	std	Y+5, r19	; 0x05
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <qtm_acquisition_process+0x49a>
    2552:	c2 01       	movw	r24, r4
    2554:	ac 81       	ldd	r26, Y+4	; 0x04
    2556:	bd 81       	ldd	r27, Y+5	; 0x05
    2558:	8a 1b       	sub	r24, r26
    255a:	9b 0b       	sbc	r25, r27
    255c:	8c 83       	std	Y+4, r24	; 0x04
    255e:	9d 83       	std	Y+5, r25	; 0x05
    2560:	2c 81       	ldd	r18, Y+4	; 0x04
    2562:	3d 81       	ldd	r19, Y+5	; 0x05
    2564:	2b 30       	cpi	r18, 0x0B	; 11
    2566:	31 05       	cpc	r19, r1
    2568:	10 f0       	brcs	.+4      	; 0x256e <qtm_acquisition_process+0x4a8>
    256a:	35 e4       	ldi	r19, 0x45	; 69
    256c:	30 83       	st	Z, r19
    256e:	4f ef       	ldi	r20, 0xFF	; 255
    2570:	24 1a       	sub	r2, r20
    2572:	34 0a       	sbc	r3, r20
    2574:	55 e0       	ldi	r21, 0x05	; 5
    2576:	a5 0e       	add	r10, r21
    2578:	b1 1c       	adc	r11, r1
    257a:	84 e1       	ldi	r24, 0x14	; 20
    257c:	c8 0e       	add	r12, r24
    257e:	d1 1c       	adc	r13, r1
    2580:	d5 cd       	rjmp	.-1110   	; 0x212c <qtm_acquisition_process+0x66>
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	80 93 5a 41 	sts	0x415A, r24	; 0x80415a <touch_seq_lib_state>
    2588:	09 c0       	rjmp	.+18     	; 0x259c <qtm_acquisition_process+0x4d6>
    258a:	b3 e0       	ldi	r27, 0x03	; 3
    258c:	b9 83       	std	Y+1, r27	; 0x01
    258e:	06 c0       	rjmp	.+12     	; 0x259c <qtm_acquisition_process+0x4d6>
    2590:	49 2f       	mov	r20, r25
    2592:	40 95       	com	r20
    2594:	44 1f       	adc	r20, r20
    2596:	44 27       	eor	r20, r20
    2598:	44 1f       	adc	r20, r20
    259a:	4c ce       	rjmp	.-872    	; 0x2234 <qtm_acquisition_process+0x16e>
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	27 96       	adiw	r28, 0x07	; 7
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	df 90       	pop	r13
    25b2:	cf 90       	pop	r12
    25b4:	bf 90       	pop	r11
    25b6:	af 90       	pop	r10
    25b8:	9f 90       	pop	r9
    25ba:	8f 90       	pop	r8
    25bc:	7f 90       	pop	r7
    25be:	6f 90       	pop	r6
    25c0:	5f 90       	pop	r5
    25c2:	4f 90       	pop	r4
    25c4:	3f 90       	pop	r3
    25c6:	2f 90       	pop	r2
    25c8:	08 95       	ret

000025ca <qtm_ptc_init_acquisition_module>:
    25ca:	5f 92       	push	r5
    25cc:	6f 92       	push	r6
    25ce:	7f 92       	push	r7
    25d0:	8f 92       	push	r8
    25d2:	9f 92       	push	r9
    25d4:	af 92       	push	r10
    25d6:	bf 92       	push	r11
    25d8:	cf 92       	push	r12
    25da:	df 92       	push	r13
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	09 f4       	brne	.+2      	; 0x25ee <qtm_ptc_init_acquisition_module+0x24>
    25ec:	92 c0       	rjmp	.+292    	; 0x2712 <qtm_ptc_init_acquisition_module+0x148>
    25ee:	dc 01       	movw	r26, r24
    25f0:	ed 91       	ld	r30, X+
    25f2:	fc 91       	ld	r31, X
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	10 e0       	ldi	r17, 0x00	; 0
    2604:	f1 2c       	mov	r15, r1
    2606:	e1 2c       	mov	r14, r1
    2608:	91 2c       	mov	r9, r1
    260a:	81 2c       	mov	r8, r1
    260c:	71 2c       	mov	r7, r1
    260e:	61 2c       	mov	r6, r1
    2610:	26 17       	cp	r18, r22
    2612:	37 07       	cpc	r19, r23
    2614:	51 f1       	breq	.+84     	; 0x266a <qtm_ptc_init_acquisition_module+0xa0>
    2616:	ec 01       	movw	r28, r24
    2618:	ea 81       	ldd	r30, Y+2	; 0x02
    261a:	fb 81       	ldd	r31, Y+3	; 0x03
    261c:	e4 0f       	add	r30, r20
    261e:	f5 1f       	adc	r31, r21
    2620:	a0 80       	ld	r10, Z
    2622:	a0 85       	ldd	r26, Z+8	; 0x08
    2624:	aa 2a       	or	r10, r26
    2626:	b1 80       	ldd	r11, Z+1	; 0x01
    2628:	a1 85       	ldd	r26, Z+9	; 0x09
    262a:	ba 2a       	or	r11, r26
    262c:	c2 80       	ldd	r12, Z+2	; 0x02
    262e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2630:	ca 2a       	or	r12, r26
    2632:	d3 80       	ldd	r13, Z+3	; 0x03
    2634:	a3 85       	ldd	r26, Z+11	; 0x0b
    2636:	da 2a       	or	r13, r26
    2638:	d4 81       	ldd	r29, Z+4	; 0x04
    263a:	a4 85       	ldd	r26, Z+12	; 0x0c
    263c:	da 2b       	or	r29, r26
    263e:	c5 81       	ldd	r28, Z+5	; 0x05
    2640:	a5 85       	ldd	r26, Z+13	; 0x0d
    2642:	ca 2b       	or	r28, r26
    2644:	56 80       	ldd	r5, Z+6	; 0x06
    2646:	a6 85       	ldd	r26, Z+14	; 0x0e
    2648:	a5 29       	or	r26, r5
    264a:	57 80       	ldd	r5, Z+7	; 0x07
    264c:	e7 85       	ldd	r30, Z+15	; 0x0f
    264e:	e5 29       	or	r30, r5
    2650:	ba 29       	or	r27, r10
    2652:	1b 29       	or	r17, r11
    2654:	fc 28       	or	r15, r12
    2656:	ed 28       	or	r14, r13
    2658:	9d 2a       	or	r9, r29
    265a:	8c 2a       	or	r8, r28
    265c:	7a 2a       	or	r7, r26
    265e:	6e 2a       	or	r6, r30
    2660:	2f 5f       	subi	r18, 0xFF	; 255
    2662:	3f 4f       	sbci	r19, 0xFF	; 255
    2664:	4c 5e       	subi	r20, 0xEC	; 236
    2666:	5f 4f       	sbci	r21, 0xFF	; 255
    2668:	d3 cf       	rjmp	.-90     	; 0x2610 <qtm_ptc_init_acquisition_module+0x46>
    266a:	2b 2f       	mov	r18, r27
    266c:	31 2f       	mov	r19, r17
    266e:	4f 2d       	mov	r20, r15
    2670:	5e 2d       	mov	r21, r14
    2672:	69 2d       	mov	r22, r9
    2674:	78 2d       	mov	r23, r8
    2676:	87 2d       	mov	r24, r7
    2678:	96 2d       	mov	r25, r6
    267a:	a0 e0       	ldi	r26, 0x00	; 0
    267c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__cmpdi2_s8>
    2680:	09 f4       	brne	.+2      	; 0x2684 <qtm_ptc_init_acquisition_module+0xba>
    2682:	49 c0       	rjmp	.+146    	; 0x2716 <qtm_ptc_init_acquisition_module+0x14c>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	80 93 5a 41 	sts	0x415A, r24	; 0x80415a <touch_seq_lib_state>
    268a:	27 ee       	ldi	r18, 0xE7	; 231
    268c:	c2 2e       	mov	r12, r18
    268e:	20 e4       	ldi	r18, 0x40	; 64
    2690:	d2 2e       	mov	r13, r18
    2692:	c0 e0       	ldi	r28, 0x00	; 0
    2694:	d0 e0       	ldi	r29, 0x00	; 0
    2696:	aa 24       	eor	r10, r10
    2698:	a3 94       	inc	r10
    269a:	b1 2c       	mov	r11, r1
    269c:	4c e0       	ldi	r20, 0x0C	; 12
    269e:	54 2e       	mov	r5, r20
    26a0:	2b 2f       	mov	r18, r27
    26a2:	31 2f       	mov	r19, r17
    26a4:	4f 2d       	mov	r20, r15
    26a6:	5e 2d       	mov	r21, r14
    26a8:	69 2d       	mov	r22, r9
    26aa:	78 2d       	mov	r23, r8
    26ac:	87 2d       	mov	r24, r7
    26ae:	96 2d       	mov	r25, r6
    26b0:	0c 2f       	mov	r16, r28
    26b2:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__lshrdi3>
    26b6:	21 70       	andi	r18, 0x01	; 1
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	70 e0       	ldi	r23, 0x00	; 0
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__cmpdi2_s8>
    26cc:	c9 f0       	breq	.+50     	; 0x2700 <qtm_ptc_init_acquisition_module+0x136>
    26ce:	f6 01       	movw	r30, r12
    26d0:	80 81       	ld	r24, Z
    26d2:	e8 2f       	mov	r30, r24
    26d4:	e2 95       	swap	r30
    26d6:	e6 95       	lsr	r30
    26d8:	e7 70       	andi	r30, 0x07	; 7
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	e7 52       	subi	r30, 0x27	; 39
    26e2:	ff 4b       	sbci	r31, 0xBF	; 191
    26e4:	01 90       	ld	r0, Z+
    26e6:	f0 81       	ld	r31, Z
    26e8:	e0 2d       	mov	r30, r0
    26ea:	8f 71       	andi	r24, 0x1F	; 31
    26ec:	95 01       	movw	r18, r10
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <qtm_ptc_init_acquisition_module+0x12a>
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	8a 95       	dec	r24
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <qtm_ptc_init_acquisition_module+0x126>
    26f8:	22 83       	std	Z+2, r18	; 0x02
    26fa:	26 83       	std	Z+6, r18	; 0x06
    26fc:	53 86       	std	Z+11, r5	; 0x0b
    26fe:	25 87       	std	Z+13, r18	; 0x0d
    2700:	21 96       	adiw	r28, 0x01	; 1
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	c3 1a       	sub	r12, r19
    2706:	d3 0a       	sbc	r13, r19
    2708:	c0 33       	cpi	r28, 0x30	; 48
    270a:	d1 05       	cpc	r29, r1
    270c:	49 f6       	brne	.-110    	; 0x26a0 <qtm_ptc_init_acquisition_module+0xd6>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <qtm_ptc_init_acquisition_module+0x14e>
    2712:	8b e0       	ldi	r24, 0x0B	; 11
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <qtm_ptc_init_acquisition_module+0x14e>
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	bf 90       	pop	r11
    272a:	af 90       	pop	r10
    272c:	9f 90       	pop	r9
    272e:	8f 90       	pop	r8
    2730:	7f 90       	pop	r7
    2732:	6f 90       	pop	r6
    2734:	5f 90       	pop	r5
    2736:	08 95       	ret

00002738 <qtm_ptc_qtlib_assign_signal_memory>:
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	31 f0       	breq	.+12     	; 0x2748 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    273c:	80 93 6f 42 	sts	0x426F, r24	; 0x80426f <qtm_raw_data_measurements_ptr>
    2740:	90 93 70 42 	sts	0x4270, r25	; 0x804270 <qtm_raw_data_measurements_ptr+0x1>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	08 95       	ret
    2748:	8b e0       	ldi	r24, 0x0B	; 11
    274a:	08 95       	ret

0000274c <qtm_ptc_start_measurement_seq>:
    274c:	61 15       	cp	r22, r1
    274e:	71 05       	cpc	r23, r1
    2750:	61 f1       	breq	.+88     	; 0x27aa <qtm_ptc_start_measurement_seq+0x5e>
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	51 f1       	breq	.+84     	; 0x27aa <qtm_ptc_start_measurement_seq+0x5e>
    2756:	20 91 5a 41 	lds	r18, 0x415A	; 0x80415a <touch_seq_lib_state>
    275a:	22 23       	and	r18, r18
    275c:	41 f1       	breq	.+80     	; 0x27ae <qtm_ptc_start_measurement_seq+0x62>
    275e:	24 30       	cpi	r18, 0x04	; 4
    2760:	41 f1       	breq	.+80     	; 0x27b2 <qtm_ptc_start_measurement_seq+0x66>
    2762:	80 93 6d 42 	sts	0x426D, r24	; 0x80426d <qtm_acquisition_control_working_set_ptr>
    2766:	90 93 6e 42 	sts	0x426E, r25	; 0x80426e <qtm_acquisition_control_working_set_ptr+0x1>
    276a:	60 93 58 41 	sts	0x4158, r22	; 0x804158 <ptc_seq_measure_complete_pointer>
    276e:	70 93 59 41 	sts	0x4159, r23	; 0x804159 <ptc_seq_measure_complete_pointer+0x1>
    2772:	dc 01       	movw	r26, r24
    2774:	ed 91       	ld	r30, X+
    2776:	fc 91       	ld	r31, X
    2778:	22 81       	ldd	r18, Z+2	; 0x02
    277a:	20 34       	cpi	r18, 0x40	; 64
    277c:	19 f4       	brne	.+6      	; 0x2784 <qtm_ptc_start_measurement_seq+0x38>
    277e:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    2782:	07 c0       	rjmp	.+14     	; 0x2792 <qtm_ptc_start_measurement_seq+0x46>
    2784:	20 38       	cpi	r18, 0x80	; 128
    2786:	11 f0       	breq	.+4      	; 0x278c <qtm_ptc_start_measurement_seq+0x40>
    2788:	21 38       	cpi	r18, 0x81	; 129
    278a:	31 f4       	brne	.+12     	; 0x2798 <qtm_ptc_start_measurement_seq+0x4c>
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    2792:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    2796:	11 c0       	rjmp	.+34     	; 0x27ba <qtm_ptc_start_measurement_seq+0x6e>
    2798:	22 38       	cpi	r18, 0x82	; 130
    279a:	69 f4       	brne	.+26     	; 0x27b6 <qtm_ptc_start_measurement_seq+0x6a>
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    27a2:	29 e0       	ldi	r18, 0x09	; 9
    27a4:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    27a8:	08 c0       	rjmp	.+16     	; 0x27ba <qtm_ptc_start_measurement_seq+0x6e>
    27aa:	8b e0       	ldi	r24, 0x0B	; 11
    27ac:	08 95       	ret
    27ae:	83 e0       	ldi	r24, 0x03	; 3
    27b0:	08 95       	ret
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	08 95       	ret
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	08 95       	ret
    27ba:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    27be:	dc 01       	movw	r26, r24
    27c0:	ed 91       	ld	r30, X+
    27c2:	fc 91       	ld	r31, X
    27c4:	84 81       	ldd	r24, Z+4	; 0x04
    27c6:	92 81       	ldd	r25, Z+2	; 0x02
    27c8:	90 34       	cpi	r25, 0x40	; 64
    27ca:	51 f4       	brne	.+20     	; 0x27e0 <qtm_ptc_start_measurement_seq+0x94>
    27cc:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    27d0:	80 31       	cpi	r24, 0x10	; 16
    27d2:	10 f4       	brcc	.+4      	; 0x27d8 <qtm_ptc_start_measurement_seq+0x8c>
    27d4:	80 62       	ori	r24, 0x20	; 32
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <qtm_ptc_start_measurement_seq+0x8e>
    27d8:	8f e2       	ldi	r24, 0x2F	; 47
    27da:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    27de:	08 c0       	rjmp	.+16     	; 0x27f0 <qtm_ptc_start_measurement_seq+0xa4>
    27e0:	90 e2       	ldi	r25, 0x20	; 32
    27e2:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    27e6:	8f 30       	cpi	r24, 0x0F	; 15
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <qtm_ptc_start_measurement_seq+0xa0>
    27ea:	8f e0       	ldi	r24, 0x0F	; 15
    27ec:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <__TEXT_REGION_LENGTH__+0x7e07d3>
    27f6:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <__TEXT_REGION_LENGTH__+0x7e07d2>
    27fa:	80 93 cb 40 	sts	0x40CB, r24	; 0x8040cb <qtm_which_mode_current>
    27fe:	10 92 5b 41 	sts	0x415B, r1	; 0x80415b <current_measure_channel>
    2802:	10 92 5c 41 	sts	0x415C, r1	; 0x80415c <current_measure_channel+0x1>
    2806:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <select_next_channel_to_measure>
    280a:	81 11       	cpse	r24, r1
    280c:	0b c0       	rjmp	.+22     	; 0x2824 <qtm_ptc_start_measurement_seq+0xd8>
    280e:	84 e0       	ldi	r24, 0x04	; 4
    2810:	80 93 5a 41 	sts	0x415A, r24	; 0x80415a <touch_seq_lib_state>
    2814:	80 91 5b 41 	lds	r24, 0x415B	; 0x80415b <current_measure_channel>
    2818:	90 91 5c 41 	lds	r25, 0x415C	; 0x80415c <current_measure_channel+0x1>
    281c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <qtm_measure_node>
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	08 95       	ret
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	80 93 5a 41 	sts	0x415A, r24	; 0x80415a <touch_seq_lib_state>
    282a:	08 95       	ret

0000282c <qtm_enable_sensor_node>:
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	c9 f0       	breq	.+50     	; 0x2862 <qtm_enable_sensor_node+0x36>
    2830:	dc 01       	movw	r26, r24
    2832:	ed 91       	ld	r30, X+
    2834:	fc 91       	ld	r31, X
    2836:	11 97       	sbiw	r26, 0x01	; 1
    2838:	20 81       	ld	r18, Z
    283a:	31 81       	ldd	r19, Z+1	; 0x01
    283c:	26 17       	cp	r18, r22
    283e:	37 07       	cpc	r19, r23
    2840:	90 f0       	brcs	.+36     	; 0x2866 <qtm_enable_sensor_node+0x3a>
    2842:	45 e0       	ldi	r20, 0x05	; 5
    2844:	46 9f       	mul	r20, r22
    2846:	90 01       	movw	r18, r0
    2848:	47 9f       	mul	r20, r23
    284a:	30 0d       	add	r19, r0
    284c:	11 24       	eor	r1, r1
    284e:	14 96       	adiw	r26, 0x04	; 4
    2850:	ed 91       	ld	r30, X+
    2852:	fc 91       	ld	r31, X
    2854:	15 97       	sbiw	r26, 0x05	; 5
    2856:	e2 0f       	add	r30, r18
    2858:	f3 1f       	adc	r31, r19
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	80 83       	st	Z, r24
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	08 95       	ret
    2862:	8b e0       	ldi	r24, 0x0B	; 11
    2864:	08 95       	ret
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	08 95       	ret

0000286a <qtm_calibrate_sensor_node>:
    286a:	fc 01       	movw	r30, r24
    286c:	89 2b       	or	r24, r25
    286e:	d1 f1       	breq	.+116    	; 0x28e4 <qtm_calibrate_sensor_node+0x7a>
    2870:	a0 81       	ld	r26, Z
    2872:	b1 81       	ldd	r27, Z+1	; 0x01
    2874:	8d 91       	ld	r24, X+
    2876:	9c 91       	ld	r25, X
    2878:	11 97       	sbiw	r26, 0x01	; 1
    287a:	86 17       	cp	r24, r22
    287c:	97 07       	cpc	r25, r23
    287e:	a0 f1       	brcs	.+104    	; 0x28e8 <qtm_calibrate_sensor_node+0x7e>
    2880:	12 96       	adiw	r26, 0x02	; 2
    2882:	9c 91       	ld	r25, X
    2884:	04 80       	ldd	r0, Z+4	; 0x04
    2886:	f5 81       	ldd	r31, Z+5	; 0x05
    2888:	e0 2d       	mov	r30, r0
    288a:	90 34       	cpi	r25, 0x40	; 64
    288c:	59 f4       	brne	.+22     	; 0x28a4 <qtm_calibrate_sensor_node+0x3a>
    288e:	85 e0       	ldi	r24, 0x05	; 5
    2890:	86 9f       	mul	r24, r22
    2892:	d0 01       	movw	r26, r0
    2894:	87 9f       	mul	r24, r23
    2896:	b0 0d       	add	r27, r0
    2898:	11 24       	eor	r1, r1
    289a:	ae 0f       	add	r26, r30
    289c:	bf 1f       	adc	r27, r31
    289e:	80 ea       	ldi	r24, 0xA0	; 160
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	0d c0       	rjmp	.+26     	; 0x28be <qtm_calibrate_sensor_node+0x54>
    28a4:	90 58       	subi	r25, 0x80	; 128
    28a6:	93 30       	cpi	r25, 0x03	; 3
    28a8:	80 f4       	brcc	.+32     	; 0x28ca <qtm_calibrate_sensor_node+0x60>
    28aa:	85 e0       	ldi	r24, 0x05	; 5
    28ac:	86 9f       	mul	r24, r22
    28ae:	d0 01       	movw	r26, r0
    28b0:	87 9f       	mul	r24, r23
    28b2:	b0 0d       	add	r27, r0
    28b4:	11 24       	eor	r1, r1
    28b6:	ae 0f       	add	r26, r30
    28b8:	bf 1f       	adc	r27, r31
    28ba:	80 ef       	ldi	r24, 0xF0	; 240
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	13 96       	adiw	r26, 0x03	; 3
    28c0:	8d 93       	st	X+, r24
    28c2:	9c 93       	st	X, r25
    28c4:	14 97       	sbiw	r26, 0x04	; 4
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <qtm_calibrate_sensor_node+0x62>
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	95 e0       	ldi	r25, 0x05	; 5
    28ce:	96 9f       	mul	r25, r22
    28d0:	90 01       	movw	r18, r0
    28d2:	97 9f       	mul	r25, r23
    28d4:	30 0d       	add	r19, r0
    28d6:	11 24       	eor	r1, r1
    28d8:	e2 0f       	add	r30, r18
    28da:	f3 1f       	adc	r31, r19
    28dc:	90 81       	ld	r25, Z
    28de:	92 60       	ori	r25, 0x02	; 2
    28e0:	90 83       	st	Z, r25
    28e2:	08 95       	ret
    28e4:	8b e0       	ldi	r24, 0x0B	; 11
    28e6:	08 95       	ret
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	08 95       	ret

000028ec <qtm_avr_da_ptc_handler_wcomp>:
    28ec:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    28f0:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    28f4:	60 91 5b 41 	lds	r22, 0x415B	; 0x80415b <current_measure_channel>
    28f8:	70 91 5c 41 	lds	r23, 0x415C	; 0x80415c <current_measure_channel+0x1>
    28fc:	cb 01       	movw	r24, r22
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	e0 91 6f 42 	lds	r30, 0x426F	; 0x80426f <qtm_raw_data_measurements_ptr>
    2906:	f0 91 70 42 	lds	r31, 0x4270	; 0x804270 <qtm_raw_data_measurements_ptr+0x1>
    290a:	e8 0f       	add	r30, r24
    290c:	f9 1f       	adc	r31, r25
    290e:	20 83       	st	Z, r18
    2910:	31 83       	std	Z+1, r19	; 0x01
    2912:	a0 91 6d 42 	lds	r26, 0x426D	; 0x80426d <qtm_acquisition_control_working_set_ptr>
    2916:	b0 91 6e 42 	lds	r27, 0x426E	; 0x80426e <qtm_acquisition_control_working_set_ptr+0x1>
    291a:	44 e1       	ldi	r20, 0x14	; 20
    291c:	46 9f       	mul	r20, r22
    291e:	c0 01       	movw	r24, r0
    2920:	47 9f       	mul	r20, r23
    2922:	90 0d       	add	r25, r0
    2924:	11 24       	eor	r1, r1
    2926:	12 96       	adiw	r26, 0x02	; 2
    2928:	ed 91       	ld	r30, X+
    292a:	fc 91       	ld	r31, X
    292c:	13 97       	sbiw	r26, 0x03	; 3
    292e:	e8 0f       	add	r30, r24
    2930:	f9 1f       	adc	r31, r25
    2932:	92 89       	ldd	r25, Z+18	; 0x12
    2934:	9f 70       	andi	r25, 0x0F	; 15
    2936:	83 89       	ldd	r24, Z+19	; 0x13
    2938:	98 17       	cp	r25, r24
    293a:	10 f4       	brcc	.+4      	; 0x2940 <qtm_avr_da_ptc_handler_wcomp+0x54>
    293c:	89 1b       	sub	r24, r25
    293e:	01 c0       	rjmp	.+2      	; 0x2942 <qtm_avr_da_ptc_handler_wcomp+0x56>
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	95 e0       	ldi	r25, 0x05	; 5
    2944:	96 9f       	mul	r25, r22
    2946:	a0 01       	movw	r20, r0
    2948:	97 9f       	mul	r25, r23
    294a:	50 0d       	add	r21, r0
    294c:	11 24       	eor	r1, r1
    294e:	14 96       	adiw	r26, 0x04	; 4
    2950:	ed 91       	ld	r30, X+
    2952:	fc 91       	ld	r31, X
    2954:	15 97       	sbiw	r26, 0x05	; 5
    2956:	e4 0f       	add	r30, r20
    2958:	f5 1f       	adc	r31, r21
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <qtm_avr_da_ptc_handler_wcomp+0x74>
    295c:	36 95       	lsr	r19
    295e:	27 95       	ror	r18
    2960:	8a 95       	dec	r24
    2962:	e2 f7       	brpl	.-8      	; 0x295c <qtm_avr_da_ptc_handler_wcomp+0x70>
    2964:	21 83       	std	Z+1, r18	; 0x01
    2966:	32 83       	std	Z+2, r19	; 0x02
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	80 93 5a 41 	sts	0x415A, r24	; 0x80415a <touch_seq_lib_state>
    296e:	e0 91 56 41 	lds	r30, 0x4156	; 0x804156 <ptc_wcomp_happened_pointer>
    2972:	f0 91 57 41 	lds	r31, 0x4157	; 0x804157 <ptc_wcomp_happened_pointer+0x1>
    2976:	09 94       	ijmp

00002978 <qtm_avr_da_ptc_handler_eoc>:
    2978:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    297c:	80 91 cb 40 	lds	r24, 0x40CB	; 0x8040cb <qtm_which_mode_current>
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	09 f0       	breq	.+2      	; 0x2986 <qtm_avr_da_ptc_handler_eoc+0xe>
    2984:	4e c0       	rjmp	.+156    	; 0x2a22 <qtm_avr_da_ptc_handler_eoc+0xaa>
    2986:	40 91 da 07 	lds	r20, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    298a:	50 91 db 07 	lds	r21, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    298e:	80 91 5b 41 	lds	r24, 0x415B	; 0x80415b <current_measure_channel>
    2992:	90 91 5c 41 	lds	r25, 0x415C	; 0x80415c <current_measure_channel+0x1>
    2996:	9c 01       	movw	r18, r24
    2998:	22 0f       	add	r18, r18
    299a:	33 1f       	adc	r19, r19
    299c:	e0 91 6f 42 	lds	r30, 0x426F	; 0x80426f <qtm_raw_data_measurements_ptr>
    29a0:	f0 91 70 42 	lds	r31, 0x4270	; 0x804270 <qtm_raw_data_measurements_ptr+0x1>
    29a4:	e2 0f       	add	r30, r18
    29a6:	f3 1f       	adc	r31, r19
    29a8:	40 83       	st	Z, r20
    29aa:	51 83       	std	Z+1, r21	; 0x01
    29ac:	01 96       	adiw	r24, 0x01	; 1
    29ae:	80 93 5b 41 	sts	0x415B, r24	; 0x80415b <current_measure_channel>
    29b2:	90 93 5c 41 	sts	0x415C, r25	; 0x80415c <current_measure_channel+0x1>
    29b6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <select_next_channel_to_measure>
    29ba:	81 11       	cpse	r24, r1
    29bc:	09 c0       	rjmp	.+18     	; 0x29d0 <qtm_avr_da_ptc_handler_eoc+0x58>
    29be:	84 e0       	ldi	r24, 0x04	; 4
    29c0:	80 93 5a 41 	sts	0x415A, r24	; 0x80415a <touch_seq_lib_state>
    29c4:	80 91 5b 41 	lds	r24, 0x415B	; 0x80415b <current_measure_channel>
    29c8:	90 91 5c 41 	lds	r25, 0x415C	; 0x80415c <current_measure_channel+0x1>
    29cc:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <qtm_measure_node>
    29d0:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    29d4:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    29d8:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    29dc:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    29e0:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    29e4:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    29e8:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    29ec:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    29f0:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    29f4:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    29f8:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    29fc:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    2a00:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    2a04:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    2a08:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    2a0c:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    2a10:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    2a14:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    2a18:	e0 91 58 41 	lds	r30, 0x4158	; 0x804158 <ptc_seq_measure_complete_pointer>
    2a1c:	f0 91 59 41 	lds	r31, 0x4159	; 0x804159 <ptc_seq_measure_complete_pointer+0x1>
    2a20:	09 94       	ijmp
    2a22:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <qtm_avr_da_ptc_handler_wcomp>

00002a26 <__ashrdi3>:
    2a26:	97 fb       	bst	r25, 7
    2a28:	10 f8       	bld	r1, 0

00002a2a <__lshrdi3>:
    2a2a:	16 94       	lsr	r1
    2a2c:	00 08       	sbc	r0, r0
    2a2e:	0f 93       	push	r16
    2a30:	08 30       	cpi	r16, 0x08	; 8
    2a32:	98 f0       	brcs	.+38     	; 0x2a5a <__lshrdi3+0x30>
    2a34:	08 50       	subi	r16, 0x08	; 8
    2a36:	23 2f       	mov	r18, r19
    2a38:	34 2f       	mov	r19, r20
    2a3a:	45 2f       	mov	r20, r21
    2a3c:	56 2f       	mov	r21, r22
    2a3e:	67 2f       	mov	r22, r23
    2a40:	78 2f       	mov	r23, r24
    2a42:	89 2f       	mov	r24, r25
    2a44:	90 2d       	mov	r25, r0
    2a46:	f4 cf       	rjmp	.-24     	; 0x2a30 <__lshrdi3+0x6>
    2a48:	05 94       	asr	r0
    2a4a:	97 95       	ror	r25
    2a4c:	87 95       	ror	r24
    2a4e:	77 95       	ror	r23
    2a50:	67 95       	ror	r22
    2a52:	57 95       	ror	r21
    2a54:	47 95       	ror	r20
    2a56:	37 95       	ror	r19
    2a58:	27 95       	ror	r18
    2a5a:	0a 95       	dec	r16
    2a5c:	aa f7       	brpl	.-22     	; 0x2a48 <__lshrdi3+0x1e>
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <__cmpdi2_s8>:
    2a62:	00 24       	eor	r0, r0
    2a64:	a7 fd       	sbrc	r26, 7
    2a66:	00 94       	com	r0
    2a68:	2a 17       	cp	r18, r26
    2a6a:	30 05       	cpc	r19, r0
    2a6c:	40 05       	cpc	r20, r0
    2a6e:	50 05       	cpc	r21, r0
    2a70:	60 05       	cpc	r22, r0
    2a72:	70 05       	cpc	r23, r0
    2a74:	80 05       	cpc	r24, r0
    2a76:	90 05       	cpc	r25, r0
    2a78:	08 95       	ret

00002a7a <_exit>:
    2a7a:	f8 94       	cli

00002a7c <__stop_program>:
    2a7c:	ff cf       	rjmp	.-2      	; 0x2a7c <__stop_program>
